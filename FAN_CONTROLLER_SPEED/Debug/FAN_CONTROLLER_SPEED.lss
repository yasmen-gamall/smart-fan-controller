
FAN_CONTROLLER_SPEED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000033e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000148  00800060  000033e8  0000345c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002a84  00000000  00000000  000035a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000019ba  00000000  00000000  00006028  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  000079e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00007b82  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  00007d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  0000a17f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  0000b505  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000c6dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000c89c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000cb92  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000d500  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ee       	ldi	r30, 0xE8	; 232
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 a3 18 	call	0x3146	; 0x3146 <main>
      7a:	0c 94 f2 19 	jmp	0x33e4	; 0x33e4 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 76 19 	jmp	0x32ec	; 0x32ec <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ad e8       	ldi	r26, 0x8D	; 141
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 92 19 	jmp	0x3324	; 0x3324 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 82 19 	jmp	0x3304	; 0x3304 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 9e 19 	jmp	0x333c	; 0x333c <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 82 19 	jmp	0x3304	; 0x3304 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 9e 19 	jmp	0x333c	; 0x333c <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 76 19 	jmp	0x32ec	; 0x32ec <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8d e8       	ldi	r24, 0x8D	; 141
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 92 19 	jmp	0x3324	; 0x3324 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 7e 19 	jmp	0x32fc	; 0x32fc <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6d e8       	ldi	r22, 0x8D	; 141
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 9a 19 	jmp	0x3334	; 0x3334 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 82 19 	jmp	0x3304	; 0x3304 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 9e 19 	jmp	0x333c	; 0x333c <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 82 19 	jmp	0x3304	; 0x3304 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 9e 19 	jmp	0x333c	; 0x333c <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 82 19 	jmp	0x3304	; 0x3304 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 9e 19 	jmp	0x333c	; 0x333c <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 86 19 	jmp	0x330c	; 0x330c <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 a2 19 	jmp	0x3344	; 0x3344 <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 7e 19 	jmp	0x32fc	; 0x32fc <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 9a 19 	jmp	0x3334	; 0x3334 <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	eb 56       	subi	r30, 0x6B	; 107
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <DIO_vSetPinDirection>:
#include "../lib/std_types.h"
#include "DIO_interface.h"
#include "DIO_REG.h"

#define SET_BIT(REG,BIT) (REG|=(1<<BIT))
void DIO_vSetPinDirection(uint8 Copy_u8PORT, uint8 Copy_u8PinNumber,uint8 copy_u8state) {
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	00 d0       	rcall	.+0      	; 0xe24 <DIO_vSetPinDirection+0x6>
     e24:	00 d0       	rcall	.+0      	; 0xe26 <DIO_vSetPinDirection+0x8>
     e26:	0f 92       	push	r0
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
     e2c:	89 83       	std	Y+1, r24	; 0x01
     e2e:	6a 83       	std	Y+2, r22	; 0x02
     e30:	4b 83       	std	Y+3, r20	; 0x03

	if ((Copy_u8PinNumber >= NUM_OF_PINS_PER_PORT)
     e32:	8a 81       	ldd	r24, Y+2	; 0x02
     e34:	88 30       	cpi	r24, 0x08	; 8
     e36:	08 f0       	brcs	.+2      	; 0xe3a <DIO_vSetPinDirection+0x1c>
     e38:	e5 c0       	rjmp	.+458    	; 0x1004 <DIO_vSetPinDirection+0x1e6>
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	84 30       	cpi	r24, 0x04	; 4
     e3e:	08 f0       	brcs	.+2      	; 0xe42 <DIO_vSetPinDirection+0x24>
     e40:	e1 c0       	rjmp	.+450    	; 0x1004 <DIO_vSetPinDirection+0x1e6>
			|| (Copy_u8PORT >= NUM_OF_PORTS)) {
	} else {

		switch (Copy_u8PORT) {
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	3d 83       	std	Y+5, r19	; 0x05
     e4a:	2c 83       	std	Y+4, r18	; 0x04
     e4c:	8c 81       	ldd	r24, Y+4	; 0x04
     e4e:	9d 81       	ldd	r25, Y+5	; 0x05
     e50:	81 30       	cpi	r24, 0x01	; 1
     e52:	91 05       	cpc	r25, r1
     e54:	09 f4       	brne	.+2      	; 0xe58 <DIO_vSetPinDirection+0x3a>
     e56:	47 c0       	rjmp	.+142    	; 0xee6 <DIO_vSetPinDirection+0xc8>
     e58:	2c 81       	ldd	r18, Y+4	; 0x04
     e5a:	3d 81       	ldd	r19, Y+5	; 0x05
     e5c:	22 30       	cpi	r18, 0x02	; 2
     e5e:	31 05       	cpc	r19, r1
     e60:	2c f4       	brge	.+10     	; 0xe6c <DIO_vSetPinDirection+0x4e>
     e62:	8c 81       	ldd	r24, Y+4	; 0x04
     e64:	9d 81       	ldd	r25, Y+5	; 0x05
     e66:	00 97       	sbiw	r24, 0x00	; 0
     e68:	71 f0       	breq	.+28     	; 0xe86 <DIO_vSetPinDirection+0x68>
     e6a:	cc c0       	rjmp	.+408    	; 0x1004 <DIO_vSetPinDirection+0x1e6>
     e6c:	2c 81       	ldd	r18, Y+4	; 0x04
     e6e:	3d 81       	ldd	r19, Y+5	; 0x05
     e70:	22 30       	cpi	r18, 0x02	; 2
     e72:	31 05       	cpc	r19, r1
     e74:	09 f4       	brne	.+2      	; 0xe78 <DIO_vSetPinDirection+0x5a>
     e76:	67 c0       	rjmp	.+206    	; 0xf46 <DIO_vSetPinDirection+0x128>
     e78:	8c 81       	ldd	r24, Y+4	; 0x04
     e7a:	9d 81       	ldd	r25, Y+5	; 0x05
     e7c:	83 30       	cpi	r24, 0x03	; 3
     e7e:	91 05       	cpc	r25, r1
     e80:	09 f4       	brne	.+2      	; 0xe84 <DIO_vSetPinDirection+0x66>
     e82:	91 c0       	rjmp	.+290    	; 0xfa6 <DIO_vSetPinDirection+0x188>
     e84:	bf c0       	rjmp	.+382    	; 0x1004 <DIO_vSetPinDirection+0x1e6>
		case PORTA_ID:
			if (copy_u8state == PIN_OUTPUT) {
     e86:	8b 81       	ldd	r24, Y+3	; 0x03
     e88:	81 30       	cpi	r24, 0x01	; 1
     e8a:	b1 f4       	brne	.+44     	; 0xeb8 <DIO_vSetPinDirection+0x9a>
				SET_BIT(PORTA_BASE.DDR, Copy_u8PinNumber);
     e8c:	a9 e3       	ldi	r26, 0x39	; 57
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e9 e3       	ldi	r30, 0x39	; 57
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	81 81       	ldd	r24, Z+1	; 0x01
     e96:	48 2f       	mov	r20, r24
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	02 2e       	mov	r0, r18
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <DIO_vSetPinDirection+0x8c>
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	0a 94       	dec	r0
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <DIO_vSetPinDirection+0x88>
     eae:	84 2b       	or	r24, r20
     eb0:	11 96       	adiw	r26, 0x01	; 1
     eb2:	8c 93       	st	X, r24
     eb4:	11 97       	sbiw	r26, 0x01	; 1
     eb6:	a6 c0       	rjmp	.+332    	; 0x1004 <DIO_vSetPinDirection+0x1e6>

			} else {
				CLEAR_BIT(PORTA_BASE.DDR, Copy_u8PinNumber);
     eb8:	a9 e3       	ldi	r26, 0x39	; 57
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e9 e3       	ldi	r30, 0x39	; 57
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	81 81       	ldd	r24, Z+1	; 0x01
     ec2:	48 2f       	mov	r20, r24
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 2e       	mov	r0, r18
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <DIO_vSetPinDirection+0xb8>
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	0a 94       	dec	r0
     ed8:	e2 f7       	brpl	.-8      	; 0xed2 <DIO_vSetPinDirection+0xb4>
     eda:	80 95       	com	r24
     edc:	84 23       	and	r24, r20
     ede:	11 96       	adiw	r26, 0x01	; 1
     ee0:	8c 93       	st	X, r24
     ee2:	11 97       	sbiw	r26, 0x01	; 1
     ee4:	8f c0       	rjmp	.+286    	; 0x1004 <DIO_vSetPinDirection+0x1e6>
			}
			break;
		case PORTB_ID:

			if (copy_u8state == PIN_OUTPUT) {
     ee6:	8b 81       	ldd	r24, Y+3	; 0x03
     ee8:	81 30       	cpi	r24, 0x01	; 1
     eea:	b1 f4       	brne	.+44     	; 0xf18 <DIO_vSetPinDirection+0xfa>
				SET_BIT(PORTB_BASE.DDR, Copy_u8PinNumber);
     eec:	a6 e3       	ldi	r26, 0x36	; 54
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e6 e3       	ldi	r30, 0x36	; 54
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	81 81       	ldd	r24, Z+1	; 0x01
     ef6:	48 2f       	mov	r20, r24
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	02 2e       	mov	r0, r18
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <DIO_vSetPinDirection+0xec>
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	0a 94       	dec	r0
     f0c:	e2 f7       	brpl	.-8      	; 0xf06 <DIO_vSetPinDirection+0xe8>
     f0e:	84 2b       	or	r24, r20
     f10:	11 96       	adiw	r26, 0x01	; 1
     f12:	8c 93       	st	X, r24
     f14:	11 97       	sbiw	r26, 0x01	; 1
     f16:	76 c0       	rjmp	.+236    	; 0x1004 <DIO_vSetPinDirection+0x1e6>
			} else {
				CLEAR_BIT(PORTB_BASE.DDR, Copy_u8PinNumber);
     f18:	a6 e3       	ldi	r26, 0x36	; 54
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e6 e3       	ldi	r30, 0x36	; 54
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	81 81       	ldd	r24, Z+1	; 0x01
     f22:	48 2f       	mov	r20, r24
     f24:	8a 81       	ldd	r24, Y+2	; 0x02
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	02 2e       	mov	r0, r18
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <DIO_vSetPinDirection+0x118>
     f32:	88 0f       	add	r24, r24
     f34:	99 1f       	adc	r25, r25
     f36:	0a 94       	dec	r0
     f38:	e2 f7       	brpl	.-8      	; 0xf32 <DIO_vSetPinDirection+0x114>
     f3a:	80 95       	com	r24
     f3c:	84 23       	and	r24, r20
     f3e:	11 96       	adiw	r26, 0x01	; 1
     f40:	8c 93       	st	X, r24
     f42:	11 97       	sbiw	r26, 0x01	; 1
     f44:	5f c0       	rjmp	.+190    	; 0x1004 <DIO_vSetPinDirection+0x1e6>
			}
			break;
		case PORTC_ID:
			if (copy_u8state == PIN_OUTPUT) {
     f46:	8b 81       	ldd	r24, Y+3	; 0x03
     f48:	81 30       	cpi	r24, 0x01	; 1
     f4a:	b1 f4       	brne	.+44     	; 0xf78 <DIO_vSetPinDirection+0x15a>
				SET_BIT(PORTC_BASE.DDR, Copy_u8PinNumber);
     f4c:	a3 e3       	ldi	r26, 0x33	; 51
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	e3 e3       	ldi	r30, 0x33	; 51
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	81 81       	ldd	r24, Z+1	; 0x01
     f56:	48 2f       	mov	r20, r24
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	02 2e       	mov	r0, r18
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <DIO_vSetPinDirection+0x14c>
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	0a 94       	dec	r0
     f6c:	e2 f7       	brpl	.-8      	; 0xf66 <DIO_vSetPinDirection+0x148>
     f6e:	84 2b       	or	r24, r20
     f70:	11 96       	adiw	r26, 0x01	; 1
     f72:	8c 93       	st	X, r24
     f74:	11 97       	sbiw	r26, 0x01	; 1
     f76:	46 c0       	rjmp	.+140    	; 0x1004 <DIO_vSetPinDirection+0x1e6>
			} else {
				CLEAR_BIT(PORTC_BASE.DDR, Copy_u8PinNumber);
     f78:	a3 e3       	ldi	r26, 0x33	; 51
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e3 e3       	ldi	r30, 0x33	; 51
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	81 81       	ldd	r24, Z+1	; 0x01
     f82:	48 2f       	mov	r20, r24
     f84:	8a 81       	ldd	r24, Y+2	; 0x02
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	02 2e       	mov	r0, r18
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <DIO_vSetPinDirection+0x178>
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	0a 94       	dec	r0
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <DIO_vSetPinDirection+0x174>
     f9a:	80 95       	com	r24
     f9c:	84 23       	and	r24, r20
     f9e:	11 96       	adiw	r26, 0x01	; 1
     fa0:	8c 93       	st	X, r24
     fa2:	11 97       	sbiw	r26, 0x01	; 1
     fa4:	2f c0       	rjmp	.+94     	; 0x1004 <DIO_vSetPinDirection+0x1e6>
			}
			break;
		case PORTD_ID:
			if (copy_u8state == PIN_OUTPUT) {
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03
     fa8:	81 30       	cpi	r24, 0x01	; 1
     faa:	b1 f4       	brne	.+44     	; 0xfd8 <DIO_vSetPinDirection+0x1ba>
				SET_BIT(PORTD_BASE.DDR, Copy_u8PinNumber);
     fac:	a0 e3       	ldi	r26, 0x30	; 48
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e0 e3       	ldi	r30, 0x30	; 48
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	81 81       	ldd	r24, Z+1	; 0x01
     fb6:	48 2f       	mov	r20, r24
     fb8:	8a 81       	ldd	r24, Y+2	; 0x02
     fba:	28 2f       	mov	r18, r24
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	02 2e       	mov	r0, r18
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <DIO_vSetPinDirection+0x1ac>
     fc6:	88 0f       	add	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	0a 94       	dec	r0
     fcc:	e2 f7       	brpl	.-8      	; 0xfc6 <DIO_vSetPinDirection+0x1a8>
     fce:	84 2b       	or	r24, r20
     fd0:	11 96       	adiw	r26, 0x01	; 1
     fd2:	8c 93       	st	X, r24
     fd4:	11 97       	sbiw	r26, 0x01	; 1
     fd6:	16 c0       	rjmp	.+44     	; 0x1004 <DIO_vSetPinDirection+0x1e6>
			} else {
				CLEAR_BIT(PORTD_BASE.DDR, Copy_u8PinNumber);
     fd8:	a0 e3       	ldi	r26, 0x30	; 48
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e0 e3       	ldi	r30, 0x30	; 48
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	81 81       	ldd	r24, Z+1	; 0x01
     fe2:	48 2f       	mov	r20, r24
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 2e       	mov	r0, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <DIO_vSetPinDirection+0x1d8>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	0a 94       	dec	r0
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <DIO_vSetPinDirection+0x1d4>
     ffa:	80 95       	com	r24
     ffc:	84 23       	and	r24, r20
     ffe:	11 96       	adiw	r26, 0x01	; 1
    1000:	8c 93       	st	X, r24
    1002:	11 97       	sbiw	r26, 0x01	; 1
			}
			break;
		}
	}
}
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	08 95       	ret

00001014 <DIO_vWritePin>:

void DIO_vWritePin(uint8 Copy_u8PORT, uint8 Copy_u8PinNumber,
		uint8 Copy_u8value) {
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	00 d0       	rcall	.+0      	; 0x101a <DIO_vWritePin+0x6>
    101a:	00 d0       	rcall	.+0      	; 0x101c <DIO_vWritePin+0x8>
    101c:	0f 92       	push	r0
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62
    1022:	89 83       	std	Y+1, r24	; 0x01
    1024:	6a 83       	std	Y+2, r22	; 0x02
    1026:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((Copy_u8PinNumber >= NUM_OF_PINS_PER_PORT)
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	88 30       	cpi	r24, 0x08	; 8
    102c:	08 f0       	brcs	.+2      	; 0x1030 <DIO_vWritePin+0x1c>
    102e:	e5 c0       	rjmp	.+458    	; 0x11fa <DIO_vWritePin+0x1e6>
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	84 30       	cpi	r24, 0x04	; 4
    1034:	08 f0       	brcs	.+2      	; 0x1038 <DIO_vWritePin+0x24>
    1036:	e1 c0       	rjmp	.+450    	; 0x11fa <DIO_vWritePin+0x1e6>
			|| (Copy_u8PORT >= NUM_OF_PORTS)) {
		/* Do Nothing */
	} else {
		/* Write the pin value as required */
		switch (Copy_u8PORT) {
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	3d 83       	std	Y+5, r19	; 0x05
    1040:	2c 83       	std	Y+4, r18	; 0x04
    1042:	8c 81       	ldd	r24, Y+4	; 0x04
    1044:	9d 81       	ldd	r25, Y+5	; 0x05
    1046:	81 30       	cpi	r24, 0x01	; 1
    1048:	91 05       	cpc	r25, r1
    104a:	09 f4       	brne	.+2      	; 0x104e <DIO_vWritePin+0x3a>
    104c:	47 c0       	rjmp	.+142    	; 0x10dc <DIO_vWritePin+0xc8>
    104e:	2c 81       	ldd	r18, Y+4	; 0x04
    1050:	3d 81       	ldd	r19, Y+5	; 0x05
    1052:	22 30       	cpi	r18, 0x02	; 2
    1054:	31 05       	cpc	r19, r1
    1056:	2c f4       	brge	.+10     	; 0x1062 <DIO_vWritePin+0x4e>
    1058:	8c 81       	ldd	r24, Y+4	; 0x04
    105a:	9d 81       	ldd	r25, Y+5	; 0x05
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	71 f0       	breq	.+28     	; 0x107c <DIO_vWritePin+0x68>
    1060:	cc c0       	rjmp	.+408    	; 0x11fa <DIO_vWritePin+0x1e6>
    1062:	2c 81       	ldd	r18, Y+4	; 0x04
    1064:	3d 81       	ldd	r19, Y+5	; 0x05
    1066:	22 30       	cpi	r18, 0x02	; 2
    1068:	31 05       	cpc	r19, r1
    106a:	09 f4       	brne	.+2      	; 0x106e <DIO_vWritePin+0x5a>
    106c:	67 c0       	rjmp	.+206    	; 0x113c <DIO_vWritePin+0x128>
    106e:	8c 81       	ldd	r24, Y+4	; 0x04
    1070:	9d 81       	ldd	r25, Y+5	; 0x05
    1072:	83 30       	cpi	r24, 0x03	; 3
    1074:	91 05       	cpc	r25, r1
    1076:	09 f4       	brne	.+2      	; 0x107a <DIO_vWritePin+0x66>
    1078:	91 c0       	rjmp	.+290    	; 0x119c <DIO_vWritePin+0x188>
    107a:	bf c0       	rjmp	.+382    	; 0x11fa <DIO_vWritePin+0x1e6>
		case PORTA_ID:
			if (Copy_u8value == LOGIC_HIGH) {
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	81 30       	cpi	r24, 0x01	; 1
    1080:	b1 f4       	brne	.+44     	; 0x10ae <DIO_vWritePin+0x9a>
				SET_BIT(PORTA_BASE.Port, Copy_u8PinNumber);
    1082:	a9 e3       	ldi	r26, 0x39	; 57
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e9 e3       	ldi	r30, 0x39	; 57
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	82 81       	ldd	r24, Z+2	; 0x02
    108c:	48 2f       	mov	r20, r24
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	02 2e       	mov	r0, r18
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <DIO_vWritePin+0x8c>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	0a 94       	dec	r0
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <DIO_vWritePin+0x88>
    10a4:	84 2b       	or	r24, r20
    10a6:	12 96       	adiw	r26, 0x02	; 2
    10a8:	8c 93       	st	X, r24
    10aa:	12 97       	sbiw	r26, 0x02	; 2
    10ac:	a6 c0       	rjmp	.+332    	; 0x11fa <DIO_vWritePin+0x1e6>
			} else {
				CLEAR_BIT(PORTA_BASE.Port, Copy_u8PinNumber);
    10ae:	a9 e3       	ldi	r26, 0x39	; 57
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e9 e3       	ldi	r30, 0x39	; 57
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	82 81       	ldd	r24, Z+2	; 0x02
    10b8:	48 2f       	mov	r20, r24
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	02 2e       	mov	r0, r18
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <DIO_vWritePin+0xb8>
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	0a 94       	dec	r0
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <DIO_vWritePin+0xb4>
    10d0:	80 95       	com	r24
    10d2:	84 23       	and	r24, r20
    10d4:	12 96       	adiw	r26, 0x02	; 2
    10d6:	8c 93       	st	X, r24
    10d8:	12 97       	sbiw	r26, 0x02	; 2
    10da:	8f c0       	rjmp	.+286    	; 0x11fa <DIO_vWritePin+0x1e6>
			}
			break;
		case PORTB_ID:
			if (Copy_u8value == LOGIC_HIGH) {
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	81 30       	cpi	r24, 0x01	; 1
    10e0:	b1 f4       	brne	.+44     	; 0x110e <DIO_vWritePin+0xfa>
				SET_BIT(PORTB_BASE.Port, Copy_u8PinNumber);
    10e2:	a6 e3       	ldi	r26, 0x36	; 54
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e6 e3       	ldi	r30, 0x36	; 54
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	82 81       	ldd	r24, Z+2	; 0x02
    10ec:	48 2f       	mov	r20, r24
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	02 2e       	mov	r0, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <DIO_vWritePin+0xec>
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	0a 94       	dec	r0
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <DIO_vWritePin+0xe8>
    1104:	84 2b       	or	r24, r20
    1106:	12 96       	adiw	r26, 0x02	; 2
    1108:	8c 93       	st	X, r24
    110a:	12 97       	sbiw	r26, 0x02	; 2
    110c:	76 c0       	rjmp	.+236    	; 0x11fa <DIO_vWritePin+0x1e6>
			} else {
				CLEAR_BIT(PORTB_BASE.Port, Copy_u8PinNumber);
    110e:	a6 e3       	ldi	r26, 0x36	; 54
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e6 e3       	ldi	r30, 0x36	; 54
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	82 81       	ldd	r24, Z+2	; 0x02
    1118:	48 2f       	mov	r20, r24
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	02 2e       	mov	r0, r18
    1126:	02 c0       	rjmp	.+4      	; 0x112c <DIO_vWritePin+0x118>
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	0a 94       	dec	r0
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <DIO_vWritePin+0x114>
    1130:	80 95       	com	r24
    1132:	84 23       	and	r24, r20
    1134:	12 96       	adiw	r26, 0x02	; 2
    1136:	8c 93       	st	X, r24
    1138:	12 97       	sbiw	r26, 0x02	; 2
    113a:	5f c0       	rjmp	.+190    	; 0x11fa <DIO_vWritePin+0x1e6>
			}
			break;
		case PORTC_ID:
			if (Copy_u8value == LOGIC_HIGH) {
    113c:	8b 81       	ldd	r24, Y+3	; 0x03
    113e:	81 30       	cpi	r24, 0x01	; 1
    1140:	b1 f4       	brne	.+44     	; 0x116e <DIO_vWritePin+0x15a>
				SET_BIT(PORTC_BASE.Port, Copy_u8PinNumber);
    1142:	a3 e3       	ldi	r26, 0x33	; 51
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e3 e3       	ldi	r30, 0x33	; 51
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	82 81       	ldd	r24, Z+2	; 0x02
    114c:	48 2f       	mov	r20, r24
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	02 2e       	mov	r0, r18
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <DIO_vWritePin+0x14c>
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	0a 94       	dec	r0
    1162:	e2 f7       	brpl	.-8      	; 0x115c <DIO_vWritePin+0x148>
    1164:	84 2b       	or	r24, r20
    1166:	12 96       	adiw	r26, 0x02	; 2
    1168:	8c 93       	st	X, r24
    116a:	12 97       	sbiw	r26, 0x02	; 2
    116c:	46 c0       	rjmp	.+140    	; 0x11fa <DIO_vWritePin+0x1e6>
			} else {
				CLEAR_BIT(PORTC_BASE.Port, Copy_u8PinNumber);
    116e:	a3 e3       	ldi	r26, 0x33	; 51
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	e3 e3       	ldi	r30, 0x33	; 51
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	82 81       	ldd	r24, Z+2	; 0x02
    1178:	48 2f       	mov	r20, r24
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	02 2e       	mov	r0, r18
    1186:	02 c0       	rjmp	.+4      	; 0x118c <DIO_vWritePin+0x178>
    1188:	88 0f       	add	r24, r24
    118a:	99 1f       	adc	r25, r25
    118c:	0a 94       	dec	r0
    118e:	e2 f7       	brpl	.-8      	; 0x1188 <DIO_vWritePin+0x174>
    1190:	80 95       	com	r24
    1192:	84 23       	and	r24, r20
    1194:	12 96       	adiw	r26, 0x02	; 2
    1196:	8c 93       	st	X, r24
    1198:	12 97       	sbiw	r26, 0x02	; 2
    119a:	2f c0       	rjmp	.+94     	; 0x11fa <DIO_vWritePin+0x1e6>
			}
			break;
		case PORTD_ID:
			if (Copy_u8value == LOGIC_HIGH) {
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	81 30       	cpi	r24, 0x01	; 1
    11a0:	b1 f4       	brne	.+44     	; 0x11ce <DIO_vWritePin+0x1ba>
				SET_BIT(PORTD_BASE.Port, Copy_u8PinNumber);
    11a2:	a0 e3       	ldi	r26, 0x30	; 48
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e0 e3       	ldi	r30, 0x30	; 48
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	82 81       	ldd	r24, Z+2	; 0x02
    11ac:	48 2f       	mov	r20, r24
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	02 2e       	mov	r0, r18
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <DIO_vWritePin+0x1ac>
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	0a 94       	dec	r0
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <DIO_vWritePin+0x1a8>
    11c4:	84 2b       	or	r24, r20
    11c6:	12 96       	adiw	r26, 0x02	; 2
    11c8:	8c 93       	st	X, r24
    11ca:	12 97       	sbiw	r26, 0x02	; 2
    11cc:	16 c0       	rjmp	.+44     	; 0x11fa <DIO_vWritePin+0x1e6>
			} else {
				CLEAR_BIT(PORTD_BASE.Port, Copy_u8PinNumber);
    11ce:	a0 e3       	ldi	r26, 0x30	; 48
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	e0 e3       	ldi	r30, 0x30	; 48
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	82 81       	ldd	r24, Z+2	; 0x02
    11d8:	48 2f       	mov	r20, r24
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	02 2e       	mov	r0, r18
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <DIO_vWritePin+0x1d8>
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	0a 94       	dec	r0
    11ee:	e2 f7       	brpl	.-8      	; 0x11e8 <DIO_vWritePin+0x1d4>
    11f0:	80 95       	com	r24
    11f2:	84 23       	and	r24, r20
    11f4:	12 96       	adiw	r26, 0x02	; 2
    11f6:	8c 93       	st	X, r24
    11f8:	12 97       	sbiw	r26, 0x02	; 2
			}
			break;
		}
	}
}
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <DIO_vTogglePin>:

void DIO_vTogglePin(uint8 Copy_u8PORT, uint8 Copy_u8PinNumber) {
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	00 d0       	rcall	.+0      	; 0x1210 <DIO_vTogglePin+0x6>
    1210:	00 d0       	rcall	.+0      	; 0x1212 <DIO_vTogglePin+0x8>
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    1216:	89 83       	std	Y+1, r24	; 0x01
    1218:	6a 83       	std	Y+2, r22	; 0x02

	if (Copy_u8PORT >= NUM_OF_PORTS) {
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	84 30       	cpi	r24, 0x04	; 4
    121e:	08 f0       	brcs	.+2      	; 0x1222 <DIO_vTogglePin+0x18>
    1220:	6e c0       	rjmp	.+220    	; 0x12fe <DIO_vTogglePin+0xf4>
		/* Do Nothing */
	} else {
		/* Write the port value as required */
		switch (Copy_u8PORT) {
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	3c 83       	std	Y+4, r19	; 0x04
    122a:	2b 83       	std	Y+3, r18	; 0x03
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	9c 81       	ldd	r25, Y+4	; 0x04
    1230:	81 30       	cpi	r24, 0x01	; 1
    1232:	91 05       	cpc	r25, r1
    1234:	49 f1       	breq	.+82     	; 0x1288 <DIO_vTogglePin+0x7e>
    1236:	2b 81       	ldd	r18, Y+3	; 0x03
    1238:	3c 81       	ldd	r19, Y+4	; 0x04
    123a:	22 30       	cpi	r18, 0x02	; 2
    123c:	31 05       	cpc	r19, r1
    123e:	2c f4       	brge	.+10     	; 0x124a <DIO_vTogglePin+0x40>
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	9c 81       	ldd	r25, Y+4	; 0x04
    1244:	00 97       	sbiw	r24, 0x00	; 0
    1246:	61 f0       	breq	.+24     	; 0x1260 <DIO_vTogglePin+0x56>
    1248:	5a c0       	rjmp	.+180    	; 0x12fe <DIO_vTogglePin+0xf4>
    124a:	2b 81       	ldd	r18, Y+3	; 0x03
    124c:	3c 81       	ldd	r19, Y+4	; 0x04
    124e:	22 30       	cpi	r18, 0x02	; 2
    1250:	31 05       	cpc	r19, r1
    1252:	71 f1       	breq	.+92     	; 0x12b0 <DIO_vTogglePin+0xa6>
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	9c 81       	ldd	r25, Y+4	; 0x04
    1258:	83 30       	cpi	r24, 0x03	; 3
    125a:	91 05       	cpc	r25, r1
    125c:	e9 f1       	breq	.+122    	; 0x12d8 <DIO_vTogglePin+0xce>
    125e:	4f c0       	rjmp	.+158    	; 0x12fe <DIO_vTogglePin+0xf4>
		case PORTA_ID:

			TOGGLE_BIT(PORTA_BASE.Pin, Copy_u8PinNumber);
    1260:	a9 e3       	ldi	r26, 0x39	; 57
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e9 e3       	ldi	r30, 0x39	; 57
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	48 2f       	mov	r20, r24
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	02 2e       	mov	r0, r18
    1278:	02 c0       	rjmp	.+4      	; 0x127e <DIO_vTogglePin+0x74>
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	0a 94       	dec	r0
    1280:	e2 f7       	brpl	.-8      	; 0x127a <DIO_vTogglePin+0x70>
    1282:	84 27       	eor	r24, r20
    1284:	8c 93       	st	X, r24
    1286:	3b c0       	rjmp	.+118    	; 0x12fe <DIO_vTogglePin+0xf4>
			break;
		case PORTB_ID:
			TOGGLE_BIT(PORTB_BASE.Pin, Copy_u8PinNumber);
    1288:	a6 e3       	ldi	r26, 0x36	; 54
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e6 e3       	ldi	r30, 0x36	; 54
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	48 2f       	mov	r20, r24
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	02 2e       	mov	r0, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <DIO_vTogglePin+0x9c>
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	0a 94       	dec	r0
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <DIO_vTogglePin+0x98>
    12aa:	84 27       	eor	r24, r20
    12ac:	8c 93       	st	X, r24
    12ae:	27 c0       	rjmp	.+78     	; 0x12fe <DIO_vTogglePin+0xf4>
			break;
		case PORTC_ID:
			TOGGLE_BIT(PORTC_BASE.Pin, Copy_u8PinNumber);
    12b0:	a3 e3       	ldi	r26, 0x33	; 51
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	e3 e3       	ldi	r30, 0x33	; 51
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	48 2f       	mov	r20, r24
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	02 2e       	mov	r0, r18
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <DIO_vTogglePin+0xc4>
    12ca:	88 0f       	add	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	0a 94       	dec	r0
    12d0:	e2 f7       	brpl	.-8      	; 0x12ca <DIO_vTogglePin+0xc0>
    12d2:	84 27       	eor	r24, r20
    12d4:	8c 93       	st	X, r24
    12d6:	13 c0       	rjmp	.+38     	; 0x12fe <DIO_vTogglePin+0xf4>
			break;
		case PORTD_ID:
			TOGGLE_BIT(PORTD_BASE.Pin, Copy_u8PinNumber);
    12d8:	a0 e3       	ldi	r26, 0x30	; 48
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	e0 e3       	ldi	r30, 0x30	; 48
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	48 2f       	mov	r20, r24
    12e4:	8a 81       	ldd	r24, Y+2	; 0x02
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	02 2e       	mov	r0, r18
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <DIO_vTogglePin+0xec>
    12f2:	88 0f       	add	r24, r24
    12f4:	99 1f       	adc	r25, r25
    12f6:	0a 94       	dec	r0
    12f8:	e2 f7       	brpl	.-8      	; 0x12f2 <DIO_vTogglePin+0xe8>
    12fa:	84 27       	eor	r24, r20
    12fc:	8c 93       	st	X, r24
			break;
		}
	}

}
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <DIO_vSetPortDirection>:
void DIO_vSetPortDirection(uint8 Copy_u8PORT, uint8 copy_u8state) {
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	00 d0       	rcall	.+0      	; 0x1312 <DIO_vSetPortDirection+0x6>
    1312:	00 d0       	rcall	.+0      	; 0x1314 <DIO_vSetPortDirection+0x8>
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	89 83       	std	Y+1, r24	; 0x01
    131a:	6a 83       	std	Y+2, r22	; 0x02

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (Copy_u8PORT >= NUM_OF_PORTS) {
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	84 30       	cpi	r24, 0x04	; 4
    1320:	90 f5       	brcc	.+100    	; 0x1386 <DIO_vSetPortDirection+0x7a>
		/* Do Nothing */
	} else {
		/* Setup the port direction as required */
		switch (Copy_u8PORT) {
    1322:	89 81       	ldd	r24, Y+1	; 0x01
    1324:	28 2f       	mov	r18, r24
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	3c 83       	std	Y+4, r19	; 0x04
    132a:	2b 83       	std	Y+3, r18	; 0x03
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	9c 81       	ldd	r25, Y+4	; 0x04
    1330:	81 30       	cpi	r24, 0x01	; 1
    1332:	91 05       	cpc	r25, r1
    1334:	d1 f0       	breq	.+52     	; 0x136a <DIO_vSetPortDirection+0x5e>
    1336:	2b 81       	ldd	r18, Y+3	; 0x03
    1338:	3c 81       	ldd	r19, Y+4	; 0x04
    133a:	22 30       	cpi	r18, 0x02	; 2
    133c:	31 05       	cpc	r19, r1
    133e:	2c f4       	brge	.+10     	; 0x134a <DIO_vSetPortDirection+0x3e>
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	9c 81       	ldd	r25, Y+4	; 0x04
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	61 f0       	breq	.+24     	; 0x1360 <DIO_vSetPortDirection+0x54>
    1348:	1e c0       	rjmp	.+60     	; 0x1386 <DIO_vSetPortDirection+0x7a>
    134a:	2b 81       	ldd	r18, Y+3	; 0x03
    134c:	3c 81       	ldd	r19, Y+4	; 0x04
    134e:	22 30       	cpi	r18, 0x02	; 2
    1350:	31 05       	cpc	r19, r1
    1352:	81 f0       	breq	.+32     	; 0x1374 <DIO_vSetPortDirection+0x68>
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	9c 81       	ldd	r25, Y+4	; 0x04
    1358:	83 30       	cpi	r24, 0x03	; 3
    135a:	91 05       	cpc	r25, r1
    135c:	81 f0       	breq	.+32     	; 0x137e <DIO_vSetPortDirection+0x72>
    135e:	13 c0       	rjmp	.+38     	; 0x1386 <DIO_vSetPortDirection+0x7a>
		case PORTA_ID:
			PORTA_BASE.DDR = copy_u8state;
    1360:	e9 e3       	ldi	r30, 0x39	; 57
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	81 83       	std	Z+1, r24	; 0x01
    1368:	0e c0       	rjmp	.+28     	; 0x1386 <DIO_vSetPortDirection+0x7a>
			break;
		case PORTB_ID:
			PORTB_BASE.DDR = copy_u8state;
    136a:	e6 e3       	ldi	r30, 0x36	; 54
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	81 83       	std	Z+1, r24	; 0x01
    1372:	09 c0       	rjmp	.+18     	; 0x1386 <DIO_vSetPortDirection+0x7a>
			break;
		case PORTC_ID:
			PORTC_BASE.DDR = copy_u8state;
    1374:	e3 e3       	ldi	r30, 0x33	; 51
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	81 83       	std	Z+1, r24	; 0x01
    137c:	04 c0       	rjmp	.+8      	; 0x1386 <DIO_vSetPortDirection+0x7a>
			break;
		case PORTD_ID:
			PORTD_BASE.DDR = copy_u8state;
    137e:	e0 e3       	ldi	r30, 0x30	; 48
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	81 83       	std	Z+1, r24	; 0x01
			break;
		}
	}
}
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	08 95       	ret

00001394 <DIO_vWritePort>:
void DIO_vWritePort(uint8 Copy_u8PORT, uint8 Copy_u8value) {
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	00 d0       	rcall	.+0      	; 0x139a <DIO_vWritePort+0x6>
    139a:	00 d0       	rcall	.+0      	; 0x139c <DIO_vWritePort+0x8>
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	6a 83       	std	Y+2, r22	; 0x02

	/* Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (Copy_u8PORT >= NUM_OF_PORTS) {
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
    13a6:	84 30       	cpi	r24, 0x04	; 4
    13a8:	90 f5       	brcc	.+100    	; 0x140e <DIO_vWritePort+0x7a>
		/* Do Nothing */
	} else {
		/* Write the port value as required */
		switch (Copy_u8PORT) {
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	3c 83       	std	Y+4, r19	; 0x04
    13b2:	2b 83       	std	Y+3, r18	; 0x03
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	9c 81       	ldd	r25, Y+4	; 0x04
    13b8:	81 30       	cpi	r24, 0x01	; 1
    13ba:	91 05       	cpc	r25, r1
    13bc:	d1 f0       	breq	.+52     	; 0x13f2 <DIO_vWritePort+0x5e>
    13be:	2b 81       	ldd	r18, Y+3	; 0x03
    13c0:	3c 81       	ldd	r19, Y+4	; 0x04
    13c2:	22 30       	cpi	r18, 0x02	; 2
    13c4:	31 05       	cpc	r19, r1
    13c6:	2c f4       	brge	.+10     	; 0x13d2 <DIO_vWritePort+0x3e>
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	9c 81       	ldd	r25, Y+4	; 0x04
    13cc:	00 97       	sbiw	r24, 0x00	; 0
    13ce:	61 f0       	breq	.+24     	; 0x13e8 <DIO_vWritePort+0x54>
    13d0:	1e c0       	rjmp	.+60     	; 0x140e <DIO_vWritePort+0x7a>
    13d2:	2b 81       	ldd	r18, Y+3	; 0x03
    13d4:	3c 81       	ldd	r19, Y+4	; 0x04
    13d6:	22 30       	cpi	r18, 0x02	; 2
    13d8:	31 05       	cpc	r19, r1
    13da:	81 f0       	breq	.+32     	; 0x13fc <DIO_vWritePort+0x68>
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	9c 81       	ldd	r25, Y+4	; 0x04
    13e0:	83 30       	cpi	r24, 0x03	; 3
    13e2:	91 05       	cpc	r25, r1
    13e4:	81 f0       	breq	.+32     	; 0x1406 <DIO_vWritePort+0x72>
    13e6:	13 c0       	rjmp	.+38     	; 0x140e <DIO_vWritePort+0x7a>
		case PORTA_ID:
			PORTA_BASE.Port = Copy_u8value;
    13e8:	e9 e3       	ldi	r30, 0x39	; 57
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	82 83       	std	Z+2, r24	; 0x02
    13f0:	0e c0       	rjmp	.+28     	; 0x140e <DIO_vWritePort+0x7a>
			break;
		case PORTB_ID:
			PORTB_BASE.Port = Copy_u8value;
    13f2:	e6 e3       	ldi	r30, 0x36	; 54
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	82 83       	std	Z+2, r24	; 0x02
    13fa:	09 c0       	rjmp	.+18     	; 0x140e <DIO_vWritePort+0x7a>
			break;
		case PORTC_ID:
			PORTC_BASE.Port = Copy_u8value;
    13fc:	e3 e3       	ldi	r30, 0x33	; 51
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	82 83       	std	Z+2, r24	; 0x02
    1404:	04 c0       	rjmp	.+8      	; 0x140e <DIO_vWritePort+0x7a>
			break;
		case PORTD_ID:
			PORTD_BASE.Port = Copy_u8value;
    1406:	e0 e3       	ldi	r30, 0x30	; 48
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	82 83       	std	Z+2, r24	; 0x02
			break;
		}
	}
}
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	cf 91       	pop	r28
    1418:	df 91       	pop	r29
    141a:	08 95       	ret

0000141c <DIO_u8GetPinValue>:
uint8 DIO_u8GetPinValue(uint8 Copy_u8PORT, uint8 Copy_u8PinNumber) {
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	00 d0       	rcall	.+0      	; 0x1422 <DIO_u8GetPinValue+0x6>
    1422:	00 d0       	rcall	.+0      	; 0x1424 <DIO_u8GetPinValue+0x8>
    1424:	0f 92       	push	r0
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
    142a:	8a 83       	std	Y+2, r24	; 0x02
    142c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    142e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((Copy_u8PinNumber >= NUM_OF_PINS_PER_PORT)
    1430:	8b 81       	ldd	r24, Y+3	; 0x03
    1432:	88 30       	cpi	r24, 0x08	; 8
    1434:	08 f0       	brcs	.+2      	; 0x1438 <DIO_u8GetPinValue+0x1c>
    1436:	84 c0       	rjmp	.+264    	; 0x1540 <DIO_u8GetPinValue+0x124>
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	84 30       	cpi	r24, 0x04	; 4
    143c:	08 f0       	brcs	.+2      	; 0x1440 <DIO_u8GetPinValue+0x24>
    143e:	80 c0       	rjmp	.+256    	; 0x1540 <DIO_u8GetPinValue+0x124>
			|| (Copy_u8PORT >= NUM_OF_PORTS)) {
		/* Do Nothing */
	} else {
		/* Read the pin value as required */
		switch (Copy_u8PORT) {
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	3d 83       	std	Y+5, r19	; 0x05
    1448:	2c 83       	std	Y+4, r18	; 0x04
    144a:	4c 81       	ldd	r20, Y+4	; 0x04
    144c:	5d 81       	ldd	r21, Y+5	; 0x05
    144e:	41 30       	cpi	r20, 0x01	; 1
    1450:	51 05       	cpc	r21, r1
    1452:	79 f1       	breq	.+94     	; 0x14b2 <DIO_u8GetPinValue+0x96>
    1454:	8c 81       	ldd	r24, Y+4	; 0x04
    1456:	9d 81       	ldd	r25, Y+5	; 0x05
    1458:	82 30       	cpi	r24, 0x02	; 2
    145a:	91 05       	cpc	r25, r1
    145c:	34 f4       	brge	.+12     	; 0x146a <DIO_u8GetPinValue+0x4e>
    145e:	2c 81       	ldd	r18, Y+4	; 0x04
    1460:	3d 81       	ldd	r19, Y+5	; 0x05
    1462:	21 15       	cp	r18, r1
    1464:	31 05       	cpc	r19, r1
    1466:	69 f0       	breq	.+26     	; 0x1482 <DIO_u8GetPinValue+0x66>
    1468:	6b c0       	rjmp	.+214    	; 0x1540 <DIO_u8GetPinValue+0x124>
    146a:	4c 81       	ldd	r20, Y+4	; 0x04
    146c:	5d 81       	ldd	r21, Y+5	; 0x05
    146e:	42 30       	cpi	r20, 0x02	; 2
    1470:	51 05       	cpc	r21, r1
    1472:	b9 f1       	breq	.+110    	; 0x14e2 <DIO_u8GetPinValue+0xc6>
    1474:	8c 81       	ldd	r24, Y+4	; 0x04
    1476:	9d 81       	ldd	r25, Y+5	; 0x05
    1478:	83 30       	cpi	r24, 0x03	; 3
    147a:	91 05       	cpc	r25, r1
    147c:	09 f4       	brne	.+2      	; 0x1480 <DIO_u8GetPinValue+0x64>
    147e:	49 c0       	rjmp	.+146    	; 0x1512 <DIO_u8GetPinValue+0xf6>
    1480:	5f c0       	rjmp	.+190    	; 0x1540 <DIO_u8GetPinValue+0x124>
		case PORTA_ID:
			if (BIT_IS_SET(PORTA_BASE.Pin, Copy_u8PinNumber)) {
    1482:	e9 e3       	ldi	r30, 0x39	; 57
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	88 2f       	mov	r24, r24
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	a9 01       	movw	r20, r18
    1494:	02 c0       	rjmp	.+4      	; 0x149a <DIO_u8GetPinValue+0x7e>
    1496:	55 95       	asr	r21
    1498:	47 95       	ror	r20
    149a:	8a 95       	dec	r24
    149c:	e2 f7       	brpl	.-8      	; 0x1496 <DIO_u8GetPinValue+0x7a>
    149e:	ca 01       	movw	r24, r20
    14a0:	81 70       	andi	r24, 0x01	; 1
    14a2:	90 70       	andi	r25, 0x00	; 0
    14a4:	88 23       	and	r24, r24
    14a6:	19 f0       	breq	.+6      	; 0x14ae <DIO_u8GetPinValue+0x92>
				pin_value = LOGIC_HIGH;
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	89 83       	std	Y+1, r24	; 0x01
    14ac:	49 c0       	rjmp	.+146    	; 0x1540 <DIO_u8GetPinValue+0x124>
			} else {
				pin_value = LOGIC_LOW;
    14ae:	19 82       	std	Y+1, r1	; 0x01
    14b0:	47 c0       	rjmp	.+142    	; 0x1540 <DIO_u8GetPinValue+0x124>
			}
			break;
		case PORTB_ID:
			if (BIT_IS_SET(PORTB_BASE.Pin, Copy_u8PinNumber)) {
    14b2:	e6 e3       	ldi	r30, 0x36	; 54
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	88 2f       	mov	r24, r24
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	a9 01       	movw	r20, r18
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <DIO_u8GetPinValue+0xae>
    14c6:	55 95       	asr	r21
    14c8:	47 95       	ror	r20
    14ca:	8a 95       	dec	r24
    14cc:	e2 f7       	brpl	.-8      	; 0x14c6 <DIO_u8GetPinValue+0xaa>
    14ce:	ca 01       	movw	r24, r20
    14d0:	81 70       	andi	r24, 0x01	; 1
    14d2:	90 70       	andi	r25, 0x00	; 0
    14d4:	88 23       	and	r24, r24
    14d6:	19 f0       	breq	.+6      	; 0x14de <DIO_u8GetPinValue+0xc2>
				pin_value = LOGIC_HIGH;
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	89 83       	std	Y+1, r24	; 0x01
    14dc:	31 c0       	rjmp	.+98     	; 0x1540 <DIO_u8GetPinValue+0x124>
			} else {
				pin_value = LOGIC_LOW;
    14de:	19 82       	std	Y+1, r1	; 0x01
    14e0:	2f c0       	rjmp	.+94     	; 0x1540 <DIO_u8GetPinValue+0x124>
			}
			break;
		case PORTC_ID:
			if (BIT_IS_SET(PORTC_BASE.Pin, Copy_u8PinNumber)) {
    14e2:	e3 e3       	ldi	r30, 0x33	; 51
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	88 2f       	mov	r24, r24
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	a9 01       	movw	r20, r18
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <DIO_u8GetPinValue+0xde>
    14f6:	55 95       	asr	r21
    14f8:	47 95       	ror	r20
    14fa:	8a 95       	dec	r24
    14fc:	e2 f7       	brpl	.-8      	; 0x14f6 <DIO_u8GetPinValue+0xda>
    14fe:	ca 01       	movw	r24, r20
    1500:	81 70       	andi	r24, 0x01	; 1
    1502:	90 70       	andi	r25, 0x00	; 0
    1504:	88 23       	and	r24, r24
    1506:	19 f0       	breq	.+6      	; 0x150e <DIO_u8GetPinValue+0xf2>
				pin_value = LOGIC_HIGH;
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	89 83       	std	Y+1, r24	; 0x01
    150c:	19 c0       	rjmp	.+50     	; 0x1540 <DIO_u8GetPinValue+0x124>
			} else {
				pin_value = LOGIC_LOW;
    150e:	19 82       	std	Y+1, r1	; 0x01
    1510:	17 c0       	rjmp	.+46     	; 0x1540 <DIO_u8GetPinValue+0x124>
			}
			break;
		case PORTD_ID:
			if (BIT_IS_SET(PORTD_BASE.Pin, Copy_u8PinNumber)) {
    1512:	e0 e3       	ldi	r30, 0x30	; 48
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	88 2f       	mov	r24, r24
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	a9 01       	movw	r20, r18
    1524:	02 c0       	rjmp	.+4      	; 0x152a <DIO_u8GetPinValue+0x10e>
    1526:	55 95       	asr	r21
    1528:	47 95       	ror	r20
    152a:	8a 95       	dec	r24
    152c:	e2 f7       	brpl	.-8      	; 0x1526 <DIO_u8GetPinValue+0x10a>
    152e:	ca 01       	movw	r24, r20
    1530:	81 70       	andi	r24, 0x01	; 1
    1532:	90 70       	andi	r25, 0x00	; 0
    1534:	88 23       	and	r24, r24
    1536:	19 f0       	breq	.+6      	; 0x153e <DIO_u8GetPinValue+0x122>
				pin_value = LOGIC_HIGH;
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	89 83       	std	Y+1, r24	; 0x01
    153c:	01 c0       	rjmp	.+2      	; 0x1540 <DIO_u8GetPinValue+0x124>
			} else {
				pin_value = LOGIC_LOW;
    153e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1540:	89 81       	ldd	r24, Y+1	; 0x01

}
    1542:	0f 90       	pop	r0
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	cf 91       	pop	r28
    154e:	df 91       	pop	r29
    1550:	08 95       	ret

00001552 <DIO_vTogglrPort>:
void DIO_vTogglrPort(uint8 Copy_u8PORT) {
    1552:	df 93       	push	r29
    1554:	cf 93       	push	r28
    1556:	00 d0       	rcall	.+0      	; 0x1558 <DIO_vTogglrPort+0x6>
    1558:	0f 92       	push	r0
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
    155e:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PORT >= NUM_OF_PORTS) {
    1560:	89 81       	ldd	r24, Y+1	; 0x01
    1562:	84 30       	cpi	r24, 0x04	; 4
    1564:	08 f0       	brcs	.+2      	; 0x1568 <DIO_vTogglrPort+0x16>
    1566:	52 c0       	rjmp	.+164    	; 0x160c <DIO_vTogglrPort+0xba>
		/* Do Nothing */
	} else {
		/* Write the port value as required */
		switch (Copy_u8PORT) {
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	3b 83       	std	Y+3, r19	; 0x03
    1570:	2a 83       	std	Y+2, r18	; 0x02
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	9b 81       	ldd	r25, Y+3	; 0x03
    1576:	81 30       	cpi	r24, 0x01	; 1
    1578:	91 05       	cpc	r25, r1
    157a:	11 f1       	breq	.+68     	; 0x15c0 <DIO_vTogglrPort+0x6e>
    157c:	2a 81       	ldd	r18, Y+2	; 0x02
    157e:	3b 81       	ldd	r19, Y+3	; 0x03
    1580:	22 30       	cpi	r18, 0x02	; 2
    1582:	31 05       	cpc	r19, r1
    1584:	2c f4       	brge	.+10     	; 0x1590 <DIO_vTogglrPort+0x3e>
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	9b 81       	ldd	r25, Y+3	; 0x03
    158a:	00 97       	sbiw	r24, 0x00	; 0
    158c:	61 f0       	breq	.+24     	; 0x15a6 <DIO_vTogglrPort+0x54>
    158e:	3e c0       	rjmp	.+124    	; 0x160c <DIO_vTogglrPort+0xba>
    1590:	2a 81       	ldd	r18, Y+2	; 0x02
    1592:	3b 81       	ldd	r19, Y+3	; 0x03
    1594:	22 30       	cpi	r18, 0x02	; 2
    1596:	31 05       	cpc	r19, r1
    1598:	01 f1       	breq	.+64     	; 0x15da <DIO_vTogglrPort+0x88>
    159a:	8a 81       	ldd	r24, Y+2	; 0x02
    159c:	9b 81       	ldd	r25, Y+3	; 0x03
    159e:	83 30       	cpi	r24, 0x03	; 3
    15a0:	91 05       	cpc	r25, r1
    15a2:	41 f1       	breq	.+80     	; 0x15f4 <DIO_vTogglrPort+0xa2>
    15a4:	33 c0       	rjmp	.+102    	; 0x160c <DIO_vTogglrPort+0xba>
		case PORTA_ID:
			PORTA_BASE.Port ^= PORTA_BASE.Port;
    15a6:	a9 e3       	ldi	r26, 0x39	; 57
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	e9 e3       	ldi	r30, 0x39	; 57
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	92 81       	ldd	r25, Z+2	; 0x02
    15b0:	e9 e3       	ldi	r30, 0x39	; 57
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	82 81       	ldd	r24, Z+2	; 0x02
    15b6:	89 27       	eor	r24, r25
    15b8:	12 96       	adiw	r26, 0x02	; 2
    15ba:	8c 93       	st	X, r24
    15bc:	12 97       	sbiw	r26, 0x02	; 2
    15be:	26 c0       	rjmp	.+76     	; 0x160c <DIO_vTogglrPort+0xba>
			break;
		case PORTB_ID:
			PORTB_BASE.Port ^= PORTA_BASE.Port;
    15c0:	a6 e3       	ldi	r26, 0x36	; 54
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	e6 e3       	ldi	r30, 0x36	; 54
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	92 81       	ldd	r25, Z+2	; 0x02
    15ca:	e9 e3       	ldi	r30, 0x39	; 57
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	82 81       	ldd	r24, Z+2	; 0x02
    15d0:	89 27       	eor	r24, r25
    15d2:	12 96       	adiw	r26, 0x02	; 2
    15d4:	8c 93       	st	X, r24
    15d6:	12 97       	sbiw	r26, 0x02	; 2
    15d8:	19 c0       	rjmp	.+50     	; 0x160c <DIO_vTogglrPort+0xba>
			break;
		case PORTC_ID:
			PORTC_BASE.Port ^= PORTA_BASE.Port;
    15da:	a3 e3       	ldi	r26, 0x33	; 51
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e3 e3       	ldi	r30, 0x33	; 51
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	92 81       	ldd	r25, Z+2	; 0x02
    15e4:	e9 e3       	ldi	r30, 0x39	; 57
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	82 81       	ldd	r24, Z+2	; 0x02
    15ea:	89 27       	eor	r24, r25
    15ec:	12 96       	adiw	r26, 0x02	; 2
    15ee:	8c 93       	st	X, r24
    15f0:	12 97       	sbiw	r26, 0x02	; 2
    15f2:	0c c0       	rjmp	.+24     	; 0x160c <DIO_vTogglrPort+0xba>
			break;
		case PORTD_ID:
			PORTD_BASE.Port ^= PORTA_BASE.Port;
    15f4:	a0 e3       	ldi	r26, 0x30	; 48
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	e0 e3       	ldi	r30, 0x30	; 48
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	92 81       	ldd	r25, Z+2	; 0x02
    15fe:	e9 e3       	ldi	r30, 0x39	; 57
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	82 81       	ldd	r24, Z+2	; 0x02
    1604:	89 27       	eor	r24, r25
    1606:	12 96       	adiw	r26, 0x02	; 2
    1608:	8c 93       	st	X, r24
    160a:	12 97       	sbiw	r26, 0x02	; 2
			break;
		}
	}
}
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	0f 90       	pop	r0
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	08 95       	ret

00001618 <DIO_GETPortValue>:
uint8 DIO_GETPortValue(uint8 Copy_u8PORT) {
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	00 d0       	rcall	.+0      	; 0x161e <DIO_GETPortValue+0x6>
    161e:	00 d0       	rcall	.+0      	; 0x1620 <DIO_GETPortValue+0x8>
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1626:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (Copy_u8PORT >= NUM_OF_PORTS) {
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
    162a:	84 30       	cpi	r24, 0x04	; 4
    162c:	90 f5       	brcc	.+100    	; 0x1692 <DIO_GETPortValue+0x7a>
		/* Do Nothing */
	} else {
		/* Read the port value as required */
		switch (Copy_u8PORT) {
    162e:	8a 81       	ldd	r24, Y+2	; 0x02
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	3c 83       	std	Y+4, r19	; 0x04
    1636:	2b 83       	std	Y+3, r18	; 0x03
    1638:	8b 81       	ldd	r24, Y+3	; 0x03
    163a:	9c 81       	ldd	r25, Y+4	; 0x04
    163c:	81 30       	cpi	r24, 0x01	; 1
    163e:	91 05       	cpc	r25, r1
    1640:	d1 f0       	breq	.+52     	; 0x1676 <DIO_GETPortValue+0x5e>
    1642:	2b 81       	ldd	r18, Y+3	; 0x03
    1644:	3c 81       	ldd	r19, Y+4	; 0x04
    1646:	22 30       	cpi	r18, 0x02	; 2
    1648:	31 05       	cpc	r19, r1
    164a:	2c f4       	brge	.+10     	; 0x1656 <DIO_GETPortValue+0x3e>
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	9c 81       	ldd	r25, Y+4	; 0x04
    1650:	00 97       	sbiw	r24, 0x00	; 0
    1652:	61 f0       	breq	.+24     	; 0x166c <DIO_GETPortValue+0x54>
    1654:	1e c0       	rjmp	.+60     	; 0x1692 <DIO_GETPortValue+0x7a>
    1656:	2b 81       	ldd	r18, Y+3	; 0x03
    1658:	3c 81       	ldd	r19, Y+4	; 0x04
    165a:	22 30       	cpi	r18, 0x02	; 2
    165c:	31 05       	cpc	r19, r1
    165e:	81 f0       	breq	.+32     	; 0x1680 <DIO_GETPortValue+0x68>
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	9c 81       	ldd	r25, Y+4	; 0x04
    1664:	83 30       	cpi	r24, 0x03	; 3
    1666:	91 05       	cpc	r25, r1
    1668:	81 f0       	breq	.+32     	; 0x168a <DIO_GETPortValue+0x72>
    166a:	13 c0       	rjmp	.+38     	; 0x1692 <DIO_GETPortValue+0x7a>
		case PORTA_ID:
			value = PORTA_BASE.Pin;
    166c:	e9 e3       	ldi	r30, 0x39	; 57
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	89 83       	std	Y+1, r24	; 0x01
    1674:	0e c0       	rjmp	.+28     	; 0x1692 <DIO_GETPortValue+0x7a>
			break;
		case PORTB_ID:
			value = PORTB_BASE.Pin;
    1676:	e6 e3       	ldi	r30, 0x36	; 54
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	89 83       	std	Y+1, r24	; 0x01
    167e:	09 c0       	rjmp	.+18     	; 0x1692 <DIO_GETPortValue+0x7a>
			break;
		case PORTC_ID:
			value = PORTC_BASE.Pin;
    1680:	e3 e3       	ldi	r30, 0x33	; 51
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	89 83       	std	Y+1, r24	; 0x01
    1688:	04 c0       	rjmp	.+8      	; 0x1692 <DIO_GETPortValue+0x7a>
			break;
		case PORTD_ID:
			value = PORTD_BASE.Pin;
    168a:	e0 e3       	ldi	r30, 0x30	; 48
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1692:	89 81       	ldd	r24, Y+1	; 0x01
}
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	cf 91       	pop	r28
    169e:	df 91       	pop	r29
    16a0:	08 95       	ret

000016a2 <PWM_Init>:
#include"../lib/common_macros.h"


#define    F_CPU           8000000ul

void PWM_Init() {
    16a2:	df 93       	push	r29
    16a4:	cf 93       	push	r28
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
if(CONFIG.channel==channelA)
    16aa:	80 91 95 01 	lds	r24, 0x0195
    16ae:	88 23       	and	r24, r24
    16b0:	09 f0       	breq	.+2      	; 0x16b4 <PWM_Init+0x12>
    16b2:	67 c0       	rjmp	.+206    	; 0x1782 <PWM_Init+0xe0>
{

if(CONFIG.PWM_mode==NON_INVERTING)
    16b4:	80 91 98 01 	lds	r24, 0x0198
    16b8:	82 30       	cpi	r24, 0x02	; 2
    16ba:	79 f4       	brne	.+30     	; 0x16da <PWM_Init+0x38>
	{
		TCCR1A_REG &= ~(1 << COM_1A0);
    16bc:	af e4       	ldi	r26, 0x4F	; 79
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	ef e4       	ldi	r30, 0x4F	; 79
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	8f 7b       	andi	r24, 0xBF	; 191
    16c8:	8c 93       	st	X, r24
		TCCR1A_REG |= (1 << COM_1A1);
    16ca:	af e4       	ldi	r26, 0x4F	; 79
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	ef e4       	ldi	r30, 0x4F	; 79
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	80 68       	ori	r24, 0x80	; 128
    16d6:	8c 93       	st	X, r24
    16d8:	12 c0       	rjmp	.+36     	; 0x16fe <PWM_Init+0x5c>

	}
else if(CONFIG.PWM_mode==INVERTING)
    16da:	80 91 98 01 	lds	r24, 0x0198
    16de:	83 30       	cpi	r24, 0x03	; 3
    16e0:	71 f4       	brne	.+28     	; 0x16fe <PWM_Init+0x5c>
{

                	   TCCR1A_REG |=(1<<COM_1A0);
    16e2:	af e4       	ldi	r26, 0x4F	; 79
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	ef e4       	ldi	r30, 0x4F	; 79
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	80 64       	ori	r24, 0x40	; 64
    16ee:	8c 93       	st	X, r24
                	   TCCR1A_REG |=(1<<COM_1A1);
    16f0:	af e4       	ldi	r26, 0x4F	; 79
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	ef e4       	ldi	r30, 0x4F	; 79
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	80 68       	ori	r24, 0x80	; 128
    16fc:	8c 93       	st	X, r24


}
//#endif

if(CONFIG.mode==TIMER_FAST_PWM_MODE)
    16fe:	80 91 97 01 	lds	r24, 0x0197
    1702:	83 30       	cpi	r24, 0x03	; 3
    1704:	e9 f4       	brne	.+58     	; 0x1740 <PWM_Init+0x9e>
	{
		CLEAR_BIT(TCCR1A_REG, WGM_10);
    1706:	af e4       	ldi	r26, 0x4F	; 79
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	ef e4       	ldi	r30, 0x4F	; 79
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	8e 7f       	andi	r24, 0xFE	; 254
    1712:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG, WGM_11);
    1714:	af e4       	ldi	r26, 0x4F	; 79
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	ef e4       	ldi	r30, 0x4F	; 79
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	82 60       	ori	r24, 0x02	; 2
    1720:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG, WGM_12);
    1722:	ae e4       	ldi	r26, 0x4E	; 78
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	ee e4       	ldi	r30, 0x4E	; 78
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	88 60       	ori	r24, 0x08	; 8
    172e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG, WGM_13);
    1730:	ae e4       	ldi	r26, 0x4E	; 78
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	ee e4       	ldi	r30, 0x4E	; 78
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	80 61       	ori	r24, 0x10	; 16
    173c:	8c 93       	st	X, r24
    173e:	33 c0       	rjmp	.+102    	; 0x17a6 <PWM_Init+0x104>

	}

else if(CONFIG.mode==TIMER_Phase_MODE)
    1740:	80 91 97 01 	lds	r24, 0x0197
    1744:	81 30       	cpi	r24, 0x01	; 1
    1746:	79 f5       	brne	.+94     	; 0x17a6 <PWM_Init+0x104>
{

						CLEAR_BIT(TCCR1A_REG,WGM_10);
    1748:	af e4       	ldi	r26, 0x4F	; 79
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	ef e4       	ldi	r30, 0x4F	; 79
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	8e 7f       	andi	r24, 0xFE	; 254
    1754:	8c 93       	st	X, r24
						SET_BIT(TCCR1A_REG,WGM_11);
    1756:	af e4       	ldi	r26, 0x4F	; 79
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	ef e4       	ldi	r30, 0x4F	; 79
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	82 60       	ori	r24, 0x02	; 2
    1762:	8c 93       	st	X, r24
						CLEAR_BIT(TCCR1B_REG,WGM_12);
    1764:	ae e4       	ldi	r26, 0x4E	; 78
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	ee e4       	ldi	r30, 0x4E	; 78
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	87 7f       	andi	r24, 0xF7	; 247
    1770:	8c 93       	st	X, r24
						SET_BIT(TCCR1B_REG,WGM_13);
    1772:	ae e4       	ldi	r26, 0x4E	; 78
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	ee e4       	ldi	r30, 0x4E	; 78
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	80 61       	ori	r24, 0x10	; 16
    177e:	8c 93       	st	X, r24
    1780:	12 c0       	rjmp	.+36     	; 0x17a6 <PWM_Init+0x104>
}
//#endif
}
else if(CONFIG.channel==channelB)
    1782:	80 91 95 01 	lds	r24, 0x0195
    1786:	81 30       	cpi	r24, 0x01	; 1
    1788:	71 f4       	brne	.+28     	; 0x17a6 <PWM_Init+0x104>

#if(PWM_mode ==NON_INVERTING)
{
                	   TCCR1A_REG &=~(1<<COM_1B0);
    178a:	af e4       	ldi	r26, 0x4F	; 79
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	ef e4       	ldi	r30, 0x4F	; 79
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	8f 7e       	andi	r24, 0xEF	; 239
    1796:	8c 93       	st	X, r24
                	   TCCR1A_REG |=(1<<COM_1B1);
    1798:	af e4       	ldi	r26, 0x4F	; 79
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	ef e4       	ldi	r30, 0x4F	; 79
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	80 62       	ori	r24, 0x20	; 32
    17a4:	8c 93       	st	X, r24
}
#endif

#if(mode==TIMER_FAST_PWM_MODE)
{
	CLEAR_BIT(TCCR1A_REG,WGM_10);
    17a6:	af e4       	ldi	r26, 0x4F	; 79
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	ef e4       	ldi	r30, 0x4F	; 79
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	8e 7f       	andi	r24, 0xFE	; 254
    17b2:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_REG,WGM_11);
    17b4:	af e4       	ldi	r26, 0x4F	; 79
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	ef e4       	ldi	r30, 0x4F	; 79
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	82 60       	ori	r24, 0x02	; 2
    17c0:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,WGM_12);
    17c2:	ae e4       	ldi	r26, 0x4E	; 78
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	ee e4       	ldi	r30, 0x4E	; 78
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	88 60       	ori	r24, 0x08	; 8
    17ce:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,WGM_13);
    17d0:	ae e4       	ldi	r26, 0x4E	; 78
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	ee e4       	ldi	r30, 0x4E	; 78
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	80 61       	ori	r24, 0x10	; 16
    17dc:	8c 93       	st	X, r24



//#endif

}
    17de:	cf 91       	pop	r28
    17e0:	df 91       	pop	r29
    17e2:	08 95       	ret

000017e4 <PWM_Generate_CHANNELA>:
void PWM_Generate_CHANNELA(uint8 Copy_u8DutyCycle, uint32 Copy_u32freq) {
    17e4:	df 93       	push	r29
    17e6:	cf 93       	push	r28
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
    17ec:	29 97       	sbiw	r28, 0x09	; 9
    17ee:	0f b6       	in	r0, 0x3f	; 63
    17f0:	f8 94       	cli
    17f2:	de bf       	out	0x3e, r29	; 62
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	cd bf       	out	0x3d, r28	; 61
    17f8:	8d 83       	std	Y+5, r24	; 0x05
    17fa:	4e 83       	std	Y+6, r20	; 0x06
    17fc:	5f 83       	std	Y+7, r21	; 0x07
    17fe:	68 87       	std	Y+8, r22	; 0x08
    1800:	79 87       	std	Y+9, r23	; 0x09

	if (CONFIG.mode == TIMER_FAST_PWM_MODE)
    1802:	80 91 97 01 	lds	r24, 0x0197
    1806:	83 30       	cpi	r24, 0x03	; 3
    1808:	09 f0       	breq	.+2      	; 0x180c <PWM_Generate_CHANNELA+0x28>
    180a:	5e c0       	rjmp	.+188    	; 0x18c8 <PWM_Generate_CHANNELA+0xe4>

	{
		uint16 TOP;
		TCNT1L_REG =CONFIG.initial_value;
    180c:	ec e4       	ldi	r30, 0x4C	; 76
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 91 99 01 	lds	r24, 0x0199
    1814:	88 2f       	mov	r24, r24
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	91 83       	std	Z+1, r25	; 0x01
    181a:	80 83       	st	Z, r24
		//TOP=250;
		TOP = (F_CPU / (CONFIG.prescaler * Copy_u32freq)) - 1; //from equation pwm in fast mode
    181c:	80 91 96 01 	lds	r24, 0x0196
    1820:	88 2f       	mov	r24, r24
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	a0 e0       	ldi	r26, 0x00	; 0
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	2e 81       	ldd	r18, Y+6	; 0x06
    182a:	3f 81       	ldd	r19, Y+7	; 0x07
    182c:	48 85       	ldd	r20, Y+8	; 0x08
    182e:	59 85       	ldd	r21, Y+9	; 0x09
    1830:	bc 01       	movw	r22, r24
    1832:	cd 01       	movw	r24, r26
    1834:	0e 94 29 19 	call	0x3252	; 0x3252 <__mulsi3>
    1838:	9b 01       	movw	r18, r22
    183a:	ac 01       	movw	r20, r24
    183c:	80 e0       	ldi	r24, 0x00	; 0
    183e:	92 e1       	ldi	r25, 0x12	; 18
    1840:	aa e7       	ldi	r26, 0x7A	; 122
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	bc 01       	movw	r22, r24
    1846:	cd 01       	movw	r24, r26
    1848:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__udivmodsi4>
    184c:	da 01       	movw	r26, r20
    184e:	c9 01       	movw	r24, r18
    1850:	01 97       	sbiw	r24, 0x01	; 1
    1852:	9c 83       	std	Y+4, r25	; 0x04
    1854:	8b 83       	std	Y+3, r24	; 0x03
		ICR1L_REG = TOP + 1;
    1856:	e6 e4       	ldi	r30, 0x46	; 70
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	9c 81       	ldd	r25, Y+4	; 0x04
    185e:	01 96       	adiw	r24, 0x01	; 1
    1860:	91 83       	std	Z+1, r25	; 0x01
    1862:	80 83       	st	Z, r24

		if (CONFIG.PWM_mode == NON_INVERTING)
    1864:	80 91 98 01 	lds	r24, 0x0198
    1868:	82 30       	cpi	r24, 0x02	; 2
    186a:	39 f4       	brne	.+14     	; 0x187a <PWM_Generate_CHANNELA+0x96>

		{
			OCR1AL_REG =200;
    186c:	ea e4       	ldi	r30, 0x4A	; 74
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	88 ec       	ldi	r24, 0xC8	; 200
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	91 83       	std	Z+1, r25	; 0x01
    1876:	80 83       	st	Z, r24
    1878:	a9 c0       	rjmp	.+338    	; 0x19cc <PWM_Generate_CHANNELA+0x1e8>
					//((Copy_u8DutyCycle / 100) * (TOP + 1) - 1); //non inverting mince 1 due to tick from top to zero
			//TCCR1B_REG = (TCCR1B_REG & 0xF8) | (CONFIG.prescaler);/*prescaler bits select (CS01,CS00,CS02)*/

		}
		else if (CONFIG.PWM_mode == INVERTING) {
    187a:	80 91 98 01 	lds	r24, 0x0198
    187e:	83 30       	cpi	r24, 0x03	; 3
    1880:	09 f0       	breq	.+2      	; 0x1884 <PWM_Generate_CHANNELA+0xa0>
    1882:	a4 c0       	rjmp	.+328    	; 0x19cc <PWM_Generate_CHANNELA+0x1e8>
			OCR1AL_REG = ((Copy_u8DutyCycle / 100) * (TOP + 1));
    1884:	ea e4       	ldi	r30, 0x4A	; 74
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	8d 81       	ldd	r24, Y+5	; 0x05
    188a:	94 e6       	ldi	r25, 0x64	; 100
    188c:	69 2f       	mov	r22, r25
    188e:	0e 94 48 19 	call	0x3290	; 0x3290 <__udivmodqi4>
    1892:	28 2f       	mov	r18, r24
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	9c 81       	ldd	r25, Y+4	; 0x04
    189a:	01 96       	adiw	r24, 0x01	; 1
    189c:	ac 01       	movw	r20, r24
    189e:	24 9f       	mul	r18, r20
    18a0:	c0 01       	movw	r24, r0
    18a2:	25 9f       	mul	r18, r21
    18a4:	90 0d       	add	r25, r0
    18a6:	34 9f       	mul	r19, r20
    18a8:	90 0d       	add	r25, r0
    18aa:	11 24       	eor	r1, r1
    18ac:	91 83       	std	Z+1, r25	; 0x01
    18ae:	80 83       	st	Z, r24
			TCCR1B_REG = (TCCR1B_REG & 0xF8) | (CONFIG.prescaler);/*prescaler bits select (CS01,CS00,CS02)*/
    18b0:	ae e4       	ldi	r26, 0x4E	; 78
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	ee e4       	ldi	r30, 0x4E	; 78
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	98 2f       	mov	r25, r24
    18bc:	98 7f       	andi	r25, 0xF8	; 248
    18be:	80 91 96 01 	lds	r24, 0x0196
    18c2:	89 2b       	or	r24, r25
    18c4:	8c 93       	st	X, r24
    18c6:	82 c0       	rjmp	.+260    	; 0x19cc <PWM_Generate_CHANNELA+0x1e8>



	}

	else if (CONFIG.mode == TIMER_Phase_MODE)
    18c8:	80 91 97 01 	lds	r24, 0x0197
    18cc:	81 30       	cpi	r24, 0x01	; 1
    18ce:	09 f0       	breq	.+2      	; 0x18d2 <PWM_Generate_CHANNELA+0xee>
    18d0:	7d c0       	rjmp	.+250    	; 0x19cc <PWM_Generate_CHANNELA+0x1e8>

	{
		uint16 TOP;
		TCNT1L_REG = CONFIG.initial_value;
    18d2:	ec e4       	ldi	r30, 0x4C	; 76
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 91 99 01 	lds	r24, 0x0199
    18da:	88 2f       	mov	r24, r24
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	91 83       	std	Z+1, r25	; 0x01
    18e0:	80 83       	st	Z, r24
		TOP = (F_CPU / (2 * CONFIG.prescaler * Copy_u32freq)); //from equation pwm in phase mode
    18e2:	80 91 96 01 	lds	r24, 0x0196
    18e6:	88 2f       	mov	r24, r24
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	88 0f       	add	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	aa 27       	eor	r26, r26
    18f0:	97 fd       	sbrc	r25, 7
    18f2:	a0 95       	com	r26
    18f4:	ba 2f       	mov	r27, r26
    18f6:	2e 81       	ldd	r18, Y+6	; 0x06
    18f8:	3f 81       	ldd	r19, Y+7	; 0x07
    18fa:	48 85       	ldd	r20, Y+8	; 0x08
    18fc:	59 85       	ldd	r21, Y+9	; 0x09
    18fe:	bc 01       	movw	r22, r24
    1900:	cd 01       	movw	r24, r26
    1902:	0e 94 29 19 	call	0x3252	; 0x3252 <__mulsi3>
    1906:	9b 01       	movw	r18, r22
    1908:	ac 01       	movw	r20, r24
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	92 e1       	ldi	r25, 0x12	; 18
    190e:	aa e7       	ldi	r26, 0x7A	; 122
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	bc 01       	movw	r22, r24
    1914:	cd 01       	movw	r24, r26
    1916:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__udivmodsi4>
    191a:	da 01       	movw	r26, r20
    191c:	c9 01       	movw	r24, r18
    191e:	9a 83       	std	Y+2, r25	; 0x02
    1920:	89 83       	std	Y+1, r24	; 0x01
		ICR1L_REG = TOP;
    1922:	e6 e4       	ldi	r30, 0x46	; 70
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	89 81       	ldd	r24, Y+1	; 0x01
    1928:	9a 81       	ldd	r25, Y+2	; 0x02
    192a:	91 83       	std	Z+1, r25	; 0x01
    192c:	80 83       	st	Z, r24

		if (CONFIG.PWM_mode == NON_INVERTING) {
    192e:	80 91 98 01 	lds	r24, 0x0198
    1932:	82 30       	cpi	r24, 0x02	; 2
    1934:	09 f5       	brne	.+66     	; 0x1978 <PWM_Generate_CHANNELA+0x194>
			OCR1AL_REG = ((Copy_u8DutyCycle / 100) * (TOP)); //non inverting mince 1 due to tick from top to zero
    1936:	ea e4       	ldi	r30, 0x4A	; 74
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	8d 81       	ldd	r24, Y+5	; 0x05
    193c:	94 e6       	ldi	r25, 0x64	; 100
    193e:	69 2f       	mov	r22, r25
    1940:	0e 94 48 19 	call	0x3290	; 0x3290 <__udivmodqi4>
    1944:	28 2f       	mov	r18, r24
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	9a 81       	ldd	r25, Y+2	; 0x02
    194c:	ac 01       	movw	r20, r24
    194e:	24 9f       	mul	r18, r20
    1950:	c0 01       	movw	r24, r0
    1952:	25 9f       	mul	r18, r21
    1954:	90 0d       	add	r25, r0
    1956:	34 9f       	mul	r19, r20
    1958:	90 0d       	add	r25, r0
    195a:	11 24       	eor	r1, r1
    195c:	91 83       	std	Z+1, r25	; 0x01
    195e:	80 83       	st	Z, r24
			TCCR1B_REG = (TCCR1B_REG & 0xF8) | (CONFIG.prescaler);/*prescaler bits select (CS01,CS00,CS02)*/
    1960:	ae e4       	ldi	r26, 0x4E	; 78
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	ee e4       	ldi	r30, 0x4E	; 78
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	98 2f       	mov	r25, r24
    196c:	98 7f       	andi	r25, 0xF8	; 248
    196e:	80 91 96 01 	lds	r24, 0x0196
    1972:	89 2b       	or	r24, r25
    1974:	8c 93       	st	X, r24
    1976:	2a c0       	rjmp	.+84     	; 0x19cc <PWM_Generate_CHANNELA+0x1e8>

		} else if (CONFIG.PWM_mode == INVERTING) {
    1978:	80 91 98 01 	lds	r24, 0x0198
    197c:	83 30       	cpi	r24, 0x03	; 3
    197e:	31 f5       	brne	.+76     	; 0x19cc <PWM_Generate_CHANNELA+0x1e8>
			OCR1AL_REG = (TOP - (Copy_u8DutyCycle / 100) * (TOP));
    1980:	ea e4       	ldi	r30, 0x4A	; 74
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	8d 81       	ldd	r24, Y+5	; 0x05
    1986:	94 e6       	ldi	r25, 0x64	; 100
    1988:	69 2f       	mov	r22, r25
    198a:	0e 94 48 19 	call	0x3290	; 0x3290 <__udivmodqi4>
    198e:	28 2f       	mov	r18, r24
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	ac 01       	movw	r20, r24
    1998:	42 1b       	sub	r20, r18
    199a:	53 0b       	sbc	r21, r19
    199c:	9a 01       	movw	r18, r20
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	9a 81       	ldd	r25, Y+2	; 0x02
    19a2:	ac 01       	movw	r20, r24
    19a4:	24 9f       	mul	r18, r20
    19a6:	c0 01       	movw	r24, r0
    19a8:	25 9f       	mul	r18, r21
    19aa:	90 0d       	add	r25, r0
    19ac:	34 9f       	mul	r19, r20
    19ae:	90 0d       	add	r25, r0
    19b0:	11 24       	eor	r1, r1
    19b2:	91 83       	std	Z+1, r25	; 0x01
    19b4:	80 83       	st	Z, r24
			TCCR1B_REG = (TCCR1B_REG & 0xF8) | (CONFIG.prescaler);/*prescaler bits select (CS01,CS00,CS02)*/
    19b6:	ae e4       	ldi	r26, 0x4E	; 78
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	ee e4       	ldi	r30, 0x4E	; 78
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	98 2f       	mov	r25, r24
    19c2:	98 7f       	andi	r25, 0xF8	; 248
    19c4:	80 91 96 01 	lds	r24, 0x0196
    19c8:	89 2b       	or	r24, r25
    19ca:	8c 93       	st	X, r24
		}

		//TCCR1B_REG = (TCCR1B_REG & 0xF8) | (CONFIG.prescaler);/*prescaler bits select (CS01,CS00,CS02)*/

	}
	DIO_vSetPinDirection(PORTD_ID,PIN5_ID,PIN_OUTPUT);
    19cc:	83 e0       	ldi	r24, 0x03	; 3
    19ce:	65 e0       	ldi	r22, 0x05	; 5
    19d0:	41 e0       	ldi	r20, 0x01	; 1
    19d2:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_vSetPinDirection>

}
    19d6:	29 96       	adiw	r28, 0x09	; 9
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	f8 94       	cli
    19dc:	de bf       	out	0x3e, r29	; 62
    19de:	0f be       	out	0x3f, r0	; 63
    19e0:	cd bf       	out	0x3d, r28	; 61
    19e2:	cf 91       	pop	r28
    19e4:	df 91       	pop	r29
    19e6:	08 95       	ret

000019e8 <PWM_Generate_CHANNELB>:

void PWM_Generate_CHANNELB(uint8 Copy_u8DutyCycle, uint32 Copy_u32freq) {
    19e8:	df 93       	push	r29
    19ea:	cf 93       	push	r28
    19ec:	cd b7       	in	r28, 0x3d	; 61
    19ee:	de b7       	in	r29, 0x3e	; 62
    19f0:	29 97       	sbiw	r28, 0x09	; 9
    19f2:	0f b6       	in	r0, 0x3f	; 63
    19f4:	f8 94       	cli
    19f6:	de bf       	out	0x3e, r29	; 62
    19f8:	0f be       	out	0x3f, r0	; 63
    19fa:	cd bf       	out	0x3d, r28	; 61
    19fc:	8d 83       	std	Y+5, r24	; 0x05
    19fe:	4e 83       	std	Y+6, r20	; 0x06
    1a00:	5f 83       	std	Y+7, r21	; 0x07
    1a02:	68 87       	std	Y+8, r22	; 0x08
    1a04:	79 87       	std	Y+9, r23	; 0x09

	uint16 TOP;
	TCNT1L_REG = CONFIG.initial_value;
    1a06:	ec e4       	ldi	r30, 0x4C	; 76
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 91 99 01 	lds	r24, 0x0199
    1a0e:	88 2f       	mov	r24, r24
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	91 83       	std	Z+1, r25	; 0x01
    1a14:	80 83       	st	Z, r24
	if (CONFIG.mode == TIMER_FAST_PWM_MODE) {
    1a16:	80 91 97 01 	lds	r24, 0x0197
    1a1a:	83 30       	cpi	r24, 0x03	; 3
    1a1c:	09 f0       	breq	.+2      	; 0x1a20 <PWM_Generate_CHANNELB+0x38>
    1a1e:	72 c0       	rjmp	.+228    	; 0x1b04 <PWM_Generate_CHANNELB+0x11c>

		TOP = (F_CPU / (CONFIG.prescaler * Copy_u32freq)) - 1; //from equation pwm in fast mode
    1a20:	80 91 96 01 	lds	r24, 0x0196
    1a24:	88 2f       	mov	r24, r24
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	a0 e0       	ldi	r26, 0x00	; 0
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	2e 81       	ldd	r18, Y+6	; 0x06
    1a2e:	3f 81       	ldd	r19, Y+7	; 0x07
    1a30:	48 85       	ldd	r20, Y+8	; 0x08
    1a32:	59 85       	ldd	r21, Y+9	; 0x09
    1a34:	bc 01       	movw	r22, r24
    1a36:	cd 01       	movw	r24, r26
    1a38:	0e 94 29 19 	call	0x3252	; 0x3252 <__mulsi3>
    1a3c:	9b 01       	movw	r18, r22
    1a3e:	ac 01       	movw	r20, r24
    1a40:	80 e0       	ldi	r24, 0x00	; 0
    1a42:	92 e1       	ldi	r25, 0x12	; 18
    1a44:	aa e7       	ldi	r26, 0x7A	; 122
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	bc 01       	movw	r22, r24
    1a4a:	cd 01       	movw	r24, r26
    1a4c:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__udivmodsi4>
    1a50:	da 01       	movw	r26, r20
    1a52:	c9 01       	movw	r24, r18
    1a54:	01 97       	sbiw	r24, 0x01	; 1
    1a56:	9c 83       	std	Y+4, r25	; 0x04
    1a58:	8b 83       	std	Y+3, r24	; 0x03
		ICR1L_REG = TOP + 1;
    1a5a:	e6 e4       	ldi	r30, 0x46	; 70
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a60:	9c 81       	ldd	r25, Y+4	; 0x04
    1a62:	01 96       	adiw	r24, 0x01	; 1
    1a64:	91 83       	std	Z+1, r25	; 0x01
    1a66:	80 83       	st	Z, r24
		if (CONFIG.PWM_mode == NON_INVERTING) {
    1a68:	80 91 98 01 	lds	r24, 0x0198
    1a6c:	82 30       	cpi	r24, 0x02	; 2
    1a6e:	19 f5       	brne	.+70     	; 0x1ab6 <PWM_Generate_CHANNELB+0xce>
			OCR1BL_REG = ((Copy_u8DutyCycle / 100) * (TOP + 1) - 1); //non inverting mince 1 due to tick from top to zero
    1a70:	e8 e4       	ldi	r30, 0x48	; 72
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	8d 81       	ldd	r24, Y+5	; 0x05
    1a76:	94 e6       	ldi	r25, 0x64	; 100
    1a78:	69 2f       	mov	r22, r25
    1a7a:	0e 94 48 19 	call	0x3290	; 0x3290 <__udivmodqi4>
    1a7e:	28 2f       	mov	r18, r24
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	9c 81       	ldd	r25, Y+4	; 0x04
    1a86:	01 96       	adiw	r24, 0x01	; 1
    1a88:	ac 01       	movw	r20, r24
    1a8a:	24 9f       	mul	r18, r20
    1a8c:	c0 01       	movw	r24, r0
    1a8e:	25 9f       	mul	r18, r21
    1a90:	90 0d       	add	r25, r0
    1a92:	34 9f       	mul	r19, r20
    1a94:	90 0d       	add	r25, r0
    1a96:	11 24       	eor	r1, r1
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	91 83       	std	Z+1, r25	; 0x01
    1a9c:	80 83       	st	Z, r24
			TCCR1B_REG = (TCCR1B_REG & 0xF8) | (CONFIG.prescaler);/*prescaler bits select (CS01,CS00,CS02)*/
    1a9e:	ae e4       	ldi	r26, 0x4E	; 78
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	ee e4       	ldi	r30, 0x4E	; 78
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	98 2f       	mov	r25, r24
    1aaa:	98 7f       	andi	r25, 0xF8	; 248
    1aac:	80 91 96 01 	lds	r24, 0x0196
    1ab0:	89 2b       	or	r24, r25
    1ab2:	8c 93       	st	X, r24
    1ab4:	a9 c0       	rjmp	.+338    	; 0x1c08 <PWM_Generate_CHANNELB+0x220>
		} else if (CONFIG.PWM_mode == INVERTING) {
    1ab6:	80 91 98 01 	lds	r24, 0x0198
    1aba:	83 30       	cpi	r24, 0x03	; 3
    1abc:	09 f0       	breq	.+2      	; 0x1ac0 <PWM_Generate_CHANNELB+0xd8>
    1abe:	a4 c0       	rjmp	.+328    	; 0x1c08 <PWM_Generate_CHANNELB+0x220>
			OCR1BL_REG = ((Copy_u8DutyCycle / 100) * (TOP + 1));
    1ac0:	e8 e4       	ldi	r30, 0x48	; 72
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac6:	94 e6       	ldi	r25, 0x64	; 100
    1ac8:	69 2f       	mov	r22, r25
    1aca:	0e 94 48 19 	call	0x3290	; 0x3290 <__udivmodqi4>
    1ace:	28 2f       	mov	r18, r24
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad6:	01 96       	adiw	r24, 0x01	; 1
    1ad8:	ac 01       	movw	r20, r24
    1ada:	24 9f       	mul	r18, r20
    1adc:	c0 01       	movw	r24, r0
    1ade:	25 9f       	mul	r18, r21
    1ae0:	90 0d       	add	r25, r0
    1ae2:	34 9f       	mul	r19, r20
    1ae4:	90 0d       	add	r25, r0
    1ae6:	11 24       	eor	r1, r1
    1ae8:	91 83       	std	Z+1, r25	; 0x01
    1aea:	80 83       	st	Z, r24
			TCCR1B_REG = (TCCR1B_REG & 0xF8) | (CONFIG.prescaler);/*prescaler bits select (CS01,CS00,CS02)*/
    1aec:	ae e4       	ldi	r26, 0x4E	; 78
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	ee e4       	ldi	r30, 0x4E	; 78
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	98 2f       	mov	r25, r24
    1af8:	98 7f       	andi	r25, 0xF8	; 248
    1afa:	80 91 96 01 	lds	r24, 0x0196
    1afe:	89 2b       	or	r24, r25
    1b00:	8c 93       	st	X, r24
    1b02:	82 c0       	rjmp	.+260    	; 0x1c08 <PWM_Generate_CHANNELB+0x220>
		}

	}

	else if (CONFIG.mode == TIMER_Phase_MODE) {
    1b04:	80 91 97 01 	lds	r24, 0x0197
    1b08:	81 30       	cpi	r24, 0x01	; 1
    1b0a:	09 f0       	breq	.+2      	; 0x1b0e <PWM_Generate_CHANNELB+0x126>
    1b0c:	7d c0       	rjmp	.+250    	; 0x1c08 <PWM_Generate_CHANNELB+0x220>
		uint16 TOP;
		TCNT1L_REG = CONFIG.initial_value;
    1b0e:	ec e4       	ldi	r30, 0x4C	; 76
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 91 99 01 	lds	r24, 0x0199
    1b16:	88 2f       	mov	r24, r24
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	91 83       	std	Z+1, r25	; 0x01
    1b1c:	80 83       	st	Z, r24

		TOP = (F_CPU / (2 * CONFIG.prescaler * Copy_u32freq)); //from equation pwm in phase mode
    1b1e:	80 91 96 01 	lds	r24, 0x0196
    1b22:	88 2f       	mov	r24, r24
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	88 0f       	add	r24, r24
    1b28:	99 1f       	adc	r25, r25
    1b2a:	aa 27       	eor	r26, r26
    1b2c:	97 fd       	sbrc	r25, 7
    1b2e:	a0 95       	com	r26
    1b30:	ba 2f       	mov	r27, r26
    1b32:	2e 81       	ldd	r18, Y+6	; 0x06
    1b34:	3f 81       	ldd	r19, Y+7	; 0x07
    1b36:	48 85       	ldd	r20, Y+8	; 0x08
    1b38:	59 85       	ldd	r21, Y+9	; 0x09
    1b3a:	bc 01       	movw	r22, r24
    1b3c:	cd 01       	movw	r24, r26
    1b3e:	0e 94 29 19 	call	0x3252	; 0x3252 <__mulsi3>
    1b42:	9b 01       	movw	r18, r22
    1b44:	ac 01       	movw	r20, r24
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	92 e1       	ldi	r25, 0x12	; 18
    1b4a:	aa e7       	ldi	r26, 0x7A	; 122
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	bc 01       	movw	r22, r24
    1b50:	cd 01       	movw	r24, r26
    1b52:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__udivmodsi4>
    1b56:	da 01       	movw	r26, r20
    1b58:	c9 01       	movw	r24, r18
    1b5a:	9a 83       	std	Y+2, r25	; 0x02
    1b5c:	89 83       	std	Y+1, r24	; 0x01
		ICR1L_REG = TOP;
    1b5e:	e6 e4       	ldi	r30, 0x46	; 70
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	9a 81       	ldd	r25, Y+2	; 0x02
    1b66:	91 83       	std	Z+1, r25	; 0x01
    1b68:	80 83       	st	Z, r24
		if (CONFIG.PWM_mode == NON_INVERTING) {
    1b6a:	80 91 98 01 	lds	r24, 0x0198
    1b6e:	82 30       	cpi	r24, 0x02	; 2
    1b70:	09 f5       	brne	.+66     	; 0x1bb4 <PWM_Generate_CHANNELB+0x1cc>
			OCR1BL_REG = ((Copy_u8DutyCycle / 100) * (TOP)); //non inverting mince 1 due to tick from top to zero
    1b72:	e8 e4       	ldi	r30, 0x48	; 72
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	8d 81       	ldd	r24, Y+5	; 0x05
    1b78:	94 e6       	ldi	r25, 0x64	; 100
    1b7a:	69 2f       	mov	r22, r25
    1b7c:	0e 94 48 19 	call	0x3290	; 0x3290 <__udivmodqi4>
    1b80:	28 2f       	mov	r18, r24
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
    1b86:	9a 81       	ldd	r25, Y+2	; 0x02
    1b88:	ac 01       	movw	r20, r24
    1b8a:	24 9f       	mul	r18, r20
    1b8c:	c0 01       	movw	r24, r0
    1b8e:	25 9f       	mul	r18, r21
    1b90:	90 0d       	add	r25, r0
    1b92:	34 9f       	mul	r19, r20
    1b94:	90 0d       	add	r25, r0
    1b96:	11 24       	eor	r1, r1
    1b98:	91 83       	std	Z+1, r25	; 0x01
    1b9a:	80 83       	st	Z, r24
			TCCR1B_REG = (TCCR1B_REG & 0xF8) | (CONFIG.prescaler);/*prescaler bits select (CS01,CS00,CS02)*/
    1b9c:	ae e4       	ldi	r26, 0x4E	; 78
    1b9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ba0:	ee e4       	ldi	r30, 0x4E	; 78
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	80 81       	ld	r24, Z
    1ba6:	98 2f       	mov	r25, r24
    1ba8:	98 7f       	andi	r25, 0xF8	; 248
    1baa:	80 91 96 01 	lds	r24, 0x0196
    1bae:	89 2b       	or	r24, r25
    1bb0:	8c 93       	st	X, r24
    1bb2:	2a c0       	rjmp	.+84     	; 0x1c08 <PWM_Generate_CHANNELB+0x220>
		} else if (CONFIG.PWM_mode == INVERTING) {
    1bb4:	80 91 98 01 	lds	r24, 0x0198
    1bb8:	83 30       	cpi	r24, 0x03	; 3
    1bba:	31 f5       	brne	.+76     	; 0x1c08 <PWM_Generate_CHANNELB+0x220>
			OCR1BL_REG = (TOP - (Copy_u8DutyCycle / 100) * (TOP));
    1bbc:	e8 e4       	ldi	r30, 0x48	; 72
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc2:	94 e6       	ldi	r25, 0x64	; 100
    1bc4:	69 2f       	mov	r22, r25
    1bc6:	0e 94 48 19 	call	0x3290	; 0x3290 <__udivmodqi4>
    1bca:	28 2f       	mov	r18, r24
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	ac 01       	movw	r20, r24
    1bd4:	42 1b       	sub	r20, r18
    1bd6:	53 0b       	sbc	r21, r19
    1bd8:	9a 01       	movw	r18, r20
    1bda:	89 81       	ldd	r24, Y+1	; 0x01
    1bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bde:	ac 01       	movw	r20, r24
    1be0:	24 9f       	mul	r18, r20
    1be2:	c0 01       	movw	r24, r0
    1be4:	25 9f       	mul	r18, r21
    1be6:	90 0d       	add	r25, r0
    1be8:	34 9f       	mul	r19, r20
    1bea:	90 0d       	add	r25, r0
    1bec:	11 24       	eor	r1, r1
    1bee:	91 83       	std	Z+1, r25	; 0x01
    1bf0:	80 83       	st	Z, r24
			TCCR1B_REG = (TCCR1B_REG & 0xF8) | (CONFIG.prescaler);/*prescaler bits select (CS01,CS00,CS02)*/
    1bf2:	ae e4       	ldi	r26, 0x4E	; 78
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	ee e4       	ldi	r30, 0x4E	; 78
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	98 2f       	mov	r25, r24
    1bfe:	98 7f       	andi	r25, 0xF8	; 248
    1c00:	80 91 96 01 	lds	r24, 0x0196
    1c04:	89 2b       	or	r24, r25
    1c06:	8c 93       	st	X, r24
		}

	}

}
    1c08:	29 96       	adiw	r28, 0x09	; 9
    1c0a:	0f b6       	in	r0, 0x3f	; 63
    1c0c:	f8 94       	cli
    1c0e:	de bf       	out	0x3e, r29	; 62
    1c10:	0f be       	out	0x3f, r0	; 63
    1c12:	cd bf       	out	0x3d, r28	; 61
    1c14:	cf 91       	pop	r28
    1c16:	df 91       	pop	r29
    1c18:	08 95       	ret

00001c1a <ADC_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init(const ADC_ConfigType * Config_Ptr)

{
    1c1a:	df 93       	push	r29
    1c1c:	cf 93       	push	r28
    1c1e:	00 d0       	rcall	.+0      	; 0x1c20 <ADC_init+0x6>
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
    1c24:	9a 83       	std	Y+2, r25	; 0x02
    1c26:	89 83       	std	Y+1, r24	; 0x01
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 00 to choose to connect external reference voltage by input this voltage through AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX=(ADMUX & 0x3F) |((Config_Ptr->ref_volt & 0x03 ) << 6);
    1c28:	a7 e2       	ldi	r26, 0x27	; 39
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	e7 e2       	ldi	r30, 0x27	; 39
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
    1c32:	28 2f       	mov	r18, r24
    1c34:	2f 73       	andi	r18, 0x3F	; 63
    1c36:	e9 81       	ldd	r30, Y+1	; 0x01
    1c38:	fa 81       	ldd	r31, Y+2	; 0x02
    1c3a:	80 81       	ld	r24, Z
    1c3c:	88 2f       	mov	r24, r24
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	00 24       	eor	r0, r0
    1c42:	96 95       	lsr	r25
    1c44:	87 95       	ror	r24
    1c46:	07 94       	ror	r0
    1c48:	96 95       	lsr	r25
    1c4a:	87 95       	ror	r24
    1c4c:	07 94       	ror	r0
    1c4e:	98 2f       	mov	r25, r24
    1c50:	80 2d       	mov	r24, r0
    1c52:	82 2b       	or	r24, r18
    1c54:	8c 93       	st	X, r24
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADATE   = 0 Disable Auto Trigger
	 * ADPS2:0 = 011 to choose ADC_Clock=F_CPU/8=1Mhz/8=125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA |= (1<<ADEN);
    1c56:	a6 e2       	ldi	r26, 0x26	; 38
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	e6 e2       	ldi	r30, 0x26	; 38
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	80 68       	ori	r24, 0x80	; 128
    1c62:	8c 93       	st	X, r24
	ADCSRA = (ADCSRA & 0xF8) | ((Config_Ptr->prescaler) & 0x07);
    1c64:	a6 e2       	ldi	r26, 0x26	; 38
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e6 e2       	ldi	r30, 0x26	; 38
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	98 2f       	mov	r25, r24
    1c70:	98 7f       	andi	r25, 0xF8	; 248
    1c72:	e9 81       	ldd	r30, Y+1	; 0x01
    1c74:	fa 81       	ldd	r31, Y+2	; 0x02
    1c76:	81 81       	ldd	r24, Z+1	; 0x01
    1c78:	87 70       	andi	r24, 0x07	; 7
    1c7a:	89 2b       	or	r24, r25
    1c7c:	8c 93       	st	X, r24
}
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	cf 91       	pop	r28
    1c84:	df 91       	pop	r29
    1c86:	08 95       	ret

00001c88 <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num)
{
    1c88:	df 93       	push	r29
    1c8a:	cf 93       	push	r28
    1c8c:	0f 92       	push	r0
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
    1c92:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* Input channel number must be from 0 --> 7 */
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
    1c96:	87 70       	andi	r24, 0x07	; 7
    1c98:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
    1c9a:	a7 e2       	ldi	r26, 0x27	; 39
    1c9c:	b0 e0       	ldi	r27, 0x00	; 0
    1c9e:	e7 e2       	ldi	r30, 0x27	; 39
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	80 7e       	andi	r24, 0xE0	; 224
    1ca6:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
    1ca8:	a7 e2       	ldi	r26, 0x27	; 39
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	e7 e2       	ldi	r30, 0x27	; 39
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	90 81       	ld	r25, Z
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	89 2b       	or	r24, r25
    1cb6:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* Start conversion write '1' to ADSC */
    1cb8:	a6 e2       	ldi	r26, 0x26	; 38
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	e6 e2       	ldi	r30, 0x26	; 38
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	80 64       	ori	r24, 0x40	; 64
    1cc4:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* Wait for conversion to complete, ADIF becomes '1' */
    1cc6:	e6 e2       	ldi	r30, 0x26	; 38
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	88 2f       	mov	r24, r24
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	80 71       	andi	r24, 0x10	; 16
    1cd2:	90 70       	andi	r25, 0x00	; 0
    1cd4:	00 97       	sbiw	r24, 0x00	; 0
    1cd6:	b9 f3       	breq	.-18     	; 0x1cc6 <ADC_readChannel+0x3e>
	SET_BIT(ADCSRA,ADIF); /* Clear ADIF by write '1' to it :) */
    1cd8:	a6 e2       	ldi	r26, 0x26	; 38
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	e6 e2       	ldi	r30, 0x26	; 38
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	80 61       	ori	r24, 0x10	; 16
    1ce4:	8c 93       	st	X, r24
	return ADC; /* Read the digital value from the data register */
    1ce6:	e4 e2       	ldi	r30, 0x24	; 36
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	91 81       	ldd	r25, Z+1	; 0x01
}
    1cee:	0f 90       	pop	r0
    1cf0:	cf 91       	pop	r28
    1cf2:	df 91       	pop	r29
    1cf4:	08 95       	ret

00001cf6 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1cf6:	df 93       	push	r29
    1cf8:	cf 93       	push	r28
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	DIO_vSetPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1cfe:	83 e0       	ldi	r24, 0x03	; 3
    1d00:	60 e0       	ldi	r22, 0x00	; 0
    1d02:	41 e0       	ldi	r20, 0x01	; 1
    1d04:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_vSetPinDirection>
	DIO_vSetPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1d08:	83 e0       	ldi	r24, 0x03	; 3
    1d0a:	61 e0       	ldi	r22, 0x01	; 1
    1d0c:	41 e0       	ldi	r20, 0x01	; 1
    1d0e:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_vSetPinDirection>
	DIO_vSetPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1d12:	83 e0       	ldi	r24, 0x03	; 3
    1d14:	62 e0       	ldi	r22, 0x02	; 2
    1d16:	41 e0       	ldi	r20, 0x01	; 1
    1d18:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_vSetPinDirection>

#if (LCD_DATA_BITS_MODE == 4)

	/* Configure 4 pins in the data port as output pins */
	DIO_vSetPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID,PIN_OUTPUT);
    1d1c:	82 e0       	ldi	r24, 0x02	; 2
    1d1e:	60 e0       	ldi	r22, 0x00	; 0
    1d20:	41 e0       	ldi	r20, 0x01	; 1
    1d22:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_vSetPinDirection>
	DIO_vSetPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+1,PIN_OUTPUT);
    1d26:	82 e0       	ldi	r24, 0x02	; 2
    1d28:	61 e0       	ldi	r22, 0x01	; 1
    1d2a:	41 e0       	ldi	r20, 0x01	; 1
    1d2c:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_vSetPinDirection>
	DIO_vSetPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+2,PIN_OUTPUT);
    1d30:	82 e0       	ldi	r24, 0x02	; 2
    1d32:	62 e0       	ldi	r22, 0x02	; 2
    1d34:	41 e0       	ldi	r20, 0x01	; 1
    1d36:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_vSetPinDirection>
	DIO_vSetPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+3,PIN_OUTPUT);
    1d3a:	82 e0       	ldi	r24, 0x02	; 2
    1d3c:	63 e0       	ldi	r22, 0x03	; 3
    1d3e:	41 e0       	ldi	r20, 0x01	; 1
    1d40:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_vSetPinDirection>

	LCD_sendCommand(LCD_GO_TO_HOME);
    1d44:	82 e0       	ldi	r24, 0x02	; 2
    1d46:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    1d4a:	88 e2       	ldi	r24, 0x28	; 40
    1d4c:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <LCD_sendCommand>
	/* Configure the data port as output port */
	DIO_vSetPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1d50:	8c e0       	ldi	r24, 0x0C	; 12
    1d52:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <LCD_sendCommand>
}
    1d5c:	cf 91       	pop	r28
    1d5e:	df 91       	pop	r29
    1d60:	08 95       	ret

00001d62 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1d62:	0f 93       	push	r16
    1d64:	1f 93       	push	r17
    1d66:	df 93       	push	r29
    1d68:	cf 93       	push	r28
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
    1d6e:	c4 56       	subi	r28, 0x64	; 100
    1d70:	d0 40       	sbci	r29, 0x00	; 0
    1d72:	0f b6       	in	r0, 0x3f	; 63
    1d74:	f8 94       	cli
    1d76:	de bf       	out	0x3e, r29	; 62
    1d78:	0f be       	out	0x3f, r0	; 63
    1d7a:	cd bf       	out	0x3d, r28	; 61
    1d7c:	fe 01       	movw	r30, r28
    1d7e:	ec 59       	subi	r30, 0x9C	; 156
    1d80:	ff 4f       	sbci	r31, 0xFF	; 255
    1d82:	80 83       	st	Z, r24
	uint8 lcd_port_value = 0;
    1d84:	fe 01       	movw	r30, r28
    1d86:	ed 59       	subi	r30, 0x9D	; 157
    1d88:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8a:	10 82       	st	Z, r1
	DIO_vWritePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1d8c:	83 e0       	ldi	r24, 0x03	; 3
    1d8e:	60 e0       	ldi	r22, 0x00	; 0
    1d90:	40 e0       	ldi	r20, 0x00	; 0
    1d92:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_vWritePin>
	DIO_vWritePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1d96:	83 e0       	ldi	r24, 0x03	; 3
    1d98:	61 e0       	ldi	r22, 0x01	; 1
    1d9a:	40 e0       	ldi	r20, 0x00	; 0
    1d9c:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_vWritePin>
    1da0:	fe 01       	movw	r30, r28
    1da2:	e1 5a       	subi	r30, 0xA1	; 161
    1da4:	ff 4f       	sbci	r31, 0xFF	; 255
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	a0 e8       	ldi	r26, 0x80	; 128
    1dac:	bf e3       	ldi	r27, 0x3F	; 63
    1dae:	80 83       	st	Z, r24
    1db0:	91 83       	std	Z+1, r25	; 0x01
    1db2:	a2 83       	std	Z+2, r26	; 0x02
    1db4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db6:	8e 01       	movw	r16, r28
    1db8:	05 5a       	subi	r16, 0xA5	; 165
    1dba:	1f 4f       	sbci	r17, 0xFF	; 255
    1dbc:	fe 01       	movw	r30, r28
    1dbe:	e1 5a       	subi	r30, 0xA1	; 161
    1dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc2:	60 81       	ld	r22, Z
    1dc4:	71 81       	ldd	r23, Z+1	; 0x01
    1dc6:	82 81       	ldd	r24, Z+2	; 0x02
    1dc8:	93 81       	ldd	r25, Z+3	; 0x03
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	4a e7       	ldi	r20, 0x7A	; 122
    1dd0:	53 e4       	ldi	r21, 0x43	; 67
    1dd2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	f8 01       	movw	r30, r16
    1ddc:	80 83       	st	Z, r24
    1dde:	91 83       	std	Z+1, r25	; 0x01
    1de0:	a2 83       	std	Z+2, r26	; 0x02
    1de2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1de4:	fe 01       	movw	r30, r28
    1de6:	e5 5a       	subi	r30, 0xA5	; 165
    1de8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dea:	60 81       	ld	r22, Z
    1dec:	71 81       	ldd	r23, Z+1	; 0x01
    1dee:	82 81       	ldd	r24, Z+2	; 0x02
    1df0:	93 81       	ldd	r25, Z+3	; 0x03
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	40 e8       	ldi	r20, 0x80	; 128
    1df8:	5f e3       	ldi	r21, 0x3F	; 63
    1dfa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1dfe:	88 23       	and	r24, r24
    1e00:	44 f4       	brge	.+16     	; 0x1e12 <LCD_sendCommand+0xb0>
		__ticks = 1;
    1e02:	fe 01       	movw	r30, r28
    1e04:	e7 5a       	subi	r30, 0xA7	; 167
    1e06:	ff 4f       	sbci	r31, 0xFF	; 255
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	91 83       	std	Z+1, r25	; 0x01
    1e0e:	80 83       	st	Z, r24
    1e10:	64 c0       	rjmp	.+200    	; 0x1eda <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    1e12:	fe 01       	movw	r30, r28
    1e14:	e5 5a       	subi	r30, 0xA5	; 165
    1e16:	ff 4f       	sbci	r31, 0xFF	; 255
    1e18:	60 81       	ld	r22, Z
    1e1a:	71 81       	ldd	r23, Z+1	; 0x01
    1e1c:	82 81       	ldd	r24, Z+2	; 0x02
    1e1e:	93 81       	ldd	r25, Z+3	; 0x03
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	3f ef       	ldi	r19, 0xFF	; 255
    1e24:	4f e7       	ldi	r20, 0x7F	; 127
    1e26:	57 e4       	ldi	r21, 0x47	; 71
    1e28:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e2c:	18 16       	cp	r1, r24
    1e2e:	0c f0       	brlt	.+2      	; 0x1e32 <LCD_sendCommand+0xd0>
    1e30:	43 c0       	rjmp	.+134    	; 0x1eb8 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e32:	fe 01       	movw	r30, r28
    1e34:	e1 5a       	subi	r30, 0xA1	; 161
    1e36:	ff 4f       	sbci	r31, 0xFF	; 255
    1e38:	60 81       	ld	r22, Z
    1e3a:	71 81       	ldd	r23, Z+1	; 0x01
    1e3c:	82 81       	ldd	r24, Z+2	; 0x02
    1e3e:	93 81       	ldd	r25, Z+3	; 0x03
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	40 e2       	ldi	r20, 0x20	; 32
    1e46:	51 e4       	ldi	r21, 0x41	; 65
    1e48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	8e 01       	movw	r16, r28
    1e52:	07 5a       	subi	r16, 0xA7	; 167
    1e54:	1f 4f       	sbci	r17, 0xFF	; 255
    1e56:	bc 01       	movw	r22, r24
    1e58:	cd 01       	movw	r24, r26
    1e5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	f8 01       	movw	r30, r16
    1e64:	91 83       	std	Z+1, r25	; 0x01
    1e66:	80 83       	st	Z, r24
    1e68:	1f c0       	rjmp	.+62     	; 0x1ea8 <LCD_sendCommand+0x146>
    1e6a:	fe 01       	movw	r30, r28
    1e6c:	e9 5a       	subi	r30, 0xA9	; 169
    1e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e70:	89 e1       	ldi	r24, 0x19	; 25
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	91 83       	std	Z+1, r25	; 0x01
    1e76:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e78:	fe 01       	movw	r30, r28
    1e7a:	e9 5a       	subi	r30, 0xA9	; 169
    1e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7e:	80 81       	ld	r24, Z
    1e80:	91 81       	ldd	r25, Z+1	; 0x01
    1e82:	01 97       	sbiw	r24, 0x01	; 1
    1e84:	f1 f7       	brne	.-4      	; 0x1e82 <LCD_sendCommand+0x120>
    1e86:	fe 01       	movw	r30, r28
    1e88:	e9 5a       	subi	r30, 0xA9	; 169
    1e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8c:	91 83       	std	Z+1, r25	; 0x01
    1e8e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e90:	de 01       	movw	r26, r28
    1e92:	a7 5a       	subi	r26, 0xA7	; 167
    1e94:	bf 4f       	sbci	r27, 0xFF	; 255
    1e96:	fe 01       	movw	r30, r28
    1e98:	e7 5a       	subi	r30, 0xA7	; 167
    1e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9c:	80 81       	ld	r24, Z
    1e9e:	91 81       	ldd	r25, Z+1	; 0x01
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	11 96       	adiw	r26, 0x01	; 1
    1ea4:	9c 93       	st	X, r25
    1ea6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea8:	fe 01       	movw	r30, r28
    1eaa:	e7 5a       	subi	r30, 0xA7	; 167
    1eac:	ff 4f       	sbci	r31, 0xFF	; 255
    1eae:	80 81       	ld	r24, Z
    1eb0:	91 81       	ldd	r25, Z+1	; 0x01
    1eb2:	00 97       	sbiw	r24, 0x00	; 0
    1eb4:	d1 f6       	brne	.-76     	; 0x1e6a <LCD_sendCommand+0x108>
    1eb6:	27 c0       	rjmp	.+78     	; 0x1f06 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb8:	8e 01       	movw	r16, r28
    1eba:	07 5a       	subi	r16, 0xA7	; 167
    1ebc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	e5 5a       	subi	r30, 0xA5	; 165
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	60 81       	ld	r22, Z
    1ec6:	71 81       	ldd	r23, Z+1	; 0x01
    1ec8:	82 81       	ldd	r24, Z+2	; 0x02
    1eca:	93 81       	ldd	r25, Z+3	; 0x03
    1ecc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	f8 01       	movw	r30, r16
    1ed6:	91 83       	std	Z+1, r25	; 0x01
    1ed8:	80 83       	st	Z, r24
    1eda:	de 01       	movw	r26, r28
    1edc:	ab 5a       	subi	r26, 0xAB	; 171
    1ede:	bf 4f       	sbci	r27, 0xFF	; 255
    1ee0:	fe 01       	movw	r30, r28
    1ee2:	e7 5a       	subi	r30, 0xA7	; 167
    1ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee6:	80 81       	ld	r24, Z
    1ee8:	91 81       	ldd	r25, Z+1	; 0x01
    1eea:	8d 93       	st	X+, r24
    1eec:	9c 93       	st	X, r25
    1eee:	fe 01       	movw	r30, r28
    1ef0:	eb 5a       	subi	r30, 0xAB	; 171
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	80 81       	ld	r24, Z
    1ef6:	91 81       	ldd	r25, Z+1	; 0x01
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	f1 f7       	brne	.-4      	; 0x1ef8 <LCD_sendCommand+0x196>
    1efc:	fe 01       	movw	r30, r28
    1efe:	eb 5a       	subi	r30, 0xAB	; 171
    1f00:	ff 4f       	sbci	r31, 0xFF	; 255
    1f02:	91 83       	std	Z+1, r25	; 0x01
    1f04:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	DIO_vWritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1f06:	83 e0       	ldi	r24, 0x03	; 3
    1f08:	62 e0       	ldi	r22, 0x02	; 2
    1f0a:	41 e0       	ldi	r20, 0x01	; 1
    1f0c:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_vWritePin>
    1f10:	fe 01       	movw	r30, r28
    1f12:	ef 5a       	subi	r30, 0xAF	; 175
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	80 e0       	ldi	r24, 0x00	; 0
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	a0 e8       	ldi	r26, 0x80	; 128
    1f1c:	bf e3       	ldi	r27, 0x3F	; 63
    1f1e:	80 83       	st	Z, r24
    1f20:	91 83       	std	Z+1, r25	; 0x01
    1f22:	a2 83       	std	Z+2, r26	; 0x02
    1f24:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f26:	8e 01       	movw	r16, r28
    1f28:	03 5b       	subi	r16, 0xB3	; 179
    1f2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f2c:	fe 01       	movw	r30, r28
    1f2e:	ef 5a       	subi	r30, 0xAF	; 175
    1f30:	ff 4f       	sbci	r31, 0xFF	; 255
    1f32:	60 81       	ld	r22, Z
    1f34:	71 81       	ldd	r23, Z+1	; 0x01
    1f36:	82 81       	ldd	r24, Z+2	; 0x02
    1f38:	93 81       	ldd	r25, Z+3	; 0x03
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	4a e7       	ldi	r20, 0x7A	; 122
    1f40:	53 e4       	ldi	r21, 0x43	; 67
    1f42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f46:	dc 01       	movw	r26, r24
    1f48:	cb 01       	movw	r24, r22
    1f4a:	f8 01       	movw	r30, r16
    1f4c:	80 83       	st	Z, r24
    1f4e:	91 83       	std	Z+1, r25	; 0x01
    1f50:	a2 83       	std	Z+2, r26	; 0x02
    1f52:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f54:	fe 01       	movw	r30, r28
    1f56:	e3 5b       	subi	r30, 0xB3	; 179
    1f58:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5a:	60 81       	ld	r22, Z
    1f5c:	71 81       	ldd	r23, Z+1	; 0x01
    1f5e:	82 81       	ldd	r24, Z+2	; 0x02
    1f60:	93 81       	ldd	r25, Z+3	; 0x03
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	40 e8       	ldi	r20, 0x80	; 128
    1f68:	5f e3       	ldi	r21, 0x3F	; 63
    1f6a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f6e:	88 23       	and	r24, r24
    1f70:	44 f4       	brge	.+16     	; 0x1f82 <LCD_sendCommand+0x220>
		__ticks = 1;
    1f72:	fe 01       	movw	r30, r28
    1f74:	e5 5b       	subi	r30, 0xB5	; 181
    1f76:	ff 4f       	sbci	r31, 0xFF	; 255
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	91 83       	std	Z+1, r25	; 0x01
    1f7e:	80 83       	st	Z, r24
    1f80:	64 c0       	rjmp	.+200    	; 0x204a <LCD_sendCommand+0x2e8>
	else if (__tmp > 65535)
    1f82:	fe 01       	movw	r30, r28
    1f84:	e3 5b       	subi	r30, 0xB3	; 179
    1f86:	ff 4f       	sbci	r31, 0xFF	; 255
    1f88:	60 81       	ld	r22, Z
    1f8a:	71 81       	ldd	r23, Z+1	; 0x01
    1f8c:	82 81       	ldd	r24, Z+2	; 0x02
    1f8e:	93 81       	ldd	r25, Z+3	; 0x03
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	3f ef       	ldi	r19, 0xFF	; 255
    1f94:	4f e7       	ldi	r20, 0x7F	; 127
    1f96:	57 e4       	ldi	r21, 0x47	; 71
    1f98:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f9c:	18 16       	cp	r1, r24
    1f9e:	0c f0       	brlt	.+2      	; 0x1fa2 <LCD_sendCommand+0x240>
    1fa0:	43 c0       	rjmp	.+134    	; 0x2028 <LCD_sendCommand+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	ef 5a       	subi	r30, 0xAF	; 175
    1fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa8:	60 81       	ld	r22, Z
    1faa:	71 81       	ldd	r23, Z+1	; 0x01
    1fac:	82 81       	ldd	r24, Z+2	; 0x02
    1fae:	93 81       	ldd	r25, Z+3	; 0x03
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	40 e2       	ldi	r20, 0x20	; 32
    1fb6:	51 e4       	ldi	r21, 0x41	; 65
    1fb8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	8e 01       	movw	r16, r28
    1fc2:	05 5b       	subi	r16, 0xB5	; 181
    1fc4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc6:	bc 01       	movw	r22, r24
    1fc8:	cd 01       	movw	r24, r26
    1fca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	f8 01       	movw	r30, r16
    1fd4:	91 83       	std	Z+1, r25	; 0x01
    1fd6:	80 83       	st	Z, r24
    1fd8:	1f c0       	rjmp	.+62     	; 0x2018 <LCD_sendCommand+0x2b6>
    1fda:	fe 01       	movw	r30, r28
    1fdc:	e7 5b       	subi	r30, 0xB7	; 183
    1fde:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe0:	89 e1       	ldi	r24, 0x19	; 25
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	91 83       	std	Z+1, r25	; 0x01
    1fe6:	80 83       	st	Z, r24
    1fe8:	fe 01       	movw	r30, r28
    1fea:	e7 5b       	subi	r30, 0xB7	; 183
    1fec:	ff 4f       	sbci	r31, 0xFF	; 255
    1fee:	80 81       	ld	r24, Z
    1ff0:	91 81       	ldd	r25, Z+1	; 0x01
    1ff2:	01 97       	sbiw	r24, 0x01	; 1
    1ff4:	f1 f7       	brne	.-4      	; 0x1ff2 <LCD_sendCommand+0x290>
    1ff6:	fe 01       	movw	r30, r28
    1ff8:	e7 5b       	subi	r30, 0xB7	; 183
    1ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffc:	91 83       	std	Z+1, r25	; 0x01
    1ffe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2000:	de 01       	movw	r26, r28
    2002:	a5 5b       	subi	r26, 0xB5	; 181
    2004:	bf 4f       	sbci	r27, 0xFF	; 255
    2006:	fe 01       	movw	r30, r28
    2008:	e5 5b       	subi	r30, 0xB5	; 181
    200a:	ff 4f       	sbci	r31, 0xFF	; 255
    200c:	80 81       	ld	r24, Z
    200e:	91 81       	ldd	r25, Z+1	; 0x01
    2010:	01 97       	sbiw	r24, 0x01	; 1
    2012:	11 96       	adiw	r26, 0x01	; 1
    2014:	9c 93       	st	X, r25
    2016:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2018:	fe 01       	movw	r30, r28
    201a:	e5 5b       	subi	r30, 0xB5	; 181
    201c:	ff 4f       	sbci	r31, 0xFF	; 255
    201e:	80 81       	ld	r24, Z
    2020:	91 81       	ldd	r25, Z+1	; 0x01
    2022:	00 97       	sbiw	r24, 0x00	; 0
    2024:	d1 f6       	brne	.-76     	; 0x1fda <LCD_sendCommand+0x278>
    2026:	27 c0       	rjmp	.+78     	; 0x2076 <LCD_sendCommand+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2028:	8e 01       	movw	r16, r28
    202a:	05 5b       	subi	r16, 0xB5	; 181
    202c:	1f 4f       	sbci	r17, 0xFF	; 255
    202e:	fe 01       	movw	r30, r28
    2030:	e3 5b       	subi	r30, 0xB3	; 179
    2032:	ff 4f       	sbci	r31, 0xFF	; 255
    2034:	60 81       	ld	r22, Z
    2036:	71 81       	ldd	r23, Z+1	; 0x01
    2038:	82 81       	ldd	r24, Z+2	; 0x02
    203a:	93 81       	ldd	r25, Z+3	; 0x03
    203c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	f8 01       	movw	r30, r16
    2046:	91 83       	std	Z+1, r25	; 0x01
    2048:	80 83       	st	Z, r24
    204a:	de 01       	movw	r26, r28
    204c:	a9 5b       	subi	r26, 0xB9	; 185
    204e:	bf 4f       	sbci	r27, 0xFF	; 255
    2050:	fe 01       	movw	r30, r28
    2052:	e5 5b       	subi	r30, 0xB5	; 181
    2054:	ff 4f       	sbci	r31, 0xFF	; 255
    2056:	80 81       	ld	r24, Z
    2058:	91 81       	ldd	r25, Z+1	; 0x01
    205a:	8d 93       	st	X+, r24
    205c:	9c 93       	st	X, r25
    205e:	fe 01       	movw	r30, r28
    2060:	e9 5b       	subi	r30, 0xB9	; 185
    2062:	ff 4f       	sbci	r31, 0xFF	; 255
    2064:	80 81       	ld	r24, Z
    2066:	91 81       	ldd	r25, Z+1	; 0x01
    2068:	01 97       	sbiw	r24, 0x01	; 1
    206a:	f1 f7       	brne	.-4      	; 0x2068 <LCD_sendCommand+0x306>
    206c:	fe 01       	movw	r30, r28
    206e:	e9 5b       	subi	r30, 0xB9	; 185
    2070:	ff 4f       	sbci	r31, 0xFF	; 255
    2072:	91 83       	std	Z+1, r25	; 0x01
    2074:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if (LCD_DATA_BITS_MODE == 4)
	/* out the last 4 bits of the required command to the data bus D4 --> D7 */
	lcd_port_value = DIO_GETPortValue(LCD_DATA_PORT_ID);
    2076:	82 e0       	ldi	r24, 0x02	; 2
    2078:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_GETPortValue>
    207c:	fe 01       	movw	r30, r28
    207e:	ed 59       	subi	r30, 0x9D	; 157
    2080:	ff 4f       	sbci	r31, 0xFF	; 255
    2082:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | (command & 0xF0);
#else
	lcd_port_value = (lcd_port_value & 0xF0) | ((command & 0xF0) >> 4);
    2084:	fe 01       	movw	r30, r28
    2086:	ed 59       	subi	r30, 0x9D	; 157
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	80 81       	ld	r24, Z
    208c:	98 2f       	mov	r25, r24
    208e:	90 7f       	andi	r25, 0xF0	; 240
    2090:	fe 01       	movw	r30, r28
    2092:	ec 59       	subi	r30, 0x9C	; 156
    2094:	ff 4f       	sbci	r31, 0xFF	; 255
    2096:	80 81       	ld	r24, Z
    2098:	82 95       	swap	r24
    209a:	8f 70       	andi	r24, 0x0F	; 15
    209c:	89 2b       	or	r24, r25
    209e:	fe 01       	movw	r30, r28
    20a0:	ed 59       	subi	r30, 0x9D	; 157
    20a2:	ff 4f       	sbci	r31, 0xFF	; 255
    20a4:	80 83       	st	Z, r24
#endif
	DIO_vWritePort(LCD_DATA_PORT_ID,lcd_port_value);
    20a6:	fe 01       	movw	r30, r28
    20a8:	ed 59       	subi	r30, 0x9D	; 157
    20aa:	ff 4f       	sbci	r31, 0xFF	; 255
    20ac:	82 e0       	ldi	r24, 0x02	; 2
    20ae:	60 81       	ld	r22, Z
    20b0:	0e 94 ca 09 	call	0x1394	; 0x1394 <DIO_vWritePort>
    20b4:	fe 01       	movw	r30, r28
    20b6:	ed 5b       	subi	r30, 0xBD	; 189
    20b8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	a0 e8       	ldi	r26, 0x80	; 128
    20c0:	bf e3       	ldi	r27, 0x3F	; 63
    20c2:	80 83       	st	Z, r24
    20c4:	91 83       	std	Z+1, r25	; 0x01
    20c6:	a2 83       	std	Z+2, r26	; 0x02
    20c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ca:	8e 01       	movw	r16, r28
    20cc:	01 5c       	subi	r16, 0xC1	; 193
    20ce:	1f 4f       	sbci	r17, 0xFF	; 255
    20d0:	fe 01       	movw	r30, r28
    20d2:	ed 5b       	subi	r30, 0xBD	; 189
    20d4:	ff 4f       	sbci	r31, 0xFF	; 255
    20d6:	60 81       	ld	r22, Z
    20d8:	71 81       	ldd	r23, Z+1	; 0x01
    20da:	82 81       	ldd	r24, Z+2	; 0x02
    20dc:	93 81       	ldd	r25, Z+3	; 0x03
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	4a e7       	ldi	r20, 0x7A	; 122
    20e4:	53 e4       	ldi	r21, 0x43	; 67
    20e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	f8 01       	movw	r30, r16
    20f0:	80 83       	st	Z, r24
    20f2:	91 83       	std	Z+1, r25	; 0x01
    20f4:	a2 83       	std	Z+2, r26	; 0x02
    20f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20f8:	fe 01       	movw	r30, r28
    20fa:	ff 96       	adiw	r30, 0x3f	; 63
    20fc:	60 81       	ld	r22, Z
    20fe:	71 81       	ldd	r23, Z+1	; 0x01
    2100:	82 81       	ldd	r24, Z+2	; 0x02
    2102:	93 81       	ldd	r25, Z+3	; 0x03
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	40 e8       	ldi	r20, 0x80	; 128
    210a:	5f e3       	ldi	r21, 0x3F	; 63
    210c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2110:	88 23       	and	r24, r24
    2112:	2c f4       	brge	.+10     	; 0x211e <LCD_sendCommand+0x3bc>
		__ticks = 1;
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	9e af       	std	Y+62, r25	; 0x3e
    211a:	8d af       	std	Y+61, r24	; 0x3d
    211c:	46 c0       	rjmp	.+140    	; 0x21aa <LCD_sendCommand+0x448>
	else if (__tmp > 65535)
    211e:	fe 01       	movw	r30, r28
    2120:	ff 96       	adiw	r30, 0x3f	; 63
    2122:	60 81       	ld	r22, Z
    2124:	71 81       	ldd	r23, Z+1	; 0x01
    2126:	82 81       	ldd	r24, Z+2	; 0x02
    2128:	93 81       	ldd	r25, Z+3	; 0x03
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	3f ef       	ldi	r19, 0xFF	; 255
    212e:	4f e7       	ldi	r20, 0x7F	; 127
    2130:	57 e4       	ldi	r21, 0x47	; 71
    2132:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2136:	18 16       	cp	r1, r24
    2138:	64 f5       	brge	.+88     	; 0x2192 <LCD_sendCommand+0x430>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    213a:	fe 01       	movw	r30, r28
    213c:	ed 5b       	subi	r30, 0xBD	; 189
    213e:	ff 4f       	sbci	r31, 0xFF	; 255
    2140:	60 81       	ld	r22, Z
    2142:	71 81       	ldd	r23, Z+1	; 0x01
    2144:	82 81       	ldd	r24, Z+2	; 0x02
    2146:	93 81       	ldd	r25, Z+3	; 0x03
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	40 e2       	ldi	r20, 0x20	; 32
    214e:	51 e4       	ldi	r21, 0x41	; 65
    2150:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	bc 01       	movw	r22, r24
    215a:	cd 01       	movw	r24, r26
    215c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	9e af       	std	Y+62, r25	; 0x3e
    2166:	8d af       	std	Y+61, r24	; 0x3d
    2168:	0f c0       	rjmp	.+30     	; 0x2188 <LCD_sendCommand+0x426>
    216a:	89 e1       	ldi	r24, 0x19	; 25
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	9c af       	std	Y+60, r25	; 0x3c
    2170:	8b af       	std	Y+59, r24	; 0x3b
    2172:	8b ad       	ldd	r24, Y+59	; 0x3b
    2174:	9c ad       	ldd	r25, Y+60	; 0x3c
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	f1 f7       	brne	.-4      	; 0x2176 <LCD_sendCommand+0x414>
    217a:	9c af       	std	Y+60, r25	; 0x3c
    217c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    217e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2180:	9e ad       	ldd	r25, Y+62	; 0x3e
    2182:	01 97       	sbiw	r24, 0x01	; 1
    2184:	9e af       	std	Y+62, r25	; 0x3e
    2186:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2188:	8d ad       	ldd	r24, Y+61	; 0x3d
    218a:	9e ad       	ldd	r25, Y+62	; 0x3e
    218c:	00 97       	sbiw	r24, 0x00	; 0
    218e:	69 f7       	brne	.-38     	; 0x216a <LCD_sendCommand+0x408>
    2190:	16 c0       	rjmp	.+44     	; 0x21be <LCD_sendCommand+0x45c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2192:	fe 01       	movw	r30, r28
    2194:	ff 96       	adiw	r30, 0x3f	; 63
    2196:	60 81       	ld	r22, Z
    2198:	71 81       	ldd	r23, Z+1	; 0x01
    219a:	82 81       	ldd	r24, Z+2	; 0x02
    219c:	93 81       	ldd	r25, Z+3	; 0x03
    219e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	9e af       	std	Y+62, r25	; 0x3e
    21a8:	8d af       	std	Y+61, r24	; 0x3d
    21aa:	8d ad       	ldd	r24, Y+61	; 0x3d
    21ac:	9e ad       	ldd	r25, Y+62	; 0x3e
    21ae:	9a af       	std	Y+58, r25	; 0x3a
    21b0:	89 af       	std	Y+57, r24	; 0x39
    21b2:	89 ad       	ldd	r24, Y+57	; 0x39
    21b4:	9a ad       	ldd	r25, Y+58	; 0x3a
    21b6:	01 97       	sbiw	r24, 0x01	; 1
    21b8:	f1 f7       	brne	.-4      	; 0x21b6 <LCD_sendCommand+0x454>
    21ba:	9a af       	std	Y+58, r25	; 0x3a
    21bc:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_vWritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    21be:	83 e0       	ldi	r24, 0x03	; 3
    21c0:	62 e0       	ldi	r22, 0x02	; 2
    21c2:	40 e0       	ldi	r20, 0x00	; 0
    21c4:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_vWritePin>
    21c8:	80 e0       	ldi	r24, 0x00	; 0
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	a0 e8       	ldi	r26, 0x80	; 128
    21ce:	bf e3       	ldi	r27, 0x3F	; 63
    21d0:	8d ab       	std	Y+53, r24	; 0x35
    21d2:	9e ab       	std	Y+54, r25	; 0x36
    21d4:	af ab       	std	Y+55, r26	; 0x37
    21d6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d8:	6d a9       	ldd	r22, Y+53	; 0x35
    21da:	7e a9       	ldd	r23, Y+54	; 0x36
    21dc:	8f a9       	ldd	r24, Y+55	; 0x37
    21de:	98 ad       	ldd	r25, Y+56	; 0x38
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	4a e7       	ldi	r20, 0x7A	; 122
    21e6:	53 e4       	ldi	r21, 0x43	; 67
    21e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21ec:	dc 01       	movw	r26, r24
    21ee:	cb 01       	movw	r24, r22
    21f0:	89 ab       	std	Y+49, r24	; 0x31
    21f2:	9a ab       	std	Y+50, r25	; 0x32
    21f4:	ab ab       	std	Y+51, r26	; 0x33
    21f6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21f8:	69 a9       	ldd	r22, Y+49	; 0x31
    21fa:	7a a9       	ldd	r23, Y+50	; 0x32
    21fc:	8b a9       	ldd	r24, Y+51	; 0x33
    21fe:	9c a9       	ldd	r25, Y+52	; 0x34
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	40 e8       	ldi	r20, 0x80	; 128
    2206:	5f e3       	ldi	r21, 0x3F	; 63
    2208:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    220c:	88 23       	and	r24, r24
    220e:	2c f4       	brge	.+10     	; 0x221a <LCD_sendCommand+0x4b8>
		__ticks = 1;
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	98 ab       	std	Y+48, r25	; 0x30
    2216:	8f a7       	std	Y+47, r24	; 0x2f
    2218:	3f c0       	rjmp	.+126    	; 0x2298 <LCD_sendCommand+0x536>
	else if (__tmp > 65535)
    221a:	69 a9       	ldd	r22, Y+49	; 0x31
    221c:	7a a9       	ldd	r23, Y+50	; 0x32
    221e:	8b a9       	ldd	r24, Y+51	; 0x33
    2220:	9c a9       	ldd	r25, Y+52	; 0x34
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	3f ef       	ldi	r19, 0xFF	; 255
    2226:	4f e7       	ldi	r20, 0x7F	; 127
    2228:	57 e4       	ldi	r21, 0x47	; 71
    222a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    222e:	18 16       	cp	r1, r24
    2230:	4c f5       	brge	.+82     	; 0x2284 <LCD_sendCommand+0x522>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2232:	6d a9       	ldd	r22, Y+53	; 0x35
    2234:	7e a9       	ldd	r23, Y+54	; 0x36
    2236:	8f a9       	ldd	r24, Y+55	; 0x37
    2238:	98 ad       	ldd	r25, Y+56	; 0x38
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	40 e2       	ldi	r20, 0x20	; 32
    2240:	51 e4       	ldi	r21, 0x41	; 65
    2242:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2246:	dc 01       	movw	r26, r24
    2248:	cb 01       	movw	r24, r22
    224a:	bc 01       	movw	r22, r24
    224c:	cd 01       	movw	r24, r26
    224e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2252:	dc 01       	movw	r26, r24
    2254:	cb 01       	movw	r24, r22
    2256:	98 ab       	std	Y+48, r25	; 0x30
    2258:	8f a7       	std	Y+47, r24	; 0x2f
    225a:	0f c0       	rjmp	.+30     	; 0x227a <LCD_sendCommand+0x518>
    225c:	89 e1       	ldi	r24, 0x19	; 25
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	9e a7       	std	Y+46, r25	; 0x2e
    2262:	8d a7       	std	Y+45, r24	; 0x2d
    2264:	8d a5       	ldd	r24, Y+45	; 0x2d
    2266:	9e a5       	ldd	r25, Y+46	; 0x2e
    2268:	01 97       	sbiw	r24, 0x01	; 1
    226a:	f1 f7       	brne	.-4      	; 0x2268 <LCD_sendCommand+0x506>
    226c:	9e a7       	std	Y+46, r25	; 0x2e
    226e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2270:	8f a5       	ldd	r24, Y+47	; 0x2f
    2272:	98 a9       	ldd	r25, Y+48	; 0x30
    2274:	01 97       	sbiw	r24, 0x01	; 1
    2276:	98 ab       	std	Y+48, r25	; 0x30
    2278:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    227a:	8f a5       	ldd	r24, Y+47	; 0x2f
    227c:	98 a9       	ldd	r25, Y+48	; 0x30
    227e:	00 97       	sbiw	r24, 0x00	; 0
    2280:	69 f7       	brne	.-38     	; 0x225c <LCD_sendCommand+0x4fa>
    2282:	14 c0       	rjmp	.+40     	; 0x22ac <LCD_sendCommand+0x54a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2284:	69 a9       	ldd	r22, Y+49	; 0x31
    2286:	7a a9       	ldd	r23, Y+50	; 0x32
    2288:	8b a9       	ldd	r24, Y+51	; 0x33
    228a:	9c a9       	ldd	r25, Y+52	; 0x34
    228c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	98 ab       	std	Y+48, r25	; 0x30
    2296:	8f a7       	std	Y+47, r24	; 0x2f
    2298:	8f a5       	ldd	r24, Y+47	; 0x2f
    229a:	98 a9       	ldd	r25, Y+48	; 0x30
    229c:	9c a7       	std	Y+44, r25	; 0x2c
    229e:	8b a7       	std	Y+43, r24	; 0x2b
    22a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    22a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    22a4:	01 97       	sbiw	r24, 0x01	; 1
    22a6:	f1 f7       	brne	.-4      	; 0x22a4 <LCD_sendCommand+0x542>
    22a8:	9c a7       	std	Y+44, r25	; 0x2c
    22aa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	DIO_vWritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    22ac:	83 e0       	ldi	r24, 0x03	; 3
    22ae:	62 e0       	ldi	r22, 0x02	; 2
    22b0:	41 e0       	ldi	r20, 0x01	; 1
    22b2:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_vWritePin>
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	a0 e8       	ldi	r26, 0x80	; 128
    22bc:	bf e3       	ldi	r27, 0x3F	; 63
    22be:	8f a3       	std	Y+39, r24	; 0x27
    22c0:	98 a7       	std	Y+40, r25	; 0x28
    22c2:	a9 a7       	std	Y+41, r26	; 0x29
    22c4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c6:	6f a1       	ldd	r22, Y+39	; 0x27
    22c8:	78 a5       	ldd	r23, Y+40	; 0x28
    22ca:	89 a5       	ldd	r24, Y+41	; 0x29
    22cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	4a e7       	ldi	r20, 0x7A	; 122
    22d4:	53 e4       	ldi	r21, 0x43	; 67
    22d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	8b a3       	std	Y+35, r24	; 0x23
    22e0:	9c a3       	std	Y+36, r25	; 0x24
    22e2:	ad a3       	std	Y+37, r26	; 0x25
    22e4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22e6:	6b a1       	ldd	r22, Y+35	; 0x23
    22e8:	7c a1       	ldd	r23, Y+36	; 0x24
    22ea:	8d a1       	ldd	r24, Y+37	; 0x25
    22ec:	9e a1       	ldd	r25, Y+38	; 0x26
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	40 e8       	ldi	r20, 0x80	; 128
    22f4:	5f e3       	ldi	r21, 0x3F	; 63
    22f6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22fa:	88 23       	and	r24, r24
    22fc:	2c f4       	brge	.+10     	; 0x2308 <LCD_sendCommand+0x5a6>
		__ticks = 1;
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	9a a3       	std	Y+34, r25	; 0x22
    2304:	89 a3       	std	Y+33, r24	; 0x21
    2306:	3f c0       	rjmp	.+126    	; 0x2386 <LCD_sendCommand+0x624>
	else if (__tmp > 65535)
    2308:	6b a1       	ldd	r22, Y+35	; 0x23
    230a:	7c a1       	ldd	r23, Y+36	; 0x24
    230c:	8d a1       	ldd	r24, Y+37	; 0x25
    230e:	9e a1       	ldd	r25, Y+38	; 0x26
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	3f ef       	ldi	r19, 0xFF	; 255
    2314:	4f e7       	ldi	r20, 0x7F	; 127
    2316:	57 e4       	ldi	r21, 0x47	; 71
    2318:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    231c:	18 16       	cp	r1, r24
    231e:	4c f5       	brge	.+82     	; 0x2372 <LCD_sendCommand+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2320:	6f a1       	ldd	r22, Y+39	; 0x27
    2322:	78 a5       	ldd	r23, Y+40	; 0x28
    2324:	89 a5       	ldd	r24, Y+41	; 0x29
    2326:	9a a5       	ldd	r25, Y+42	; 0x2a
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	40 e2       	ldi	r20, 0x20	; 32
    232e:	51 e4       	ldi	r21, 0x41	; 65
    2330:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	bc 01       	movw	r22, r24
    233a:	cd 01       	movw	r24, r26
    233c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	9a a3       	std	Y+34, r25	; 0x22
    2346:	89 a3       	std	Y+33, r24	; 0x21
    2348:	0f c0       	rjmp	.+30     	; 0x2368 <LCD_sendCommand+0x606>
    234a:	89 e1       	ldi	r24, 0x19	; 25
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	98 a3       	std	Y+32, r25	; 0x20
    2350:	8f 8f       	std	Y+31, r24	; 0x1f
    2352:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2354:	98 a1       	ldd	r25, Y+32	; 0x20
    2356:	01 97       	sbiw	r24, 0x01	; 1
    2358:	f1 f7       	brne	.-4      	; 0x2356 <LCD_sendCommand+0x5f4>
    235a:	98 a3       	std	Y+32, r25	; 0x20
    235c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    235e:	89 a1       	ldd	r24, Y+33	; 0x21
    2360:	9a a1       	ldd	r25, Y+34	; 0x22
    2362:	01 97       	sbiw	r24, 0x01	; 1
    2364:	9a a3       	std	Y+34, r25	; 0x22
    2366:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2368:	89 a1       	ldd	r24, Y+33	; 0x21
    236a:	9a a1       	ldd	r25, Y+34	; 0x22
    236c:	00 97       	sbiw	r24, 0x00	; 0
    236e:	69 f7       	brne	.-38     	; 0x234a <LCD_sendCommand+0x5e8>
    2370:	14 c0       	rjmp	.+40     	; 0x239a <LCD_sendCommand+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2372:	6b a1       	ldd	r22, Y+35	; 0x23
    2374:	7c a1       	ldd	r23, Y+36	; 0x24
    2376:	8d a1       	ldd	r24, Y+37	; 0x25
    2378:	9e a1       	ldd	r25, Y+38	; 0x26
    237a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	9a a3       	std	Y+34, r25	; 0x22
    2384:	89 a3       	std	Y+33, r24	; 0x21
    2386:	89 a1       	ldd	r24, Y+33	; 0x21
    2388:	9a a1       	ldd	r25, Y+34	; 0x22
    238a:	9e 8f       	std	Y+30, r25	; 0x1e
    238c:	8d 8f       	std	Y+29, r24	; 0x1d
    238e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2390:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2392:	01 97       	sbiw	r24, 0x01	; 1
    2394:	f1 f7       	brne	.-4      	; 0x2392 <LCD_sendCommand+0x630>
    2396:	9e 8f       	std	Y+30, r25	; 0x1e
    2398:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the first 4 bits of the required command to the data bus D4 --> D7 */
	lcd_port_value = DIO_GETPortValue(LCD_DATA_PORT_ID);
    239a:	82 e0       	ldi	r24, 0x02	; 2
    239c:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_GETPortValue>
    23a0:	fe 01       	movw	r30, r28
    23a2:	ed 59       	subi	r30, 0x9D	; 157
    23a4:	ff 4f       	sbci	r31, 0xFF	; 255
    23a6:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | ((command & 0x0F) << 4);
#else
	lcd_port_value = (lcd_port_value & 0xF0) | (command & 0x0F);
    23a8:	fe 01       	movw	r30, r28
    23aa:	ed 59       	subi	r30, 0x9D	; 157
    23ac:	ff 4f       	sbci	r31, 0xFF	; 255
    23ae:	80 81       	ld	r24, Z
    23b0:	98 2f       	mov	r25, r24
    23b2:	90 7f       	andi	r25, 0xF0	; 240
    23b4:	fe 01       	movw	r30, r28
    23b6:	ec 59       	subi	r30, 0x9C	; 156
    23b8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ba:	80 81       	ld	r24, Z
    23bc:	8f 70       	andi	r24, 0x0F	; 15
    23be:	89 2b       	or	r24, r25
    23c0:	fe 01       	movw	r30, r28
    23c2:	ed 59       	subi	r30, 0x9D	; 157
    23c4:	ff 4f       	sbci	r31, 0xFF	; 255
    23c6:	80 83       	st	Z, r24
#endif
	DIO_vWritePort(LCD_DATA_PORT_ID,lcd_port_value);
    23c8:	fe 01       	movw	r30, r28
    23ca:	ed 59       	subi	r30, 0x9D	; 157
    23cc:	ff 4f       	sbci	r31, 0xFF	; 255
    23ce:	82 e0       	ldi	r24, 0x02	; 2
    23d0:	60 81       	ld	r22, Z
    23d2:	0e 94 ca 09 	call	0x1394	; 0x1394 <DIO_vWritePort>
    23d6:	80 e0       	ldi	r24, 0x00	; 0
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	a0 e8       	ldi	r26, 0x80	; 128
    23dc:	bf e3       	ldi	r27, 0x3F	; 63
    23de:	89 8f       	std	Y+25, r24	; 0x19
    23e0:	9a 8f       	std	Y+26, r25	; 0x1a
    23e2:	ab 8f       	std	Y+27, r26	; 0x1b
    23e4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23e6:	69 8d       	ldd	r22, Y+25	; 0x19
    23e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	4a e7       	ldi	r20, 0x7A	; 122
    23f4:	53 e4       	ldi	r21, 0x43	; 67
    23f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	8d 8b       	std	Y+21, r24	; 0x15
    2400:	9e 8b       	std	Y+22, r25	; 0x16
    2402:	af 8b       	std	Y+23, r26	; 0x17
    2404:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2406:	6d 89       	ldd	r22, Y+21	; 0x15
    2408:	7e 89       	ldd	r23, Y+22	; 0x16
    240a:	8f 89       	ldd	r24, Y+23	; 0x17
    240c:	98 8d       	ldd	r25, Y+24	; 0x18
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	40 e8       	ldi	r20, 0x80	; 128
    2414:	5f e3       	ldi	r21, 0x3F	; 63
    2416:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    241a:	88 23       	and	r24, r24
    241c:	2c f4       	brge	.+10     	; 0x2428 <LCD_sendCommand+0x6c6>
		__ticks = 1;
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	9c 8b       	std	Y+20, r25	; 0x14
    2424:	8b 8b       	std	Y+19, r24	; 0x13
    2426:	3f c0       	rjmp	.+126    	; 0x24a6 <LCD_sendCommand+0x744>
	else if (__tmp > 65535)
    2428:	6d 89       	ldd	r22, Y+21	; 0x15
    242a:	7e 89       	ldd	r23, Y+22	; 0x16
    242c:	8f 89       	ldd	r24, Y+23	; 0x17
    242e:	98 8d       	ldd	r25, Y+24	; 0x18
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	3f ef       	ldi	r19, 0xFF	; 255
    2434:	4f e7       	ldi	r20, 0x7F	; 127
    2436:	57 e4       	ldi	r21, 0x47	; 71
    2438:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    243c:	18 16       	cp	r1, r24
    243e:	4c f5       	brge	.+82     	; 0x2492 <LCD_sendCommand+0x730>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2440:	69 8d       	ldd	r22, Y+25	; 0x19
    2442:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2444:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2446:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	40 e2       	ldi	r20, 0x20	; 32
    244e:	51 e4       	ldi	r21, 0x41	; 65
    2450:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	bc 01       	movw	r22, r24
    245a:	cd 01       	movw	r24, r26
    245c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2460:	dc 01       	movw	r26, r24
    2462:	cb 01       	movw	r24, r22
    2464:	9c 8b       	std	Y+20, r25	; 0x14
    2466:	8b 8b       	std	Y+19, r24	; 0x13
    2468:	0f c0       	rjmp	.+30     	; 0x2488 <LCD_sendCommand+0x726>
    246a:	89 e1       	ldi	r24, 0x19	; 25
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	9a 8b       	std	Y+18, r25	; 0x12
    2470:	89 8b       	std	Y+17, r24	; 0x11
    2472:	89 89       	ldd	r24, Y+17	; 0x11
    2474:	9a 89       	ldd	r25, Y+18	; 0x12
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	f1 f7       	brne	.-4      	; 0x2476 <LCD_sendCommand+0x714>
    247a:	9a 8b       	std	Y+18, r25	; 0x12
    247c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    247e:	8b 89       	ldd	r24, Y+19	; 0x13
    2480:	9c 89       	ldd	r25, Y+20	; 0x14
    2482:	01 97       	sbiw	r24, 0x01	; 1
    2484:	9c 8b       	std	Y+20, r25	; 0x14
    2486:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2488:	8b 89       	ldd	r24, Y+19	; 0x13
    248a:	9c 89       	ldd	r25, Y+20	; 0x14
    248c:	00 97       	sbiw	r24, 0x00	; 0
    248e:	69 f7       	brne	.-38     	; 0x246a <LCD_sendCommand+0x708>
    2490:	14 c0       	rjmp	.+40     	; 0x24ba <LCD_sendCommand+0x758>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2492:	6d 89       	ldd	r22, Y+21	; 0x15
    2494:	7e 89       	ldd	r23, Y+22	; 0x16
    2496:	8f 89       	ldd	r24, Y+23	; 0x17
    2498:	98 8d       	ldd	r25, Y+24	; 0x18
    249a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	9c 8b       	std	Y+20, r25	; 0x14
    24a4:	8b 8b       	std	Y+19, r24	; 0x13
    24a6:	8b 89       	ldd	r24, Y+19	; 0x13
    24a8:	9c 89       	ldd	r25, Y+20	; 0x14
    24aa:	98 8b       	std	Y+16, r25	; 0x10
    24ac:	8f 87       	std	Y+15, r24	; 0x0f
    24ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    24b0:	98 89       	ldd	r25, Y+16	; 0x10
    24b2:	01 97       	sbiw	r24, 0x01	; 1
    24b4:	f1 f7       	brne	.-4      	; 0x24b2 <LCD_sendCommand+0x750>
    24b6:	98 8b       	std	Y+16, r25	; 0x10
    24b8:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_vWritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    24ba:	83 e0       	ldi	r24, 0x03	; 3
    24bc:	62 e0       	ldi	r22, 0x02	; 2
    24be:	40 e0       	ldi	r20, 0x00	; 0
    24c0:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_vWritePin>
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	a0 e8       	ldi	r26, 0x80	; 128
    24ca:	bf e3       	ldi	r27, 0x3F	; 63
    24cc:	8b 87       	std	Y+11, r24	; 0x0b
    24ce:	9c 87       	std	Y+12, r25	; 0x0c
    24d0:	ad 87       	std	Y+13, r26	; 0x0d
    24d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    24d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    24d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    24da:	9e 85       	ldd	r25, Y+14	; 0x0e
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	4a e7       	ldi	r20, 0x7A	; 122
    24e2:	53 e4       	ldi	r21, 0x43	; 67
    24e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	8f 83       	std	Y+7, r24	; 0x07
    24ee:	98 87       	std	Y+8, r25	; 0x08
    24f0:	a9 87       	std	Y+9, r26	; 0x09
    24f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24f4:	6f 81       	ldd	r22, Y+7	; 0x07
    24f6:	78 85       	ldd	r23, Y+8	; 0x08
    24f8:	89 85       	ldd	r24, Y+9	; 0x09
    24fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	40 e8       	ldi	r20, 0x80	; 128
    2502:	5f e3       	ldi	r21, 0x3F	; 63
    2504:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2508:	88 23       	and	r24, r24
    250a:	2c f4       	brge	.+10     	; 0x2516 <LCD_sendCommand+0x7b4>
		__ticks = 1;
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	9e 83       	std	Y+6, r25	; 0x06
    2512:	8d 83       	std	Y+5, r24	; 0x05
    2514:	3f c0       	rjmp	.+126    	; 0x2594 <LCD_sendCommand+0x832>
	else if (__tmp > 65535)
    2516:	6f 81       	ldd	r22, Y+7	; 0x07
    2518:	78 85       	ldd	r23, Y+8	; 0x08
    251a:	89 85       	ldd	r24, Y+9	; 0x09
    251c:	9a 85       	ldd	r25, Y+10	; 0x0a
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	3f ef       	ldi	r19, 0xFF	; 255
    2522:	4f e7       	ldi	r20, 0x7F	; 127
    2524:	57 e4       	ldi	r21, 0x47	; 71
    2526:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    252a:	18 16       	cp	r1, r24
    252c:	4c f5       	brge	.+82     	; 0x2580 <LCD_sendCommand+0x81e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    252e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2530:	7c 85       	ldd	r23, Y+12	; 0x0c
    2532:	8d 85       	ldd	r24, Y+13	; 0x0d
    2534:	9e 85       	ldd	r25, Y+14	; 0x0e
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	40 e2       	ldi	r20, 0x20	; 32
    253c:	51 e4       	ldi	r21, 0x41	; 65
    253e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	bc 01       	movw	r22, r24
    2548:	cd 01       	movw	r24, r26
    254a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	9e 83       	std	Y+6, r25	; 0x06
    2554:	8d 83       	std	Y+5, r24	; 0x05
    2556:	0f c0       	rjmp	.+30     	; 0x2576 <LCD_sendCommand+0x814>
    2558:	89 e1       	ldi	r24, 0x19	; 25
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	9c 83       	std	Y+4, r25	; 0x04
    255e:	8b 83       	std	Y+3, r24	; 0x03
    2560:	8b 81       	ldd	r24, Y+3	; 0x03
    2562:	9c 81       	ldd	r25, Y+4	; 0x04
    2564:	01 97       	sbiw	r24, 0x01	; 1
    2566:	f1 f7       	brne	.-4      	; 0x2564 <LCD_sendCommand+0x802>
    2568:	9c 83       	std	Y+4, r25	; 0x04
    256a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    256c:	8d 81       	ldd	r24, Y+5	; 0x05
    256e:	9e 81       	ldd	r25, Y+6	; 0x06
    2570:	01 97       	sbiw	r24, 0x01	; 1
    2572:	9e 83       	std	Y+6, r25	; 0x06
    2574:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2576:	8d 81       	ldd	r24, Y+5	; 0x05
    2578:	9e 81       	ldd	r25, Y+6	; 0x06
    257a:	00 97       	sbiw	r24, 0x00	; 0
    257c:	69 f7       	brne	.-38     	; 0x2558 <LCD_sendCommand+0x7f6>
    257e:	14 c0       	rjmp	.+40     	; 0x25a8 <LCD_sendCommand+0x846>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2580:	6f 81       	ldd	r22, Y+7	; 0x07
    2582:	78 85       	ldd	r23, Y+8	; 0x08
    2584:	89 85       	ldd	r24, Y+9	; 0x09
    2586:	9a 85       	ldd	r25, Y+10	; 0x0a
    2588:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	9e 83       	std	Y+6, r25	; 0x06
    2592:	8d 83       	std	Y+5, r24	; 0x05
    2594:	8d 81       	ldd	r24, Y+5	; 0x05
    2596:	9e 81       	ldd	r25, Y+6	; 0x06
    2598:	9a 83       	std	Y+2, r25	; 0x02
    259a:	89 83       	std	Y+1, r24	; 0x01
    259c:	89 81       	ldd	r24, Y+1	; 0x01
    259e:	9a 81       	ldd	r25, Y+2	; 0x02
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	f1 f7       	brne	.-4      	; 0x25a0 <LCD_sendCommand+0x83e>
    25a4:	9a 83       	std	Y+2, r25	; 0x02
    25a6:	89 83       	std	Y+1, r24	; 0x01
	DIO_vWritePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_vWritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    25a8:	cc 59       	subi	r28, 0x9C	; 156
    25aa:	df 4f       	sbci	r29, 0xFF	; 255
    25ac:	0f b6       	in	r0, 0x3f	; 63
    25ae:	f8 94       	cli
    25b0:	de bf       	out	0x3e, r29	; 62
    25b2:	0f be       	out	0x3f, r0	; 63
    25b4:	cd bf       	out	0x3d, r28	; 61
    25b6:	cf 91       	pop	r28
    25b8:	df 91       	pop	r29
    25ba:	1f 91       	pop	r17
    25bc:	0f 91       	pop	r16
    25be:	08 95       	ret

000025c0 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    25c0:	0f 93       	push	r16
    25c2:	1f 93       	push	r17
    25c4:	df 93       	push	r29
    25c6:	cf 93       	push	r28
    25c8:	cd b7       	in	r28, 0x3d	; 61
    25ca:	de b7       	in	r29, 0x3e	; 62
    25cc:	c4 56       	subi	r28, 0x64	; 100
    25ce:	d0 40       	sbci	r29, 0x00	; 0
    25d0:	0f b6       	in	r0, 0x3f	; 63
    25d2:	f8 94       	cli
    25d4:	de bf       	out	0x3e, r29	; 62
    25d6:	0f be       	out	0x3f, r0	; 63
    25d8:	cd bf       	out	0x3d, r28	; 61
    25da:	fe 01       	movw	r30, r28
    25dc:	ec 59       	subi	r30, 0x9C	; 156
    25de:	ff 4f       	sbci	r31, 0xFF	; 255
    25e0:	80 83       	st	Z, r24
	uint8 lcd_port_value = 0;
    25e2:	fe 01       	movw	r30, r28
    25e4:	ed 59       	subi	r30, 0x9D	; 157
    25e6:	ff 4f       	sbci	r31, 0xFF	; 255
    25e8:	10 82       	st	Z, r1
	DIO_vWritePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    25ea:	83 e0       	ldi	r24, 0x03	; 3
    25ec:	60 e0       	ldi	r22, 0x00	; 0
    25ee:	41 e0       	ldi	r20, 0x01	; 1
    25f0:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_vWritePin>
	DIO_vWritePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    25f4:	83 e0       	ldi	r24, 0x03	; 3
    25f6:	61 e0       	ldi	r22, 0x01	; 1
    25f8:	40 e0       	ldi	r20, 0x00	; 0
    25fa:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_vWritePin>
    25fe:	fe 01       	movw	r30, r28
    2600:	e1 5a       	subi	r30, 0xA1	; 161
    2602:	ff 4f       	sbci	r31, 0xFF	; 255
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	a0 e8       	ldi	r26, 0x80	; 128
    260a:	bf e3       	ldi	r27, 0x3F	; 63
    260c:	80 83       	st	Z, r24
    260e:	91 83       	std	Z+1, r25	; 0x01
    2610:	a2 83       	std	Z+2, r26	; 0x02
    2612:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2614:	8e 01       	movw	r16, r28
    2616:	05 5a       	subi	r16, 0xA5	; 165
    2618:	1f 4f       	sbci	r17, 0xFF	; 255
    261a:	fe 01       	movw	r30, r28
    261c:	e1 5a       	subi	r30, 0xA1	; 161
    261e:	ff 4f       	sbci	r31, 0xFF	; 255
    2620:	60 81       	ld	r22, Z
    2622:	71 81       	ldd	r23, Z+1	; 0x01
    2624:	82 81       	ldd	r24, Z+2	; 0x02
    2626:	93 81       	ldd	r25, Z+3	; 0x03
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	4a e7       	ldi	r20, 0x7A	; 122
    262e:	53 e4       	ldi	r21, 0x43	; 67
    2630:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	f8 01       	movw	r30, r16
    263a:	80 83       	st	Z, r24
    263c:	91 83       	std	Z+1, r25	; 0x01
    263e:	a2 83       	std	Z+2, r26	; 0x02
    2640:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2642:	fe 01       	movw	r30, r28
    2644:	e5 5a       	subi	r30, 0xA5	; 165
    2646:	ff 4f       	sbci	r31, 0xFF	; 255
    2648:	60 81       	ld	r22, Z
    264a:	71 81       	ldd	r23, Z+1	; 0x01
    264c:	82 81       	ldd	r24, Z+2	; 0x02
    264e:	93 81       	ldd	r25, Z+3	; 0x03
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	40 e8       	ldi	r20, 0x80	; 128
    2656:	5f e3       	ldi	r21, 0x3F	; 63
    2658:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    265c:	88 23       	and	r24, r24
    265e:	44 f4       	brge	.+16     	; 0x2670 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    2660:	fe 01       	movw	r30, r28
    2662:	e7 5a       	subi	r30, 0xA7	; 167
    2664:	ff 4f       	sbci	r31, 0xFF	; 255
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	91 83       	std	Z+1, r25	; 0x01
    266c:	80 83       	st	Z, r24
    266e:	64 c0       	rjmp	.+200    	; 0x2738 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    2670:	fe 01       	movw	r30, r28
    2672:	e5 5a       	subi	r30, 0xA5	; 165
    2674:	ff 4f       	sbci	r31, 0xFF	; 255
    2676:	60 81       	ld	r22, Z
    2678:	71 81       	ldd	r23, Z+1	; 0x01
    267a:	82 81       	ldd	r24, Z+2	; 0x02
    267c:	93 81       	ldd	r25, Z+3	; 0x03
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	3f ef       	ldi	r19, 0xFF	; 255
    2682:	4f e7       	ldi	r20, 0x7F	; 127
    2684:	57 e4       	ldi	r21, 0x47	; 71
    2686:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    268a:	18 16       	cp	r1, r24
    268c:	0c f0       	brlt	.+2      	; 0x2690 <LCD_displayCharacter+0xd0>
    268e:	43 c0       	rjmp	.+134    	; 0x2716 <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2690:	fe 01       	movw	r30, r28
    2692:	e1 5a       	subi	r30, 0xA1	; 161
    2694:	ff 4f       	sbci	r31, 0xFF	; 255
    2696:	60 81       	ld	r22, Z
    2698:	71 81       	ldd	r23, Z+1	; 0x01
    269a:	82 81       	ldd	r24, Z+2	; 0x02
    269c:	93 81       	ldd	r25, Z+3	; 0x03
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	40 e2       	ldi	r20, 0x20	; 32
    26a4:	51 e4       	ldi	r21, 0x41	; 65
    26a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	8e 01       	movw	r16, r28
    26b0:	07 5a       	subi	r16, 0xA7	; 167
    26b2:	1f 4f       	sbci	r17, 0xFF	; 255
    26b4:	bc 01       	movw	r22, r24
    26b6:	cd 01       	movw	r24, r26
    26b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26bc:	dc 01       	movw	r26, r24
    26be:	cb 01       	movw	r24, r22
    26c0:	f8 01       	movw	r30, r16
    26c2:	91 83       	std	Z+1, r25	; 0x01
    26c4:	80 83       	st	Z, r24
    26c6:	1f c0       	rjmp	.+62     	; 0x2706 <LCD_displayCharacter+0x146>
    26c8:	fe 01       	movw	r30, r28
    26ca:	e9 5a       	subi	r30, 0xA9	; 169
    26cc:	ff 4f       	sbci	r31, 0xFF	; 255
    26ce:	89 e1       	ldi	r24, 0x19	; 25
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	91 83       	std	Z+1, r25	; 0x01
    26d4:	80 83       	st	Z, r24
    26d6:	fe 01       	movw	r30, r28
    26d8:	e9 5a       	subi	r30, 0xA9	; 169
    26da:	ff 4f       	sbci	r31, 0xFF	; 255
    26dc:	80 81       	ld	r24, Z
    26de:	91 81       	ldd	r25, Z+1	; 0x01
    26e0:	01 97       	sbiw	r24, 0x01	; 1
    26e2:	f1 f7       	brne	.-4      	; 0x26e0 <LCD_displayCharacter+0x120>
    26e4:	fe 01       	movw	r30, r28
    26e6:	e9 5a       	subi	r30, 0xA9	; 169
    26e8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ea:	91 83       	std	Z+1, r25	; 0x01
    26ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ee:	de 01       	movw	r26, r28
    26f0:	a7 5a       	subi	r26, 0xA7	; 167
    26f2:	bf 4f       	sbci	r27, 0xFF	; 255
    26f4:	fe 01       	movw	r30, r28
    26f6:	e7 5a       	subi	r30, 0xA7	; 167
    26f8:	ff 4f       	sbci	r31, 0xFF	; 255
    26fa:	80 81       	ld	r24, Z
    26fc:	91 81       	ldd	r25, Z+1	; 0x01
    26fe:	01 97       	sbiw	r24, 0x01	; 1
    2700:	11 96       	adiw	r26, 0x01	; 1
    2702:	9c 93       	st	X, r25
    2704:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2706:	fe 01       	movw	r30, r28
    2708:	e7 5a       	subi	r30, 0xA7	; 167
    270a:	ff 4f       	sbci	r31, 0xFF	; 255
    270c:	80 81       	ld	r24, Z
    270e:	91 81       	ldd	r25, Z+1	; 0x01
    2710:	00 97       	sbiw	r24, 0x00	; 0
    2712:	d1 f6       	brne	.-76     	; 0x26c8 <LCD_displayCharacter+0x108>
    2714:	27 c0       	rjmp	.+78     	; 0x2764 <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2716:	8e 01       	movw	r16, r28
    2718:	07 5a       	subi	r16, 0xA7	; 167
    271a:	1f 4f       	sbci	r17, 0xFF	; 255
    271c:	fe 01       	movw	r30, r28
    271e:	e5 5a       	subi	r30, 0xA5	; 165
    2720:	ff 4f       	sbci	r31, 0xFF	; 255
    2722:	60 81       	ld	r22, Z
    2724:	71 81       	ldd	r23, Z+1	; 0x01
    2726:	82 81       	ldd	r24, Z+2	; 0x02
    2728:	93 81       	ldd	r25, Z+3	; 0x03
    272a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    272e:	dc 01       	movw	r26, r24
    2730:	cb 01       	movw	r24, r22
    2732:	f8 01       	movw	r30, r16
    2734:	91 83       	std	Z+1, r25	; 0x01
    2736:	80 83       	st	Z, r24
    2738:	de 01       	movw	r26, r28
    273a:	ab 5a       	subi	r26, 0xAB	; 171
    273c:	bf 4f       	sbci	r27, 0xFF	; 255
    273e:	fe 01       	movw	r30, r28
    2740:	e7 5a       	subi	r30, 0xA7	; 167
    2742:	ff 4f       	sbci	r31, 0xFF	; 255
    2744:	80 81       	ld	r24, Z
    2746:	91 81       	ldd	r25, Z+1	; 0x01
    2748:	8d 93       	st	X+, r24
    274a:	9c 93       	st	X, r25
    274c:	fe 01       	movw	r30, r28
    274e:	eb 5a       	subi	r30, 0xAB	; 171
    2750:	ff 4f       	sbci	r31, 0xFF	; 255
    2752:	80 81       	ld	r24, Z
    2754:	91 81       	ldd	r25, Z+1	; 0x01
    2756:	01 97       	sbiw	r24, 0x01	; 1
    2758:	f1 f7       	brne	.-4      	; 0x2756 <LCD_displayCharacter+0x196>
    275a:	fe 01       	movw	r30, r28
    275c:	eb 5a       	subi	r30, 0xAB	; 171
    275e:	ff 4f       	sbci	r31, 0xFF	; 255
    2760:	91 83       	std	Z+1, r25	; 0x01
    2762:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	DIO_vWritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2764:	83 e0       	ldi	r24, 0x03	; 3
    2766:	62 e0       	ldi	r22, 0x02	; 2
    2768:	41 e0       	ldi	r20, 0x01	; 1
    276a:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_vWritePin>
    276e:	fe 01       	movw	r30, r28
    2770:	ef 5a       	subi	r30, 0xAF	; 175
    2772:	ff 4f       	sbci	r31, 0xFF	; 255
    2774:	80 e0       	ldi	r24, 0x00	; 0
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	a0 e8       	ldi	r26, 0x80	; 128
    277a:	bf e3       	ldi	r27, 0x3F	; 63
    277c:	80 83       	st	Z, r24
    277e:	91 83       	std	Z+1, r25	; 0x01
    2780:	a2 83       	std	Z+2, r26	; 0x02
    2782:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2784:	8e 01       	movw	r16, r28
    2786:	03 5b       	subi	r16, 0xB3	; 179
    2788:	1f 4f       	sbci	r17, 0xFF	; 255
    278a:	fe 01       	movw	r30, r28
    278c:	ef 5a       	subi	r30, 0xAF	; 175
    278e:	ff 4f       	sbci	r31, 0xFF	; 255
    2790:	60 81       	ld	r22, Z
    2792:	71 81       	ldd	r23, Z+1	; 0x01
    2794:	82 81       	ldd	r24, Z+2	; 0x02
    2796:	93 81       	ldd	r25, Z+3	; 0x03
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	4a e7       	ldi	r20, 0x7A	; 122
    279e:	53 e4       	ldi	r21, 0x43	; 67
    27a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	f8 01       	movw	r30, r16
    27aa:	80 83       	st	Z, r24
    27ac:	91 83       	std	Z+1, r25	; 0x01
    27ae:	a2 83       	std	Z+2, r26	; 0x02
    27b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27b2:	fe 01       	movw	r30, r28
    27b4:	e3 5b       	subi	r30, 0xB3	; 179
    27b6:	ff 4f       	sbci	r31, 0xFF	; 255
    27b8:	60 81       	ld	r22, Z
    27ba:	71 81       	ldd	r23, Z+1	; 0x01
    27bc:	82 81       	ldd	r24, Z+2	; 0x02
    27be:	93 81       	ldd	r25, Z+3	; 0x03
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	40 e8       	ldi	r20, 0x80	; 128
    27c6:	5f e3       	ldi	r21, 0x3F	; 63
    27c8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    27cc:	88 23       	and	r24, r24
    27ce:	44 f4       	brge	.+16     	; 0x27e0 <LCD_displayCharacter+0x220>
		__ticks = 1;
    27d0:	fe 01       	movw	r30, r28
    27d2:	e5 5b       	subi	r30, 0xB5	; 181
    27d4:	ff 4f       	sbci	r31, 0xFF	; 255
    27d6:	81 e0       	ldi	r24, 0x01	; 1
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	91 83       	std	Z+1, r25	; 0x01
    27dc:	80 83       	st	Z, r24
    27de:	64 c0       	rjmp	.+200    	; 0x28a8 <LCD_displayCharacter+0x2e8>
	else if (__tmp > 65535)
    27e0:	fe 01       	movw	r30, r28
    27e2:	e3 5b       	subi	r30, 0xB3	; 179
    27e4:	ff 4f       	sbci	r31, 0xFF	; 255
    27e6:	60 81       	ld	r22, Z
    27e8:	71 81       	ldd	r23, Z+1	; 0x01
    27ea:	82 81       	ldd	r24, Z+2	; 0x02
    27ec:	93 81       	ldd	r25, Z+3	; 0x03
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	3f ef       	ldi	r19, 0xFF	; 255
    27f2:	4f e7       	ldi	r20, 0x7F	; 127
    27f4:	57 e4       	ldi	r21, 0x47	; 71
    27f6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    27fa:	18 16       	cp	r1, r24
    27fc:	0c f0       	brlt	.+2      	; 0x2800 <LCD_displayCharacter+0x240>
    27fe:	43 c0       	rjmp	.+134    	; 0x2886 <LCD_displayCharacter+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2800:	fe 01       	movw	r30, r28
    2802:	ef 5a       	subi	r30, 0xAF	; 175
    2804:	ff 4f       	sbci	r31, 0xFF	; 255
    2806:	60 81       	ld	r22, Z
    2808:	71 81       	ldd	r23, Z+1	; 0x01
    280a:	82 81       	ldd	r24, Z+2	; 0x02
    280c:	93 81       	ldd	r25, Z+3	; 0x03
    280e:	20 e0       	ldi	r18, 0x00	; 0
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	40 e2       	ldi	r20, 0x20	; 32
    2814:	51 e4       	ldi	r21, 0x41	; 65
    2816:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    281a:	dc 01       	movw	r26, r24
    281c:	cb 01       	movw	r24, r22
    281e:	8e 01       	movw	r16, r28
    2820:	05 5b       	subi	r16, 0xB5	; 181
    2822:	1f 4f       	sbci	r17, 0xFF	; 255
    2824:	bc 01       	movw	r22, r24
    2826:	cd 01       	movw	r24, r26
    2828:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    282c:	dc 01       	movw	r26, r24
    282e:	cb 01       	movw	r24, r22
    2830:	f8 01       	movw	r30, r16
    2832:	91 83       	std	Z+1, r25	; 0x01
    2834:	80 83       	st	Z, r24
    2836:	1f c0       	rjmp	.+62     	; 0x2876 <LCD_displayCharacter+0x2b6>
    2838:	fe 01       	movw	r30, r28
    283a:	e7 5b       	subi	r30, 0xB7	; 183
    283c:	ff 4f       	sbci	r31, 0xFF	; 255
    283e:	89 e1       	ldi	r24, 0x19	; 25
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	91 83       	std	Z+1, r25	; 0x01
    2844:	80 83       	st	Z, r24
    2846:	fe 01       	movw	r30, r28
    2848:	e7 5b       	subi	r30, 0xB7	; 183
    284a:	ff 4f       	sbci	r31, 0xFF	; 255
    284c:	80 81       	ld	r24, Z
    284e:	91 81       	ldd	r25, Z+1	; 0x01
    2850:	01 97       	sbiw	r24, 0x01	; 1
    2852:	f1 f7       	brne	.-4      	; 0x2850 <LCD_displayCharacter+0x290>
    2854:	fe 01       	movw	r30, r28
    2856:	e7 5b       	subi	r30, 0xB7	; 183
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	91 83       	std	Z+1, r25	; 0x01
    285c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    285e:	de 01       	movw	r26, r28
    2860:	a5 5b       	subi	r26, 0xB5	; 181
    2862:	bf 4f       	sbci	r27, 0xFF	; 255
    2864:	fe 01       	movw	r30, r28
    2866:	e5 5b       	subi	r30, 0xB5	; 181
    2868:	ff 4f       	sbci	r31, 0xFF	; 255
    286a:	80 81       	ld	r24, Z
    286c:	91 81       	ldd	r25, Z+1	; 0x01
    286e:	01 97       	sbiw	r24, 0x01	; 1
    2870:	11 96       	adiw	r26, 0x01	; 1
    2872:	9c 93       	st	X, r25
    2874:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2876:	fe 01       	movw	r30, r28
    2878:	e5 5b       	subi	r30, 0xB5	; 181
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	80 81       	ld	r24, Z
    287e:	91 81       	ldd	r25, Z+1	; 0x01
    2880:	00 97       	sbiw	r24, 0x00	; 0
    2882:	d1 f6       	brne	.-76     	; 0x2838 <LCD_displayCharacter+0x278>
    2884:	27 c0       	rjmp	.+78     	; 0x28d4 <LCD_displayCharacter+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2886:	8e 01       	movw	r16, r28
    2888:	05 5b       	subi	r16, 0xB5	; 181
    288a:	1f 4f       	sbci	r17, 0xFF	; 255
    288c:	fe 01       	movw	r30, r28
    288e:	e3 5b       	subi	r30, 0xB3	; 179
    2890:	ff 4f       	sbci	r31, 0xFF	; 255
    2892:	60 81       	ld	r22, Z
    2894:	71 81       	ldd	r23, Z+1	; 0x01
    2896:	82 81       	ldd	r24, Z+2	; 0x02
    2898:	93 81       	ldd	r25, Z+3	; 0x03
    289a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    289e:	dc 01       	movw	r26, r24
    28a0:	cb 01       	movw	r24, r22
    28a2:	f8 01       	movw	r30, r16
    28a4:	91 83       	std	Z+1, r25	; 0x01
    28a6:	80 83       	st	Z, r24
    28a8:	de 01       	movw	r26, r28
    28aa:	a9 5b       	subi	r26, 0xB9	; 185
    28ac:	bf 4f       	sbci	r27, 0xFF	; 255
    28ae:	fe 01       	movw	r30, r28
    28b0:	e5 5b       	subi	r30, 0xB5	; 181
    28b2:	ff 4f       	sbci	r31, 0xFF	; 255
    28b4:	80 81       	ld	r24, Z
    28b6:	91 81       	ldd	r25, Z+1	; 0x01
    28b8:	8d 93       	st	X+, r24
    28ba:	9c 93       	st	X, r25
    28bc:	fe 01       	movw	r30, r28
    28be:	e9 5b       	subi	r30, 0xB9	; 185
    28c0:	ff 4f       	sbci	r31, 0xFF	; 255
    28c2:	80 81       	ld	r24, Z
    28c4:	91 81       	ldd	r25, Z+1	; 0x01
    28c6:	01 97       	sbiw	r24, 0x01	; 1
    28c8:	f1 f7       	brne	.-4      	; 0x28c6 <LCD_displayCharacter+0x306>
    28ca:	fe 01       	movw	r30, r28
    28cc:	e9 5b       	subi	r30, 0xB9	; 185
    28ce:	ff 4f       	sbci	r31, 0xFF	; 255
    28d0:	91 83       	std	Z+1, r25	; 0x01
    28d2:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if (LCD_DATA_BITS_MODE == 4)
	/* out the last 4 bits of the required data to the data bus D4 --> D7 */
	lcd_port_value = DIO_GETPortValue(LCD_DATA_PORT_ID);
    28d4:	82 e0       	ldi	r24, 0x02	; 2
    28d6:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_GETPortValue>
    28da:	fe 01       	movw	r30, r28
    28dc:	ed 59       	subi	r30, 0x9D	; 157
    28de:	ff 4f       	sbci	r31, 0xFF	; 255
    28e0:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | (data & 0xF0);
#else
	lcd_port_value = (lcd_port_value & 0xF0) | ((data & 0xF0) >> 4);
    28e2:	fe 01       	movw	r30, r28
    28e4:	ed 59       	subi	r30, 0x9D	; 157
    28e6:	ff 4f       	sbci	r31, 0xFF	; 255
    28e8:	80 81       	ld	r24, Z
    28ea:	98 2f       	mov	r25, r24
    28ec:	90 7f       	andi	r25, 0xF0	; 240
    28ee:	fe 01       	movw	r30, r28
    28f0:	ec 59       	subi	r30, 0x9C	; 156
    28f2:	ff 4f       	sbci	r31, 0xFF	; 255
    28f4:	80 81       	ld	r24, Z
    28f6:	82 95       	swap	r24
    28f8:	8f 70       	andi	r24, 0x0F	; 15
    28fa:	89 2b       	or	r24, r25
    28fc:	fe 01       	movw	r30, r28
    28fe:	ed 59       	subi	r30, 0x9D	; 157
    2900:	ff 4f       	sbci	r31, 0xFF	; 255
    2902:	80 83       	st	Z, r24
#endif
	DIO_vWritePort(LCD_DATA_PORT_ID,lcd_port_value);
    2904:	fe 01       	movw	r30, r28
    2906:	ed 59       	subi	r30, 0x9D	; 157
    2908:	ff 4f       	sbci	r31, 0xFF	; 255
    290a:	82 e0       	ldi	r24, 0x02	; 2
    290c:	60 81       	ld	r22, Z
    290e:	0e 94 ca 09 	call	0x1394	; 0x1394 <DIO_vWritePort>
    2912:	fe 01       	movw	r30, r28
    2914:	ed 5b       	subi	r30, 0xBD	; 189
    2916:	ff 4f       	sbci	r31, 0xFF	; 255
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	a0 e8       	ldi	r26, 0x80	; 128
    291e:	bf e3       	ldi	r27, 0x3F	; 63
    2920:	80 83       	st	Z, r24
    2922:	91 83       	std	Z+1, r25	; 0x01
    2924:	a2 83       	std	Z+2, r26	; 0x02
    2926:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2928:	8e 01       	movw	r16, r28
    292a:	01 5c       	subi	r16, 0xC1	; 193
    292c:	1f 4f       	sbci	r17, 0xFF	; 255
    292e:	fe 01       	movw	r30, r28
    2930:	ed 5b       	subi	r30, 0xBD	; 189
    2932:	ff 4f       	sbci	r31, 0xFF	; 255
    2934:	60 81       	ld	r22, Z
    2936:	71 81       	ldd	r23, Z+1	; 0x01
    2938:	82 81       	ldd	r24, Z+2	; 0x02
    293a:	93 81       	ldd	r25, Z+3	; 0x03
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	4a e7       	ldi	r20, 0x7A	; 122
    2942:	53 e4       	ldi	r21, 0x43	; 67
    2944:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	f8 01       	movw	r30, r16
    294e:	80 83       	st	Z, r24
    2950:	91 83       	std	Z+1, r25	; 0x01
    2952:	a2 83       	std	Z+2, r26	; 0x02
    2954:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2956:	fe 01       	movw	r30, r28
    2958:	ff 96       	adiw	r30, 0x3f	; 63
    295a:	60 81       	ld	r22, Z
    295c:	71 81       	ldd	r23, Z+1	; 0x01
    295e:	82 81       	ldd	r24, Z+2	; 0x02
    2960:	93 81       	ldd	r25, Z+3	; 0x03
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	40 e8       	ldi	r20, 0x80	; 128
    2968:	5f e3       	ldi	r21, 0x3F	; 63
    296a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    296e:	88 23       	and	r24, r24
    2970:	2c f4       	brge	.+10     	; 0x297c <LCD_displayCharacter+0x3bc>
		__ticks = 1;
    2972:	81 e0       	ldi	r24, 0x01	; 1
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	9e af       	std	Y+62, r25	; 0x3e
    2978:	8d af       	std	Y+61, r24	; 0x3d
    297a:	46 c0       	rjmp	.+140    	; 0x2a08 <LCD_displayCharacter+0x448>
	else if (__tmp > 65535)
    297c:	fe 01       	movw	r30, r28
    297e:	ff 96       	adiw	r30, 0x3f	; 63
    2980:	60 81       	ld	r22, Z
    2982:	71 81       	ldd	r23, Z+1	; 0x01
    2984:	82 81       	ldd	r24, Z+2	; 0x02
    2986:	93 81       	ldd	r25, Z+3	; 0x03
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	3f ef       	ldi	r19, 0xFF	; 255
    298c:	4f e7       	ldi	r20, 0x7F	; 127
    298e:	57 e4       	ldi	r21, 0x47	; 71
    2990:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2994:	18 16       	cp	r1, r24
    2996:	64 f5       	brge	.+88     	; 0x29f0 <LCD_displayCharacter+0x430>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2998:	fe 01       	movw	r30, r28
    299a:	ed 5b       	subi	r30, 0xBD	; 189
    299c:	ff 4f       	sbci	r31, 0xFF	; 255
    299e:	60 81       	ld	r22, Z
    29a0:	71 81       	ldd	r23, Z+1	; 0x01
    29a2:	82 81       	ldd	r24, Z+2	; 0x02
    29a4:	93 81       	ldd	r25, Z+3	; 0x03
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	40 e2       	ldi	r20, 0x20	; 32
    29ac:	51 e4       	ldi	r21, 0x41	; 65
    29ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	bc 01       	movw	r22, r24
    29b8:	cd 01       	movw	r24, r26
    29ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	9e af       	std	Y+62, r25	; 0x3e
    29c4:	8d af       	std	Y+61, r24	; 0x3d
    29c6:	0f c0       	rjmp	.+30     	; 0x29e6 <LCD_displayCharacter+0x426>
    29c8:	89 e1       	ldi	r24, 0x19	; 25
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	9c af       	std	Y+60, r25	; 0x3c
    29ce:	8b af       	std	Y+59, r24	; 0x3b
    29d0:	8b ad       	ldd	r24, Y+59	; 0x3b
    29d2:	9c ad       	ldd	r25, Y+60	; 0x3c
    29d4:	01 97       	sbiw	r24, 0x01	; 1
    29d6:	f1 f7       	brne	.-4      	; 0x29d4 <LCD_displayCharacter+0x414>
    29d8:	9c af       	std	Y+60, r25	; 0x3c
    29da:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29dc:	8d ad       	ldd	r24, Y+61	; 0x3d
    29de:	9e ad       	ldd	r25, Y+62	; 0x3e
    29e0:	01 97       	sbiw	r24, 0x01	; 1
    29e2:	9e af       	std	Y+62, r25	; 0x3e
    29e4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    29e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    29ea:	00 97       	sbiw	r24, 0x00	; 0
    29ec:	69 f7       	brne	.-38     	; 0x29c8 <LCD_displayCharacter+0x408>
    29ee:	16 c0       	rjmp	.+44     	; 0x2a1c <LCD_displayCharacter+0x45c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f0:	fe 01       	movw	r30, r28
    29f2:	ff 96       	adiw	r30, 0x3f	; 63
    29f4:	60 81       	ld	r22, Z
    29f6:	71 81       	ldd	r23, Z+1	; 0x01
    29f8:	82 81       	ldd	r24, Z+2	; 0x02
    29fa:	93 81       	ldd	r25, Z+3	; 0x03
    29fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a00:	dc 01       	movw	r26, r24
    2a02:	cb 01       	movw	r24, r22
    2a04:	9e af       	std	Y+62, r25	; 0x3e
    2a06:	8d af       	std	Y+61, r24	; 0x3d
    2a08:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a0a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a0c:	9a af       	std	Y+58, r25	; 0x3a
    2a0e:	89 af       	std	Y+57, r24	; 0x39
    2a10:	89 ad       	ldd	r24, Y+57	; 0x39
    2a12:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a14:	01 97       	sbiw	r24, 0x01	; 1
    2a16:	f1 f7       	brne	.-4      	; 0x2a14 <LCD_displayCharacter+0x454>
    2a18:	9a af       	std	Y+58, r25	; 0x3a
    2a1a:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_vWritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2a1c:	83 e0       	ldi	r24, 0x03	; 3
    2a1e:	62 e0       	ldi	r22, 0x02	; 2
    2a20:	40 e0       	ldi	r20, 0x00	; 0
    2a22:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_vWritePin>
    2a26:	80 e0       	ldi	r24, 0x00	; 0
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	a0 e8       	ldi	r26, 0x80	; 128
    2a2c:	bf e3       	ldi	r27, 0x3F	; 63
    2a2e:	8d ab       	std	Y+53, r24	; 0x35
    2a30:	9e ab       	std	Y+54, r25	; 0x36
    2a32:	af ab       	std	Y+55, r26	; 0x37
    2a34:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a36:	6d a9       	ldd	r22, Y+53	; 0x35
    2a38:	7e a9       	ldd	r23, Y+54	; 0x36
    2a3a:	8f a9       	ldd	r24, Y+55	; 0x37
    2a3c:	98 ad       	ldd	r25, Y+56	; 0x38
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	4a e7       	ldi	r20, 0x7A	; 122
    2a44:	53 e4       	ldi	r21, 0x43	; 67
    2a46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	89 ab       	std	Y+49, r24	; 0x31
    2a50:	9a ab       	std	Y+50, r25	; 0x32
    2a52:	ab ab       	std	Y+51, r26	; 0x33
    2a54:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a56:	69 a9       	ldd	r22, Y+49	; 0x31
    2a58:	7a a9       	ldd	r23, Y+50	; 0x32
    2a5a:	8b a9       	ldd	r24, Y+51	; 0x33
    2a5c:	9c a9       	ldd	r25, Y+52	; 0x34
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	40 e8       	ldi	r20, 0x80	; 128
    2a64:	5f e3       	ldi	r21, 0x3F	; 63
    2a66:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2a6a:	88 23       	and	r24, r24
    2a6c:	2c f4       	brge	.+10     	; 0x2a78 <LCD_displayCharacter+0x4b8>
		__ticks = 1;
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	98 ab       	std	Y+48, r25	; 0x30
    2a74:	8f a7       	std	Y+47, r24	; 0x2f
    2a76:	3f c0       	rjmp	.+126    	; 0x2af6 <LCD_displayCharacter+0x536>
	else if (__tmp > 65535)
    2a78:	69 a9       	ldd	r22, Y+49	; 0x31
    2a7a:	7a a9       	ldd	r23, Y+50	; 0x32
    2a7c:	8b a9       	ldd	r24, Y+51	; 0x33
    2a7e:	9c a9       	ldd	r25, Y+52	; 0x34
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	3f ef       	ldi	r19, 0xFF	; 255
    2a84:	4f e7       	ldi	r20, 0x7F	; 127
    2a86:	57 e4       	ldi	r21, 0x47	; 71
    2a88:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2a8c:	18 16       	cp	r1, r24
    2a8e:	4c f5       	brge	.+82     	; 0x2ae2 <LCD_displayCharacter+0x522>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a90:	6d a9       	ldd	r22, Y+53	; 0x35
    2a92:	7e a9       	ldd	r23, Y+54	; 0x36
    2a94:	8f a9       	ldd	r24, Y+55	; 0x37
    2a96:	98 ad       	ldd	r25, Y+56	; 0x38
    2a98:	20 e0       	ldi	r18, 0x00	; 0
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	40 e2       	ldi	r20, 0x20	; 32
    2a9e:	51 e4       	ldi	r21, 0x41	; 65
    2aa0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2aa4:	dc 01       	movw	r26, r24
    2aa6:	cb 01       	movw	r24, r22
    2aa8:	bc 01       	movw	r22, r24
    2aaa:	cd 01       	movw	r24, r26
    2aac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	98 ab       	std	Y+48, r25	; 0x30
    2ab6:	8f a7       	std	Y+47, r24	; 0x2f
    2ab8:	0f c0       	rjmp	.+30     	; 0x2ad8 <LCD_displayCharacter+0x518>
    2aba:	89 e1       	ldi	r24, 0x19	; 25
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	9e a7       	std	Y+46, r25	; 0x2e
    2ac0:	8d a7       	std	Y+45, r24	; 0x2d
    2ac2:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ac4:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ac6:	01 97       	sbiw	r24, 0x01	; 1
    2ac8:	f1 f7       	brne	.-4      	; 0x2ac6 <LCD_displayCharacter+0x506>
    2aca:	9e a7       	std	Y+46, r25	; 0x2e
    2acc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ace:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ad0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ad2:	01 97       	sbiw	r24, 0x01	; 1
    2ad4:	98 ab       	std	Y+48, r25	; 0x30
    2ad6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ad8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ada:	98 a9       	ldd	r25, Y+48	; 0x30
    2adc:	00 97       	sbiw	r24, 0x00	; 0
    2ade:	69 f7       	brne	.-38     	; 0x2aba <LCD_displayCharacter+0x4fa>
    2ae0:	14 c0       	rjmp	.+40     	; 0x2b0a <LCD_displayCharacter+0x54a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ae2:	69 a9       	ldd	r22, Y+49	; 0x31
    2ae4:	7a a9       	ldd	r23, Y+50	; 0x32
    2ae6:	8b a9       	ldd	r24, Y+51	; 0x33
    2ae8:	9c a9       	ldd	r25, Y+52	; 0x34
    2aea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2aee:	dc 01       	movw	r26, r24
    2af0:	cb 01       	movw	r24, r22
    2af2:	98 ab       	std	Y+48, r25	; 0x30
    2af4:	8f a7       	std	Y+47, r24	; 0x2f
    2af6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2af8:	98 a9       	ldd	r25, Y+48	; 0x30
    2afa:	9c a7       	std	Y+44, r25	; 0x2c
    2afc:	8b a7       	std	Y+43, r24	; 0x2b
    2afe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b00:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b02:	01 97       	sbiw	r24, 0x01	; 1
    2b04:	f1 f7       	brne	.-4      	; 0x2b02 <LCD_displayCharacter+0x542>
    2b06:	9c a7       	std	Y+44, r25	; 0x2c
    2b08:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	DIO_vWritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2b0a:	83 e0       	ldi	r24, 0x03	; 3
    2b0c:	62 e0       	ldi	r22, 0x02	; 2
    2b0e:	41 e0       	ldi	r20, 0x01	; 1
    2b10:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_vWritePin>
    2b14:	80 e0       	ldi	r24, 0x00	; 0
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	a0 e8       	ldi	r26, 0x80	; 128
    2b1a:	bf e3       	ldi	r27, 0x3F	; 63
    2b1c:	8f a3       	std	Y+39, r24	; 0x27
    2b1e:	98 a7       	std	Y+40, r25	; 0x28
    2b20:	a9 a7       	std	Y+41, r26	; 0x29
    2b22:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b24:	6f a1       	ldd	r22, Y+39	; 0x27
    2b26:	78 a5       	ldd	r23, Y+40	; 0x28
    2b28:	89 a5       	ldd	r24, Y+41	; 0x29
    2b2a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	4a e7       	ldi	r20, 0x7A	; 122
    2b32:	53 e4       	ldi	r21, 0x43	; 67
    2b34:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b38:	dc 01       	movw	r26, r24
    2b3a:	cb 01       	movw	r24, r22
    2b3c:	8b a3       	std	Y+35, r24	; 0x23
    2b3e:	9c a3       	std	Y+36, r25	; 0x24
    2b40:	ad a3       	std	Y+37, r26	; 0x25
    2b42:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b44:	6b a1       	ldd	r22, Y+35	; 0x23
    2b46:	7c a1       	ldd	r23, Y+36	; 0x24
    2b48:	8d a1       	ldd	r24, Y+37	; 0x25
    2b4a:	9e a1       	ldd	r25, Y+38	; 0x26
    2b4c:	20 e0       	ldi	r18, 0x00	; 0
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	40 e8       	ldi	r20, 0x80	; 128
    2b52:	5f e3       	ldi	r21, 0x3F	; 63
    2b54:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2b58:	88 23       	and	r24, r24
    2b5a:	2c f4       	brge	.+10     	; 0x2b66 <LCD_displayCharacter+0x5a6>
		__ticks = 1;
    2b5c:	81 e0       	ldi	r24, 0x01	; 1
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	9a a3       	std	Y+34, r25	; 0x22
    2b62:	89 a3       	std	Y+33, r24	; 0x21
    2b64:	3f c0       	rjmp	.+126    	; 0x2be4 <LCD_displayCharacter+0x624>
	else if (__tmp > 65535)
    2b66:	6b a1       	ldd	r22, Y+35	; 0x23
    2b68:	7c a1       	ldd	r23, Y+36	; 0x24
    2b6a:	8d a1       	ldd	r24, Y+37	; 0x25
    2b6c:	9e a1       	ldd	r25, Y+38	; 0x26
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	3f ef       	ldi	r19, 0xFF	; 255
    2b72:	4f e7       	ldi	r20, 0x7F	; 127
    2b74:	57 e4       	ldi	r21, 0x47	; 71
    2b76:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b7a:	18 16       	cp	r1, r24
    2b7c:	4c f5       	brge	.+82     	; 0x2bd0 <LCD_displayCharacter+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b7e:	6f a1       	ldd	r22, Y+39	; 0x27
    2b80:	78 a5       	ldd	r23, Y+40	; 0x28
    2b82:	89 a5       	ldd	r24, Y+41	; 0x29
    2b84:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b86:	20 e0       	ldi	r18, 0x00	; 0
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	40 e2       	ldi	r20, 0x20	; 32
    2b8c:	51 e4       	ldi	r21, 0x41	; 65
    2b8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b92:	dc 01       	movw	r26, r24
    2b94:	cb 01       	movw	r24, r22
    2b96:	bc 01       	movw	r22, r24
    2b98:	cd 01       	movw	r24, r26
    2b9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	9a a3       	std	Y+34, r25	; 0x22
    2ba4:	89 a3       	std	Y+33, r24	; 0x21
    2ba6:	0f c0       	rjmp	.+30     	; 0x2bc6 <LCD_displayCharacter+0x606>
    2ba8:	89 e1       	ldi	r24, 0x19	; 25
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	98 a3       	std	Y+32, r25	; 0x20
    2bae:	8f 8f       	std	Y+31, r24	; 0x1f
    2bb0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bb2:	98 a1       	ldd	r25, Y+32	; 0x20
    2bb4:	01 97       	sbiw	r24, 0x01	; 1
    2bb6:	f1 f7       	brne	.-4      	; 0x2bb4 <LCD_displayCharacter+0x5f4>
    2bb8:	98 a3       	std	Y+32, r25	; 0x20
    2bba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bbc:	89 a1       	ldd	r24, Y+33	; 0x21
    2bbe:	9a a1       	ldd	r25, Y+34	; 0x22
    2bc0:	01 97       	sbiw	r24, 0x01	; 1
    2bc2:	9a a3       	std	Y+34, r25	; 0x22
    2bc4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bc6:	89 a1       	ldd	r24, Y+33	; 0x21
    2bc8:	9a a1       	ldd	r25, Y+34	; 0x22
    2bca:	00 97       	sbiw	r24, 0x00	; 0
    2bcc:	69 f7       	brne	.-38     	; 0x2ba8 <LCD_displayCharacter+0x5e8>
    2bce:	14 c0       	rjmp	.+40     	; 0x2bf8 <LCD_displayCharacter+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bd0:	6b a1       	ldd	r22, Y+35	; 0x23
    2bd2:	7c a1       	ldd	r23, Y+36	; 0x24
    2bd4:	8d a1       	ldd	r24, Y+37	; 0x25
    2bd6:	9e a1       	ldd	r25, Y+38	; 0x26
    2bd8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	9a a3       	std	Y+34, r25	; 0x22
    2be2:	89 a3       	std	Y+33, r24	; 0x21
    2be4:	89 a1       	ldd	r24, Y+33	; 0x21
    2be6:	9a a1       	ldd	r25, Y+34	; 0x22
    2be8:	9e 8f       	std	Y+30, r25	; 0x1e
    2bea:	8d 8f       	std	Y+29, r24	; 0x1d
    2bec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bf0:	01 97       	sbiw	r24, 0x01	; 1
    2bf2:	f1 f7       	brne	.-4      	; 0x2bf0 <LCD_displayCharacter+0x630>
    2bf4:	9e 8f       	std	Y+30, r25	; 0x1e
    2bf6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the first 4 bits of the required data to the data bus D4 --> D7 */
	lcd_port_value = DIO_GETPortValue(LCD_DATA_PORT_ID);
    2bf8:	82 e0       	ldi	r24, 0x02	; 2
    2bfa:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_GETPortValue>
    2bfe:	fe 01       	movw	r30, r28
    2c00:	ed 59       	subi	r30, 0x9D	; 157
    2c02:	ff 4f       	sbci	r31, 0xFF	; 255
    2c04:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | ((data & 0x0F) << 4);
#else
	lcd_port_value = (lcd_port_value & 0xF0) | (data & 0x0F);
    2c06:	fe 01       	movw	r30, r28
    2c08:	ed 59       	subi	r30, 0x9D	; 157
    2c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0c:	80 81       	ld	r24, Z
    2c0e:	98 2f       	mov	r25, r24
    2c10:	90 7f       	andi	r25, 0xF0	; 240
    2c12:	fe 01       	movw	r30, r28
    2c14:	ec 59       	subi	r30, 0x9C	; 156
    2c16:	ff 4f       	sbci	r31, 0xFF	; 255
    2c18:	80 81       	ld	r24, Z
    2c1a:	8f 70       	andi	r24, 0x0F	; 15
    2c1c:	89 2b       	or	r24, r25
    2c1e:	fe 01       	movw	r30, r28
    2c20:	ed 59       	subi	r30, 0x9D	; 157
    2c22:	ff 4f       	sbci	r31, 0xFF	; 255
    2c24:	80 83       	st	Z, r24
#endif
	DIO_vWritePort(LCD_DATA_PORT_ID,lcd_port_value);
    2c26:	fe 01       	movw	r30, r28
    2c28:	ed 59       	subi	r30, 0x9D	; 157
    2c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2c:	82 e0       	ldi	r24, 0x02	; 2
    2c2e:	60 81       	ld	r22, Z
    2c30:	0e 94 ca 09 	call	0x1394	; 0x1394 <DIO_vWritePort>
    2c34:	80 e0       	ldi	r24, 0x00	; 0
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	a0 e8       	ldi	r26, 0x80	; 128
    2c3a:	bf e3       	ldi	r27, 0x3F	; 63
    2c3c:	89 8f       	std	Y+25, r24	; 0x19
    2c3e:	9a 8f       	std	Y+26, r25	; 0x1a
    2c40:	ab 8f       	std	Y+27, r26	; 0x1b
    2c42:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c44:	69 8d       	ldd	r22, Y+25	; 0x19
    2c46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	4a e7       	ldi	r20, 0x7A	; 122
    2c52:	53 e4       	ldi	r21, 0x43	; 67
    2c54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	8d 8b       	std	Y+21, r24	; 0x15
    2c5e:	9e 8b       	std	Y+22, r25	; 0x16
    2c60:	af 8b       	std	Y+23, r26	; 0x17
    2c62:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c64:	6d 89       	ldd	r22, Y+21	; 0x15
    2c66:	7e 89       	ldd	r23, Y+22	; 0x16
    2c68:	8f 89       	ldd	r24, Y+23	; 0x17
    2c6a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c6c:	20 e0       	ldi	r18, 0x00	; 0
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	40 e8       	ldi	r20, 0x80	; 128
    2c72:	5f e3       	ldi	r21, 0x3F	; 63
    2c74:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2c78:	88 23       	and	r24, r24
    2c7a:	2c f4       	brge	.+10     	; 0x2c86 <LCD_displayCharacter+0x6c6>
		__ticks = 1;
    2c7c:	81 e0       	ldi	r24, 0x01	; 1
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	9c 8b       	std	Y+20, r25	; 0x14
    2c82:	8b 8b       	std	Y+19, r24	; 0x13
    2c84:	3f c0       	rjmp	.+126    	; 0x2d04 <LCD_displayCharacter+0x744>
	else if (__tmp > 65535)
    2c86:	6d 89       	ldd	r22, Y+21	; 0x15
    2c88:	7e 89       	ldd	r23, Y+22	; 0x16
    2c8a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c8c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c8e:	20 e0       	ldi	r18, 0x00	; 0
    2c90:	3f ef       	ldi	r19, 0xFF	; 255
    2c92:	4f e7       	ldi	r20, 0x7F	; 127
    2c94:	57 e4       	ldi	r21, 0x47	; 71
    2c96:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2c9a:	18 16       	cp	r1, r24
    2c9c:	4c f5       	brge	.+82     	; 0x2cf0 <LCD_displayCharacter+0x730>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c9e:	69 8d       	ldd	r22, Y+25	; 0x19
    2ca0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ca2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ca4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ca6:	20 e0       	ldi	r18, 0x00	; 0
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	40 e2       	ldi	r20, 0x20	; 32
    2cac:	51 e4       	ldi	r21, 0x41	; 65
    2cae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	cb 01       	movw	r24, r22
    2cb6:	bc 01       	movw	r22, r24
    2cb8:	cd 01       	movw	r24, r26
    2cba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cbe:	dc 01       	movw	r26, r24
    2cc0:	cb 01       	movw	r24, r22
    2cc2:	9c 8b       	std	Y+20, r25	; 0x14
    2cc4:	8b 8b       	std	Y+19, r24	; 0x13
    2cc6:	0f c0       	rjmp	.+30     	; 0x2ce6 <LCD_displayCharacter+0x726>
    2cc8:	89 e1       	ldi	r24, 0x19	; 25
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	9a 8b       	std	Y+18, r25	; 0x12
    2cce:	89 8b       	std	Y+17, r24	; 0x11
    2cd0:	89 89       	ldd	r24, Y+17	; 0x11
    2cd2:	9a 89       	ldd	r25, Y+18	; 0x12
    2cd4:	01 97       	sbiw	r24, 0x01	; 1
    2cd6:	f1 f7       	brne	.-4      	; 0x2cd4 <LCD_displayCharacter+0x714>
    2cd8:	9a 8b       	std	Y+18, r25	; 0x12
    2cda:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cdc:	8b 89       	ldd	r24, Y+19	; 0x13
    2cde:	9c 89       	ldd	r25, Y+20	; 0x14
    2ce0:	01 97       	sbiw	r24, 0x01	; 1
    2ce2:	9c 8b       	std	Y+20, r25	; 0x14
    2ce4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ce8:	9c 89       	ldd	r25, Y+20	; 0x14
    2cea:	00 97       	sbiw	r24, 0x00	; 0
    2cec:	69 f7       	brne	.-38     	; 0x2cc8 <LCD_displayCharacter+0x708>
    2cee:	14 c0       	rjmp	.+40     	; 0x2d18 <LCD_displayCharacter+0x758>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf0:	6d 89       	ldd	r22, Y+21	; 0x15
    2cf2:	7e 89       	ldd	r23, Y+22	; 0x16
    2cf4:	8f 89       	ldd	r24, Y+23	; 0x17
    2cf6:	98 8d       	ldd	r25, Y+24	; 0x18
    2cf8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cfc:	dc 01       	movw	r26, r24
    2cfe:	cb 01       	movw	r24, r22
    2d00:	9c 8b       	std	Y+20, r25	; 0x14
    2d02:	8b 8b       	std	Y+19, r24	; 0x13
    2d04:	8b 89       	ldd	r24, Y+19	; 0x13
    2d06:	9c 89       	ldd	r25, Y+20	; 0x14
    2d08:	98 8b       	std	Y+16, r25	; 0x10
    2d0a:	8f 87       	std	Y+15, r24	; 0x0f
    2d0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d0e:	98 89       	ldd	r25, Y+16	; 0x10
    2d10:	01 97       	sbiw	r24, 0x01	; 1
    2d12:	f1 f7       	brne	.-4      	; 0x2d10 <LCD_displayCharacter+0x750>
    2d14:	98 8b       	std	Y+16, r25	; 0x10
    2d16:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_vWritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2d18:	83 e0       	ldi	r24, 0x03	; 3
    2d1a:	62 e0       	ldi	r22, 0x02	; 2
    2d1c:	40 e0       	ldi	r20, 0x00	; 0
    2d1e:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_vWritePin>
    2d22:	80 e0       	ldi	r24, 0x00	; 0
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	a0 e8       	ldi	r26, 0x80	; 128
    2d28:	bf e3       	ldi	r27, 0x3F	; 63
    2d2a:	8b 87       	std	Y+11, r24	; 0x0b
    2d2c:	9c 87       	std	Y+12, r25	; 0x0c
    2d2e:	ad 87       	std	Y+13, r26	; 0x0d
    2d30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d32:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d34:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d36:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d38:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d3a:	20 e0       	ldi	r18, 0x00	; 0
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	4a e7       	ldi	r20, 0x7A	; 122
    2d40:	53 e4       	ldi	r21, 0x43	; 67
    2d42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d46:	dc 01       	movw	r26, r24
    2d48:	cb 01       	movw	r24, r22
    2d4a:	8f 83       	std	Y+7, r24	; 0x07
    2d4c:	98 87       	std	Y+8, r25	; 0x08
    2d4e:	a9 87       	std	Y+9, r26	; 0x09
    2d50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d52:	6f 81       	ldd	r22, Y+7	; 0x07
    2d54:	78 85       	ldd	r23, Y+8	; 0x08
    2d56:	89 85       	ldd	r24, Y+9	; 0x09
    2d58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d5a:	20 e0       	ldi	r18, 0x00	; 0
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	40 e8       	ldi	r20, 0x80	; 128
    2d60:	5f e3       	ldi	r21, 0x3F	; 63
    2d62:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2d66:	88 23       	and	r24, r24
    2d68:	2c f4       	brge	.+10     	; 0x2d74 <LCD_displayCharacter+0x7b4>
		__ticks = 1;
    2d6a:	81 e0       	ldi	r24, 0x01	; 1
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	9e 83       	std	Y+6, r25	; 0x06
    2d70:	8d 83       	std	Y+5, r24	; 0x05
    2d72:	3f c0       	rjmp	.+126    	; 0x2df2 <LCD_displayCharacter+0x832>
	else if (__tmp > 65535)
    2d74:	6f 81       	ldd	r22, Y+7	; 0x07
    2d76:	78 85       	ldd	r23, Y+8	; 0x08
    2d78:	89 85       	ldd	r24, Y+9	; 0x09
    2d7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	3f ef       	ldi	r19, 0xFF	; 255
    2d80:	4f e7       	ldi	r20, 0x7F	; 127
    2d82:	57 e4       	ldi	r21, 0x47	; 71
    2d84:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2d88:	18 16       	cp	r1, r24
    2d8a:	4c f5       	brge	.+82     	; 0x2dde <LCD_displayCharacter+0x81e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d90:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d92:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d94:	20 e0       	ldi	r18, 0x00	; 0
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	40 e2       	ldi	r20, 0x20	; 32
    2d9a:	51 e4       	ldi	r21, 0x41	; 65
    2d9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2da0:	dc 01       	movw	r26, r24
    2da2:	cb 01       	movw	r24, r22
    2da4:	bc 01       	movw	r22, r24
    2da6:	cd 01       	movw	r24, r26
    2da8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dac:	dc 01       	movw	r26, r24
    2dae:	cb 01       	movw	r24, r22
    2db0:	9e 83       	std	Y+6, r25	; 0x06
    2db2:	8d 83       	std	Y+5, r24	; 0x05
    2db4:	0f c0       	rjmp	.+30     	; 0x2dd4 <LCD_displayCharacter+0x814>
    2db6:	89 e1       	ldi	r24, 0x19	; 25
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	9c 83       	std	Y+4, r25	; 0x04
    2dbc:	8b 83       	std	Y+3, r24	; 0x03
    2dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc2:	01 97       	sbiw	r24, 0x01	; 1
    2dc4:	f1 f7       	brne	.-4      	; 0x2dc2 <LCD_displayCharacter+0x802>
    2dc6:	9c 83       	std	Y+4, r25	; 0x04
    2dc8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dca:	8d 81       	ldd	r24, Y+5	; 0x05
    2dcc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dce:	01 97       	sbiw	r24, 0x01	; 1
    2dd0:	9e 83       	std	Y+6, r25	; 0x06
    2dd2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd6:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd8:	00 97       	sbiw	r24, 0x00	; 0
    2dda:	69 f7       	brne	.-38     	; 0x2db6 <LCD_displayCharacter+0x7f6>
    2ddc:	14 c0       	rjmp	.+40     	; 0x2e06 <LCD_displayCharacter+0x846>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dde:	6f 81       	ldd	r22, Y+7	; 0x07
    2de0:	78 85       	ldd	r23, Y+8	; 0x08
    2de2:	89 85       	ldd	r24, Y+9	; 0x09
    2de4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2de6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dea:	dc 01       	movw	r26, r24
    2dec:	cb 01       	movw	r24, r22
    2dee:	9e 83       	std	Y+6, r25	; 0x06
    2df0:	8d 83       	std	Y+5, r24	; 0x05
    2df2:	8d 81       	ldd	r24, Y+5	; 0x05
    2df4:	9e 81       	ldd	r25, Y+6	; 0x06
    2df6:	9a 83       	std	Y+2, r25	; 0x02
    2df8:	89 83       	std	Y+1, r24	; 0x01
    2dfa:	89 81       	ldd	r24, Y+1	; 0x01
    2dfc:	9a 81       	ldd	r25, Y+2	; 0x02
    2dfe:	01 97       	sbiw	r24, 0x01	; 1
    2e00:	f1 f7       	brne	.-4      	; 0x2dfe <LCD_displayCharacter+0x83e>
    2e02:	9a 83       	std	Y+2, r25	; 0x02
    2e04:	89 83       	std	Y+1, r24	; 0x01
	DIO_vWritePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_vWritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2e06:	cc 59       	subi	r28, 0x9C	; 156
    2e08:	df 4f       	sbci	r29, 0xFF	; 255
    2e0a:	0f b6       	in	r0, 0x3f	; 63
    2e0c:	f8 94       	cli
    2e0e:	de bf       	out	0x3e, r29	; 62
    2e10:	0f be       	out	0x3f, r0	; 63
    2e12:	cd bf       	out	0x3d, r28	; 61
    2e14:	cf 91       	pop	r28
    2e16:	df 91       	pop	r29
    2e18:	1f 91       	pop	r17
    2e1a:	0f 91       	pop	r16
    2e1c:	08 95       	ret

00002e1e <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2e1e:	df 93       	push	r29
    2e20:	cf 93       	push	r28
    2e22:	00 d0       	rcall	.+0      	; 0x2e24 <LCD_displayString+0x6>
    2e24:	0f 92       	push	r0
    2e26:	cd b7       	in	r28, 0x3d	; 61
    2e28:	de b7       	in	r29, 0x3e	; 62
    2e2a:	9b 83       	std	Y+3, r25	; 0x03
    2e2c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2e2e:	19 82       	std	Y+1, r1	; 0x01
    2e30:	0e c0       	rjmp	.+28     	; 0x2e4e <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2e32:	89 81       	ldd	r24, Y+1	; 0x01
    2e34:	28 2f       	mov	r18, r24
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	8a 81       	ldd	r24, Y+2	; 0x02
    2e3a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e3c:	fc 01       	movw	r30, r24
    2e3e:	e2 0f       	add	r30, r18
    2e40:	f3 1f       	adc	r31, r19
    2e42:	80 81       	ld	r24, Z
    2e44:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <LCD_displayCharacter>
		i++;
    2e48:	89 81       	ldd	r24, Y+1	; 0x01
    2e4a:	8f 5f       	subi	r24, 0xFF	; 255
    2e4c:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2e4e:	89 81       	ldd	r24, Y+1	; 0x01
    2e50:	28 2f       	mov	r18, r24
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	8a 81       	ldd	r24, Y+2	; 0x02
    2e56:	9b 81       	ldd	r25, Y+3	; 0x03
    2e58:	fc 01       	movw	r30, r24
    2e5a:	e2 0f       	add	r30, r18
    2e5c:	f3 1f       	adc	r31, r19
    2e5e:	80 81       	ld	r24, Z
    2e60:	88 23       	and	r24, r24
    2e62:	39 f7       	brne	.-50     	; 0x2e32 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    2e64:	0f 90       	pop	r0
    2e66:	0f 90       	pop	r0
    2e68:	0f 90       	pop	r0
    2e6a:	cf 91       	pop	r28
    2e6c:	df 91       	pop	r29
    2e6e:	08 95       	ret

00002e70 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2e70:	df 93       	push	r29
    2e72:	cf 93       	push	r28
    2e74:	00 d0       	rcall	.+0      	; 0x2e76 <LCD_moveCursor+0x6>
    2e76:	00 d0       	rcall	.+0      	; 0x2e78 <LCD_moveCursor+0x8>
    2e78:	0f 92       	push	r0
    2e7a:	cd b7       	in	r28, 0x3d	; 61
    2e7c:	de b7       	in	r29, 0x3e	; 62
    2e7e:	8a 83       	std	Y+2, r24	; 0x02
    2e80:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2e82:	8a 81       	ldd	r24, Y+2	; 0x02
    2e84:	28 2f       	mov	r18, r24
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	3d 83       	std	Y+5, r19	; 0x05
    2e8a:	2c 83       	std	Y+4, r18	; 0x04
    2e8c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e8e:	9d 81       	ldd	r25, Y+5	; 0x05
    2e90:	81 30       	cpi	r24, 0x01	; 1
    2e92:	91 05       	cpc	r25, r1
    2e94:	c1 f0       	breq	.+48     	; 0x2ec6 <LCD_moveCursor+0x56>
    2e96:	2c 81       	ldd	r18, Y+4	; 0x04
    2e98:	3d 81       	ldd	r19, Y+5	; 0x05
    2e9a:	22 30       	cpi	r18, 0x02	; 2
    2e9c:	31 05       	cpc	r19, r1
    2e9e:	2c f4       	brge	.+10     	; 0x2eaa <LCD_moveCursor+0x3a>
    2ea0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ea2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ea4:	00 97       	sbiw	r24, 0x00	; 0
    2ea6:	61 f0       	breq	.+24     	; 0x2ec0 <LCD_moveCursor+0x50>
    2ea8:	19 c0       	rjmp	.+50     	; 0x2edc <LCD_moveCursor+0x6c>
    2eaa:	2c 81       	ldd	r18, Y+4	; 0x04
    2eac:	3d 81       	ldd	r19, Y+5	; 0x05
    2eae:	22 30       	cpi	r18, 0x02	; 2
    2eb0:	31 05       	cpc	r19, r1
    2eb2:	69 f0       	breq	.+26     	; 0x2ece <LCD_moveCursor+0x5e>
    2eb4:	8c 81       	ldd	r24, Y+4	; 0x04
    2eb6:	9d 81       	ldd	r25, Y+5	; 0x05
    2eb8:	83 30       	cpi	r24, 0x03	; 3
    2eba:	91 05       	cpc	r25, r1
    2ebc:	61 f0       	breq	.+24     	; 0x2ed6 <LCD_moveCursor+0x66>
    2ebe:	0e c0       	rjmp	.+28     	; 0x2edc <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec2:	89 83       	std	Y+1, r24	; 0x01
    2ec4:	0b c0       	rjmp	.+22     	; 0x2edc <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec8:	80 5c       	subi	r24, 0xC0	; 192
    2eca:	89 83       	std	Y+1, r24	; 0x01
    2ecc:	07 c0       	rjmp	.+14     	; 0x2edc <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2ece:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed0:	80 5f       	subi	r24, 0xF0	; 240
    2ed2:	89 83       	std	Y+1, r24	; 0x01
    2ed4:	03 c0       	rjmp	.+6      	; 0x2edc <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed8:	80 5b       	subi	r24, 0xB0	; 176
    2eda:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2edc:	89 81       	ldd	r24, Y+1	; 0x01
    2ede:	80 68       	ori	r24, 0x80	; 128
    2ee0:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <LCD_sendCommand>
}
    2ee4:	0f 90       	pop	r0
    2ee6:	0f 90       	pop	r0
    2ee8:	0f 90       	pop	r0
    2eea:	0f 90       	pop	r0
    2eec:	0f 90       	pop	r0
    2eee:	cf 91       	pop	r28
    2ef0:	df 91       	pop	r29
    2ef2:	08 95       	ret

00002ef4 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2ef4:	df 93       	push	r29
    2ef6:	cf 93       	push	r28
    2ef8:	00 d0       	rcall	.+0      	; 0x2efa <LCD_displayStringRowColumn+0x6>
    2efa:	00 d0       	rcall	.+0      	; 0x2efc <LCD_displayStringRowColumn+0x8>
    2efc:	cd b7       	in	r28, 0x3d	; 61
    2efe:	de b7       	in	r29, 0x3e	; 62
    2f00:	89 83       	std	Y+1, r24	; 0x01
    2f02:	6a 83       	std	Y+2, r22	; 0x02
    2f04:	5c 83       	std	Y+4, r21	; 0x04
    2f06:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2f08:	89 81       	ldd	r24, Y+1	; 0x01
    2f0a:	6a 81       	ldd	r22, Y+2	; 0x02
    2f0c:	0e 94 38 17 	call	0x2e70	; 0x2e70 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2f10:	8b 81       	ldd	r24, Y+3	; 0x03
    2f12:	9c 81       	ldd	r25, Y+4	; 0x04
    2f14:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <LCD_displayString>
}
    2f18:	0f 90       	pop	r0
    2f1a:	0f 90       	pop	r0
    2f1c:	0f 90       	pop	r0
    2f1e:	0f 90       	pop	r0
    2f20:	cf 91       	pop	r28
    2f22:	df 91       	pop	r29
    2f24:	08 95       	ret

00002f26 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2f26:	df 93       	push	r29
    2f28:	cf 93       	push	r28
    2f2a:	cd b7       	in	r28, 0x3d	; 61
    2f2c:	de b7       	in	r29, 0x3e	; 62
    2f2e:	62 97       	sbiw	r28, 0x12	; 18
    2f30:	0f b6       	in	r0, 0x3f	; 63
    2f32:	f8 94       	cli
    2f34:	de bf       	out	0x3e, r29	; 62
    2f36:	0f be       	out	0x3f, r0	; 63
    2f38:	cd bf       	out	0x3d, r28	; 61
    2f3a:	9a 8b       	std	Y+18, r25	; 0x12
    2f3c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2f3e:	89 89       	ldd	r24, Y+17	; 0x11
    2f40:	9a 89       	ldd	r25, Y+18	; 0x12
    2f42:	9e 01       	movw	r18, r28
    2f44:	2f 5f       	subi	r18, 0xFF	; 255
    2f46:	3f 4f       	sbci	r19, 0xFF	; 255
    2f48:	b9 01       	movw	r22, r18
    2f4a:	4a e0       	ldi	r20, 0x0A	; 10
    2f4c:	50 e0       	ldi	r21, 0x00	; 0
    2f4e:	0e 94 ad 19 	call	0x335a	; 0x335a <itoa>
   LCD_displayString(buff); /* Display the string */
    2f52:	ce 01       	movw	r24, r28
    2f54:	01 96       	adiw	r24, 0x01	; 1
    2f56:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <LCD_displayString>
}
    2f5a:	62 96       	adiw	r28, 0x12	; 18
    2f5c:	0f b6       	in	r0, 0x3f	; 63
    2f5e:	f8 94       	cli
    2f60:	de bf       	out	0x3e, r29	; 62
    2f62:	0f be       	out	0x3f, r0	; 63
    2f64:	cd bf       	out	0x3d, r28	; 61
    2f66:	cf 91       	pop	r28
    2f68:	df 91       	pop	r29
    2f6a:	08 95       	ret

00002f6c <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2f6c:	df 93       	push	r29
    2f6e:	cf 93       	push	r28
    2f70:	cd b7       	in	r28, 0x3d	; 61
    2f72:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <LCD_sendCommand>
}
    2f7a:	cf 91       	pop	r28
    2f7c:	df 91       	pop	r29
    2f7e:	08 95       	ret

00002f80 <DcMotor_Init>:
 *********************************************************************/
#include"../MCAL/DIO_interface.h"
#include"../MCAL/PWM.h"
#include"dc_motor.h"

void DcMotor_Init(void) {
    2f80:	df 93       	push	r29
    2f82:	cf 93       	push	r28
    2f84:	cd b7       	in	r28, 0x3d	; 61
    2f86:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinDirection( Motor_IN1_PORT_ID, Motor_IN1_PIN_ID, PIN_OUTPUT);
    2f88:	81 e0       	ldi	r24, 0x01	; 1
    2f8a:	60 e0       	ldi	r22, 0x00	; 0
    2f8c:	41 e0       	ldi	r20, 0x01	; 1
    2f8e:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_vSetPinDirection>
	DIO_vSetPinDirection( Motor_IN2_PORT_ID, Motor_IN2_PIN_ID, PIN_OUTPUT);
    2f92:	81 e0       	ldi	r24, 0x01	; 1
    2f94:	61 e0       	ldi	r22, 0x01	; 1
    2f96:	41 e0       	ldi	r20, 0x01	; 1
    2f98:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_vSetPinDirection>

	DIO_vWritePin(Motor_IN1_PORT_ID, Motor_IN1_PIN_ID, LOGIC_LOW);
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	60 e0       	ldi	r22, 0x00	; 0
    2fa0:	40 e0       	ldi	r20, 0x00	; 0
    2fa2:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_vWritePin>
	DIO_vWritePin(Motor_IN2_PORT_ID, Motor_IN1_PIN_ID, LOGIC_LOW);
    2fa6:	81 e0       	ldi	r24, 0x01	; 1
    2fa8:	60 e0       	ldi	r22, 0x00	; 0
    2faa:	40 e0       	ldi	r20, 0x00	; 0
    2fac:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_vWritePin>

}
    2fb0:	cf 91       	pop	r28
    2fb2:	df 91       	pop	r29
    2fb4:	08 95       	ret

00002fb6 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state, uint8 speed) {
    2fb6:	df 93       	push	r29
    2fb8:	cf 93       	push	r28
    2fba:	00 d0       	rcall	.+0      	; 0x2fbc <DcMotor_Rotate+0x6>
    2fbc:	00 d0       	rcall	.+0      	; 0x2fbe <DcMotor_Rotate+0x8>
    2fbe:	00 d0       	rcall	.+0      	; 0x2fc0 <DcMotor_Rotate+0xa>
    2fc0:	cd b7       	in	r28, 0x3d	; 61
    2fc2:	de b7       	in	r29, 0x3e	; 62
    2fc4:	89 83       	std	Y+1, r24	; 0x01
    2fc6:	6a 83       	std	Y+2, r22	; 0x02
	switch (state) {
    2fc8:	89 81       	ldd	r24, Y+1	; 0x01
    2fca:	28 2f       	mov	r18, r24
    2fcc:	30 e0       	ldi	r19, 0x00	; 0
    2fce:	3e 83       	std	Y+6, r19	; 0x06
    2fd0:	2d 83       	std	Y+5, r18	; 0x05
    2fd2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fd6:	81 30       	cpi	r24, 0x01	; 1
    2fd8:	91 05       	cpc	r25, r1
    2fda:	a1 f0       	breq	.+40     	; 0x3004 <DcMotor_Rotate+0x4e>
    2fdc:	2d 81       	ldd	r18, Y+5	; 0x05
    2fde:	3e 81       	ldd	r19, Y+6	; 0x06
    2fe0:	22 30       	cpi	r18, 0x02	; 2
    2fe2:	31 05       	cpc	r19, r1
    2fe4:	d1 f0       	breq	.+52     	; 0x301a <DcMotor_Rotate+0x64>
    2fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fea:	00 97       	sbiw	r24, 0x00	; 0
    2fec:	01 f5       	brne	.+64     	; 0x302e <DcMotor_Rotate+0x78>
	case 0:
		DIO_vWritePin(Motor_IN1_PORT_ID, Motor_IN1_PIN_ID, LOGIC_LOW);
    2fee:	81 e0       	ldi	r24, 0x01	; 1
    2ff0:	60 e0       	ldi	r22, 0x00	; 0
    2ff2:	40 e0       	ldi	r20, 0x00	; 0
    2ff4:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_vWritePin>
		DIO_vWritePin(Motor_IN2_PORT_ID, Motor_IN1_PIN_ID, LOGIC_LOW);
    2ff8:	81 e0       	ldi	r24, 0x01	; 1
    2ffa:	60 e0       	ldi	r22, 0x00	; 0
    2ffc:	40 e0       	ldi	r20, 0x00	; 0
    2ffe:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_vWritePin>
    3002:	15 c0       	rjmp	.+42     	; 0x302e <DcMotor_Rotate+0x78>
		break;

	case 1:
		DIO_vWritePin(Motor_IN1_PORT_ID, Motor_IN1_PIN_ID, LOGIC_LOW);
    3004:	81 e0       	ldi	r24, 0x01	; 1
    3006:	60 e0       	ldi	r22, 0x00	; 0
    3008:	40 e0       	ldi	r20, 0x00	; 0
    300a:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_vWritePin>
		DIO_vWritePin(Motor_IN2_PORT_ID, Motor_IN1_PIN_ID, LOGIC_HIGH);
    300e:	81 e0       	ldi	r24, 0x01	; 1
    3010:	60 e0       	ldi	r22, 0x00	; 0
    3012:	41 e0       	ldi	r20, 0x01	; 1
    3014:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_vWritePin>
    3018:	0a c0       	rjmp	.+20     	; 0x302e <DcMotor_Rotate+0x78>
		break;

	case 2:
		DIO_vWritePin(Motor_IN1_PORT_ID, Motor_IN1_PIN_ID, LOGIC_HIGH);
    301a:	81 e0       	ldi	r24, 0x01	; 1
    301c:	60 e0       	ldi	r22, 0x00	; 0
    301e:	41 e0       	ldi	r20, 0x01	; 1
    3020:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_vWritePin>
		DIO_vWritePin(Motor_IN2_PORT_ID, Motor_IN1_PIN_ID, LOGIC_LOW);
    3024:	81 e0       	ldi	r24, 0x01	; 1
    3026:	60 e0       	ldi	r22, 0x00	; 0
    3028:	40 e0       	ldi	r20, 0x00	; 0
    302a:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_vWritePin>
		break;
	}

	switch (speed) {
    302e:	8a 81       	ldd	r24, Y+2	; 0x02
    3030:	28 2f       	mov	r18, r24
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	3c 83       	std	Y+4, r19	; 0x04
    3036:	2b 83       	std	Y+3, r18	; 0x03
    3038:	8b 81       	ldd	r24, Y+3	; 0x03
    303a:	9c 81       	ldd	r25, Y+4	; 0x04
    303c:	89 31       	cpi	r24, 0x19	; 25
    303e:	91 05       	cpc	r25, r1
    3040:	e9 f0       	breq	.+58     	; 0x307c <DcMotor_Rotate+0xc6>
    3042:	2b 81       	ldd	r18, Y+3	; 0x03
    3044:	3c 81       	ldd	r19, Y+4	; 0x04
    3046:	2a 31       	cpi	r18, 0x1A	; 26
    3048:	31 05       	cpc	r19, r1
    304a:	2c f4       	brge	.+10     	; 0x3056 <DcMotor_Rotate+0xa0>
    304c:	8b 81       	ldd	r24, Y+3	; 0x03
    304e:	9c 81       	ldd	r25, Y+4	; 0x04
    3050:	00 97       	sbiw	r24, 0x00	; 0
    3052:	61 f0       	breq	.+24     	; 0x306c <DcMotor_Rotate+0xb6>
    3054:	2a c0       	rjmp	.+84     	; 0x30aa <DcMotor_Rotate+0xf4>
    3056:	2b 81       	ldd	r18, Y+3	; 0x03
    3058:	3c 81       	ldd	r19, Y+4	; 0x04
    305a:	22 33       	cpi	r18, 0x32	; 50
    305c:	31 05       	cpc	r19, r1
    305e:	b1 f0       	breq	.+44     	; 0x308c <DcMotor_Rotate+0xd6>
    3060:	8b 81       	ldd	r24, Y+3	; 0x03
    3062:	9c 81       	ldd	r25, Y+4	; 0x04
    3064:	8b 34       	cpi	r24, 0x4B	; 75
    3066:	91 05       	cpc	r25, r1
    3068:	c9 f0       	breq	.+50     	; 0x309c <DcMotor_Rotate+0xe6>
    306a:	1f c0       	rjmp	.+62     	; 0x30aa <DcMotor_Rotate+0xf4>
	case 0:
		PWM_Generate_CHANNELA(0, 500);
    306c:	80 e0       	ldi	r24, 0x00	; 0
    306e:	44 ef       	ldi	r20, 0xF4	; 244
    3070:	51 e0       	ldi	r21, 0x01	; 1
    3072:	60 e0       	ldi	r22, 0x00	; 0
    3074:	70 e0       	ldi	r23, 0x00	; 0
    3076:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <PWM_Generate_CHANNELA>
    307a:	17 c0       	rjmp	.+46     	; 0x30aa <DcMotor_Rotate+0xf4>
		break;
	case 25:

		//the speed of motor is 25% of the maximum speed
		PWM_Generate_CHANNELA(30, 5000);
    307c:	8e e1       	ldi	r24, 0x1E	; 30
    307e:	48 e8       	ldi	r20, 0x88	; 136
    3080:	53 e1       	ldi	r21, 0x13	; 19
    3082:	60 e0       	ldi	r22, 0x00	; 0
    3084:	70 e0       	ldi	r23, 0x00	; 0
    3086:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <PWM_Generate_CHANNELA>
    308a:	0f c0       	rjmp	.+30     	; 0x30aa <DcMotor_Rotate+0xf4>
		break;
	case 50:
		// the speed of motor 50% of the maximum speed
		PWM_Generate_CHANNELA(50, 10000);
    308c:	82 e3       	ldi	r24, 0x32	; 50
    308e:	40 e1       	ldi	r20, 0x10	; 16
    3090:	57 e2       	ldi	r21, 0x27	; 39
    3092:	60 e0       	ldi	r22, 0x00	; 0
    3094:	70 e0       	ldi	r23, 0x00	; 0
    3096:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <PWM_Generate_CHANNELA>
    309a:	07 c0       	rjmp	.+14     	; 0x30aa <DcMotor_Rotate+0xf4>
		break;
	case 75:
		//the speed of motor 75% of the maximum speed
		PWM_Generate_CHANNELA(80, 20000);
    309c:	80 e5       	ldi	r24, 0x50	; 80
    309e:	40 e2       	ldi	r20, 0x20	; 32
    30a0:	5e e4       	ldi	r21, 0x4E	; 78
    30a2:	60 e0       	ldi	r22, 0x00	; 0
    30a4:	70 e0       	ldi	r23, 0x00	; 0
    30a6:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <PWM_Generate_CHANNELA>
		break;

	}
}
    30aa:	26 96       	adiw	r28, 0x06	; 6
    30ac:	0f b6       	in	r0, 0x3f	; 63
    30ae:	f8 94       	cli
    30b0:	de bf       	out	0x3e, r29	; 62
    30b2:	0f be       	out	0x3f, r0	; 63
    30b4:	cd bf       	out	0x3d, r28	; 61
    30b6:	cf 91       	pop	r28
    30b8:	df 91       	pop	r29
    30ba:	08 95       	ret

000030bc <LM35_getTemperature>:
/*
 * Description :
 * Function responsible for calculate the temperature from the ADC digital value.
 */
uint8 LM35_getTemperature(void)
{
    30bc:	df 93       	push	r29
    30be:	cf 93       	push	r28
    30c0:	00 d0       	rcall	.+0      	; 0x30c2 <LM35_getTemperature+0x6>
    30c2:	0f 92       	push	r0
    30c4:	cd b7       	in	r28, 0x3d	; 61
    30c6:	de b7       	in	r29, 0x3e	; 62
	uint8 temp_value = 0;
    30c8:	1b 82       	std	Y+3, r1	; 0x03

	uint16 adc_value = 0;
    30ca:	1a 82       	std	Y+2, r1	; 0x02
    30cc:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
    30ce:	82 e0       	ldi	r24, 0x02	; 2
    30d0:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <ADC_readChannel>
    30d4:	9a 83       	std	Y+2, r25	; 0x02
    30d6:	89 83       	std	Y+1, r24	; 0x01

	/* Calculate the temperature from the ADC value*/
	/*
	 * must be casting to dont make over flow in equation result of multiplication
	 */
	temp_value = (uint8)(((uint32)adc_value*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    30d8:	89 81       	ldd	r24, Y+1	; 0x01
    30da:	9a 81       	ldd	r25, Y+2	; 0x02
    30dc:	cc 01       	movw	r24, r24
    30de:	a0 e0       	ldi	r26, 0x00	; 0
    30e0:	b0 e0       	ldi	r27, 0x00	; 0
    30e2:	26 e9       	ldi	r18, 0x96	; 150
    30e4:	30 e0       	ldi	r19, 0x00	; 0
    30e6:	40 e0       	ldi	r20, 0x00	; 0
    30e8:	50 e0       	ldi	r21, 0x00	; 0
    30ea:	bc 01       	movw	r22, r24
    30ec:	cd 01       	movw	r24, r26
    30ee:	0e 94 29 19 	call	0x3252	; 0x3252 <__mulsi3>
    30f2:	dc 01       	movw	r26, r24
    30f4:	cb 01       	movw	r24, r22
    30f6:	bc 01       	movw	r22, r24
    30f8:	cd 01       	movw	r24, r26
    30fa:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    30fe:	dc 01       	movw	r26, r24
    3100:	cb 01       	movw	r24, r22
    3102:	bc 01       	movw	r22, r24
    3104:	cd 01       	movw	r24, r26
    3106:	2a e0       	ldi	r18, 0x0A	; 10
    3108:	37 ed       	ldi	r19, 0xD7	; 215
    310a:	43 e2       	ldi	r20, 0x23	; 35
    310c:	50 e4       	ldi	r21, 0x40	; 64
    310e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3112:	dc 01       	movw	r26, r24
    3114:	cb 01       	movw	r24, r22
    3116:	bc 01       	movw	r22, r24
    3118:	cd 01       	movw	r24, r26
    311a:	20 e0       	ldi	r18, 0x00	; 0
    311c:	30 ed       	ldi	r19, 0xD0	; 208
    311e:	4f eb       	ldi	r20, 0xBF	; 191
    3120:	54 e4       	ldi	r21, 0x44	; 68
    3122:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    3126:	dc 01       	movw	r26, r24
    3128:	cb 01       	movw	r24, r22
    312a:	bc 01       	movw	r22, r24
    312c:	cd 01       	movw	r24, r26
    312e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3132:	dc 01       	movw	r26, r24
    3134:	cb 01       	movw	r24, r22
    3136:	8b 83       	std	Y+3, r24	; 0x03

	return temp_value;
    3138:	8b 81       	ldd	r24, Y+3	; 0x03
}
    313a:	0f 90       	pop	r0
    313c:	0f 90       	pop	r0
    313e:	0f 90       	pop	r0
    3140:	cf 91       	pop	r28
    3142:	df 91       	pop	r29
    3144:	08 95       	ret

00003146 <main>:
#include"HAL/dc_motor.h"
#include"HAL/LCD.h"
#include"HAL/lm35_sensor.h"
#include"MCAL/DIO_interface.h"

int main() {
    3146:	df 93       	push	r29
    3148:	cf 93       	push	r28
    314a:	00 d0       	rcall	.+0      	; 0x314c <main+0x6>
    314c:	0f 92       	push	r0
    314e:	cd b7       	in	r28, 0x3d	; 61
    3150:	de b7       	in	r29, 0x3e	; 62
	uint8 temperature = 0;
    3152:	19 82       	std	Y+1, r1	; 0x01

	ADC_ConfigType type;
	type.prescaler = F_CPU8;
    3154:	83 e0       	ldi	r24, 0x03	; 3
    3156:	8b 83       	std	Y+3, r24	; 0x03
	type.ref_volt = internal_volatge;
    3158:	83 e0       	ldi	r24, 0x03	; 3
    315a:	8a 83       	std	Y+2, r24	; 0x02

	ADC_init(&type);
    315c:	ce 01       	movw	r24, r28
    315e:	02 96       	adiw	r24, 0x02	; 2
    3160:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <ADC_init>
	LCD_init();
    3164:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <LCD_init>
	DcMotor_Init();
    3168:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <DcMotor_Init>
	PWM_Init();
    316c:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <PWM_Init>


	while (1) {

		temperature = LM35_getTemperature();
    3170:	0e 94 5e 18 	call	0x30bc	; 0x30bc <LM35_getTemperature>
    3174:	89 83       	std	Y+1, r24	; 0x01
		LCD_displayStringRowColumn(1, 4, "temp =    C");
    3176:	20 e6       	ldi	r18, 0x60	; 96
    3178:	30 e0       	ldi	r19, 0x00	; 0
    317a:	81 e0       	ldi	r24, 0x01	; 1
    317c:	64 e0       	ldi	r22, 0x04	; 4
    317e:	a9 01       	movw	r20, r18
    3180:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <LCD_displayStringRowColumn>

		//If the temperature is less than 30C turn off fan

		if (temperature < 25) {
    3184:	89 81       	ldd	r24, Y+1	; 0x01
    3186:	89 31       	cpi	r24, 0x19	; 25
    3188:	a8 f4       	brcc	.+42     	; 0x31b4 <main+0x6e>

			LCD_displayStringRowColumn(0, 4, "Fan is OFF");
    318a:	2c e6       	ldi	r18, 0x6C	; 108
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	80 e0       	ldi	r24, 0x00	; 0
    3190:	64 e0       	ldi	r22, 0x04	; 4
    3192:	a9 01       	movw	r20, r18
    3194:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <LCD_displayStringRowColumn>
			LCD_moveCursor(1, 11);
    3198:	81 e0       	ldi	r24, 0x01	; 1
    319a:	6b e0       	ldi	r22, 0x0B	; 11
    319c:	0e 94 38 17 	call	0x2e70	; 0x2e70 <LCD_moveCursor>
			LCD_intgerToString(temperature);
    31a0:	89 81       	ldd	r24, Y+1	; 0x01
    31a2:	88 2f       	mov	r24, r24
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	0e 94 93 17 	call	0x2f26	; 0x2f26 <LCD_intgerToString>
			DcMotor_Rotate(Stop, 0);
    31aa:	80 e0       	ldi	r24, 0x00	; 0
    31ac:	60 e0       	ldi	r22, 0x00	; 0
    31ae:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <DcMotor_Rotate>
    31b2:	de cf       	rjmp	.-68     	; 0x3170 <main+0x2a>

		}

		/*If the temperature is greater than or equal 30C or less than 30 turn on the fan with 20% of its
		 maximum speed*/
		else if ((temperature >= 25) && (temperature < 30)) {
    31b4:	89 81       	ldd	r24, Y+1	; 0x01
    31b6:	89 31       	cpi	r24, 0x19	; 25
    31b8:	c0 f0       	brcs	.+48     	; 0x31ea <main+0xa4>
    31ba:	89 81       	ldd	r24, Y+1	; 0x01
    31bc:	8e 31       	cpi	r24, 0x1E	; 30
    31be:	a8 f4       	brcc	.+42     	; 0x31ea <main+0xa4>

			LCD_displayStringRowColumn(0, 4, "Fan is ON  ");
    31c0:	27 e7       	ldi	r18, 0x77	; 119
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	80 e0       	ldi	r24, 0x00	; 0
    31c6:	64 e0       	ldi	r22, 0x04	; 4
    31c8:	a9 01       	movw	r20, r18
    31ca:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <LCD_displayStringRowColumn>
			LCD_moveCursor(1, 11);
    31ce:	81 e0       	ldi	r24, 0x01	; 1
    31d0:	6b e0       	ldi	r22, 0x0B	; 11
    31d2:	0e 94 38 17 	call	0x2e70	; 0x2e70 <LCD_moveCursor>
			LCD_intgerToString(temperature);
    31d6:	89 81       	ldd	r24, Y+1	; 0x01
    31d8:	88 2f       	mov	r24, r24
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	0e 94 93 17 	call	0x2f26	; 0x2f26 <LCD_intgerToString>
			DcMotor_Rotate(Clock_Wise, 20);
    31e0:	81 e0       	ldi	r24, 0x01	; 1
    31e2:	64 e1       	ldi	r22, 0x14	; 20
    31e4:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <DcMotor_Rotate>
    31e8:	c3 cf       	rjmp	.-122    	; 0x3170 <main+0x2a>
		}

		/*If the temperature is greater than or equal 30C or less than 35 turn on the fan with 50% of its
		 maximum speed*/
	else if ((temperature >= 30) && (temperature < 35)) {
    31ea:	89 81       	ldd	r24, Y+1	; 0x01
    31ec:	8e 31       	cpi	r24, 0x1E	; 30
    31ee:	c0 f0       	brcs	.+48     	; 0x3220 <main+0xda>
    31f0:	89 81       	ldd	r24, Y+1	; 0x01
    31f2:	83 32       	cpi	r24, 0x23	; 35
    31f4:	a8 f4       	brcc	.+42     	; 0x3220 <main+0xda>

			LCD_displayStringRowColumn(0, 4, "Fan is ON");
    31f6:	23 e8       	ldi	r18, 0x83	; 131
    31f8:	30 e0       	ldi	r19, 0x00	; 0
    31fa:	80 e0       	ldi	r24, 0x00	; 0
    31fc:	64 e0       	ldi	r22, 0x04	; 4
    31fe:	a9 01       	movw	r20, r18
    3200:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <LCD_displayStringRowColumn>
			LCD_moveCursor(1, 11);
    3204:	81 e0       	ldi	r24, 0x01	; 1
    3206:	6b e0       	ldi	r22, 0x0B	; 11
    3208:	0e 94 38 17 	call	0x2e70	; 0x2e70 <LCD_moveCursor>
			LCD_intgerToString(temperature);
    320c:	89 81       	ldd	r24, Y+1	; 0x01
    320e:	88 2f       	mov	r24, r24
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	0e 94 93 17 	call	0x2f26	; 0x2f26 <LCD_intgerToString>
			DcMotor_Rotate(Clock_Wise, 50);
    3216:	81 e0       	ldi	r24, 0x01	; 1
    3218:	62 e3       	ldi	r22, 0x32	; 50
    321a:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <DcMotor_Rotate>
    321e:	a8 cf       	rjmp	.-176    	; 0x3170 <main+0x2a>
		}

		/*If the temperature is greater than or equal 35C o turn on the fan with 80% of its
		 maximum speed*/
	else if (temperature >= 35) {
    3220:	89 81       	ldd	r24, Y+1	; 0x01
    3222:	83 32       	cpi	r24, 0x23	; 35
    3224:	08 f4       	brcc	.+2      	; 0x3228 <main+0xe2>
    3226:	a4 cf       	rjmp	.-184    	; 0x3170 <main+0x2a>

			LCD_displayStringRowColumn(0, 4, "Fan is ON");
    3228:	23 e8       	ldi	r18, 0x83	; 131
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	80 e0       	ldi	r24, 0x00	; 0
    322e:	64 e0       	ldi	r22, 0x04	; 4
    3230:	a9 01       	movw	r20, r18
    3232:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <LCD_displayStringRowColumn>
			LCD_moveCursor(1, 11);
    3236:	81 e0       	ldi	r24, 0x01	; 1
    3238:	6b e0       	ldi	r22, 0x0B	; 11
    323a:	0e 94 38 17 	call	0x2e70	; 0x2e70 <LCD_moveCursor>
			LCD_intgerToString(temperature);
    323e:	89 81       	ldd	r24, Y+1	; 0x01
    3240:	88 2f       	mov	r24, r24
    3242:	90 e0       	ldi	r25, 0x00	; 0
    3244:	0e 94 93 17 	call	0x2f26	; 0x2f26 <LCD_intgerToString>
			DcMotor_Rotate(Clock_Wise, 80);
    3248:	81 e0       	ldi	r24, 0x01	; 1
    324a:	60 e5       	ldi	r22, 0x50	; 80
    324c:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <DcMotor_Rotate>
    3250:	8f cf       	rjmp	.-226    	; 0x3170 <main+0x2a>

00003252 <__mulsi3>:
    3252:	62 9f       	mul	r22, r18
    3254:	d0 01       	movw	r26, r0
    3256:	73 9f       	mul	r23, r19
    3258:	f0 01       	movw	r30, r0
    325a:	82 9f       	mul	r24, r18
    325c:	e0 0d       	add	r30, r0
    325e:	f1 1d       	adc	r31, r1
    3260:	64 9f       	mul	r22, r20
    3262:	e0 0d       	add	r30, r0
    3264:	f1 1d       	adc	r31, r1
    3266:	92 9f       	mul	r25, r18
    3268:	f0 0d       	add	r31, r0
    326a:	83 9f       	mul	r24, r19
    326c:	f0 0d       	add	r31, r0
    326e:	74 9f       	mul	r23, r20
    3270:	f0 0d       	add	r31, r0
    3272:	65 9f       	mul	r22, r21
    3274:	f0 0d       	add	r31, r0
    3276:	99 27       	eor	r25, r25
    3278:	72 9f       	mul	r23, r18
    327a:	b0 0d       	add	r27, r0
    327c:	e1 1d       	adc	r30, r1
    327e:	f9 1f       	adc	r31, r25
    3280:	63 9f       	mul	r22, r19
    3282:	b0 0d       	add	r27, r0
    3284:	e1 1d       	adc	r30, r1
    3286:	f9 1f       	adc	r31, r25
    3288:	bd 01       	movw	r22, r26
    328a:	cf 01       	movw	r24, r30
    328c:	11 24       	eor	r1, r1
    328e:	08 95       	ret

00003290 <__udivmodqi4>:
    3290:	99 1b       	sub	r25, r25
    3292:	79 e0       	ldi	r23, 0x09	; 9
    3294:	04 c0       	rjmp	.+8      	; 0x329e <__udivmodqi4_ep>

00003296 <__udivmodqi4_loop>:
    3296:	99 1f       	adc	r25, r25
    3298:	96 17       	cp	r25, r22
    329a:	08 f0       	brcs	.+2      	; 0x329e <__udivmodqi4_ep>
    329c:	96 1b       	sub	r25, r22

0000329e <__udivmodqi4_ep>:
    329e:	88 1f       	adc	r24, r24
    32a0:	7a 95       	dec	r23
    32a2:	c9 f7       	brne	.-14     	; 0x3296 <__udivmodqi4_loop>
    32a4:	80 95       	com	r24
    32a6:	08 95       	ret

000032a8 <__udivmodsi4>:
    32a8:	a1 e2       	ldi	r26, 0x21	; 33
    32aa:	1a 2e       	mov	r1, r26
    32ac:	aa 1b       	sub	r26, r26
    32ae:	bb 1b       	sub	r27, r27
    32b0:	fd 01       	movw	r30, r26
    32b2:	0d c0       	rjmp	.+26     	; 0x32ce <__udivmodsi4_ep>

000032b4 <__udivmodsi4_loop>:
    32b4:	aa 1f       	adc	r26, r26
    32b6:	bb 1f       	adc	r27, r27
    32b8:	ee 1f       	adc	r30, r30
    32ba:	ff 1f       	adc	r31, r31
    32bc:	a2 17       	cp	r26, r18
    32be:	b3 07       	cpc	r27, r19
    32c0:	e4 07       	cpc	r30, r20
    32c2:	f5 07       	cpc	r31, r21
    32c4:	20 f0       	brcs	.+8      	; 0x32ce <__udivmodsi4_ep>
    32c6:	a2 1b       	sub	r26, r18
    32c8:	b3 0b       	sbc	r27, r19
    32ca:	e4 0b       	sbc	r30, r20
    32cc:	f5 0b       	sbc	r31, r21

000032ce <__udivmodsi4_ep>:
    32ce:	66 1f       	adc	r22, r22
    32d0:	77 1f       	adc	r23, r23
    32d2:	88 1f       	adc	r24, r24
    32d4:	99 1f       	adc	r25, r25
    32d6:	1a 94       	dec	r1
    32d8:	69 f7       	brne	.-38     	; 0x32b4 <__udivmodsi4_loop>
    32da:	60 95       	com	r22
    32dc:	70 95       	com	r23
    32de:	80 95       	com	r24
    32e0:	90 95       	com	r25
    32e2:	9b 01       	movw	r18, r22
    32e4:	ac 01       	movw	r20, r24
    32e6:	bd 01       	movw	r22, r26
    32e8:	cf 01       	movw	r24, r30
    32ea:	08 95       	ret

000032ec <__prologue_saves__>:
    32ec:	2f 92       	push	r2
    32ee:	3f 92       	push	r3
    32f0:	4f 92       	push	r4
    32f2:	5f 92       	push	r5
    32f4:	6f 92       	push	r6
    32f6:	7f 92       	push	r7
    32f8:	8f 92       	push	r8
    32fa:	9f 92       	push	r9
    32fc:	af 92       	push	r10
    32fe:	bf 92       	push	r11
    3300:	cf 92       	push	r12
    3302:	df 92       	push	r13
    3304:	ef 92       	push	r14
    3306:	ff 92       	push	r15
    3308:	0f 93       	push	r16
    330a:	1f 93       	push	r17
    330c:	cf 93       	push	r28
    330e:	df 93       	push	r29
    3310:	cd b7       	in	r28, 0x3d	; 61
    3312:	de b7       	in	r29, 0x3e	; 62
    3314:	ca 1b       	sub	r28, r26
    3316:	db 0b       	sbc	r29, r27
    3318:	0f b6       	in	r0, 0x3f	; 63
    331a:	f8 94       	cli
    331c:	de bf       	out	0x3e, r29	; 62
    331e:	0f be       	out	0x3f, r0	; 63
    3320:	cd bf       	out	0x3d, r28	; 61
    3322:	09 94       	ijmp

00003324 <__epilogue_restores__>:
    3324:	2a 88       	ldd	r2, Y+18	; 0x12
    3326:	39 88       	ldd	r3, Y+17	; 0x11
    3328:	48 88       	ldd	r4, Y+16	; 0x10
    332a:	5f 84       	ldd	r5, Y+15	; 0x0f
    332c:	6e 84       	ldd	r6, Y+14	; 0x0e
    332e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3330:	8c 84       	ldd	r8, Y+12	; 0x0c
    3332:	9b 84       	ldd	r9, Y+11	; 0x0b
    3334:	aa 84       	ldd	r10, Y+10	; 0x0a
    3336:	b9 84       	ldd	r11, Y+9	; 0x09
    3338:	c8 84       	ldd	r12, Y+8	; 0x08
    333a:	df 80       	ldd	r13, Y+7	; 0x07
    333c:	ee 80       	ldd	r14, Y+6	; 0x06
    333e:	fd 80       	ldd	r15, Y+5	; 0x05
    3340:	0c 81       	ldd	r16, Y+4	; 0x04
    3342:	1b 81       	ldd	r17, Y+3	; 0x03
    3344:	aa 81       	ldd	r26, Y+2	; 0x02
    3346:	b9 81       	ldd	r27, Y+1	; 0x01
    3348:	ce 0f       	add	r28, r30
    334a:	d1 1d       	adc	r29, r1
    334c:	0f b6       	in	r0, 0x3f	; 63
    334e:	f8 94       	cli
    3350:	de bf       	out	0x3e, r29	; 62
    3352:	0f be       	out	0x3f, r0	; 63
    3354:	cd bf       	out	0x3d, r28	; 61
    3356:	ed 01       	movw	r28, r26
    3358:	08 95       	ret

0000335a <itoa>:
    335a:	fb 01       	movw	r30, r22
    335c:	9f 01       	movw	r18, r30
    335e:	e8 94       	clt
    3360:	42 30       	cpi	r20, 0x02	; 2
    3362:	c4 f0       	brlt	.+48     	; 0x3394 <itoa+0x3a>
    3364:	45 32       	cpi	r20, 0x25	; 37
    3366:	b4 f4       	brge	.+44     	; 0x3394 <itoa+0x3a>
    3368:	4a 30       	cpi	r20, 0x0A	; 10
    336a:	29 f4       	brne	.+10     	; 0x3376 <itoa+0x1c>
    336c:	97 fb       	bst	r25, 7
    336e:	1e f4       	brtc	.+6      	; 0x3376 <itoa+0x1c>
    3370:	90 95       	com	r25
    3372:	81 95       	neg	r24
    3374:	9f 4f       	sbci	r25, 0xFF	; 255
    3376:	64 2f       	mov	r22, r20
    3378:	77 27       	eor	r23, r23
    337a:	0e 94 de 19 	call	0x33bc	; 0x33bc <__udivmodhi4>
    337e:	80 5d       	subi	r24, 0xD0	; 208
    3380:	8a 33       	cpi	r24, 0x3A	; 58
    3382:	0c f0       	brlt	.+2      	; 0x3386 <itoa+0x2c>
    3384:	89 5d       	subi	r24, 0xD9	; 217
    3386:	81 93       	st	Z+, r24
    3388:	cb 01       	movw	r24, r22
    338a:	00 97       	sbiw	r24, 0x00	; 0
    338c:	a1 f7       	brne	.-24     	; 0x3376 <itoa+0x1c>
    338e:	16 f4       	brtc	.+4      	; 0x3394 <itoa+0x3a>
    3390:	5d e2       	ldi	r21, 0x2D	; 45
    3392:	51 93       	st	Z+, r21
    3394:	10 82       	st	Z, r1
    3396:	c9 01       	movw	r24, r18
    3398:	0c 94 ce 19 	jmp	0x339c	; 0x339c <strrev>

0000339c <strrev>:
    339c:	dc 01       	movw	r26, r24
    339e:	fc 01       	movw	r30, r24
    33a0:	67 2f       	mov	r22, r23
    33a2:	71 91       	ld	r23, Z+
    33a4:	77 23       	and	r23, r23
    33a6:	e1 f7       	brne	.-8      	; 0x33a0 <strrev+0x4>
    33a8:	32 97       	sbiw	r30, 0x02	; 2
    33aa:	04 c0       	rjmp	.+8      	; 0x33b4 <strrev+0x18>
    33ac:	7c 91       	ld	r23, X
    33ae:	6d 93       	st	X+, r22
    33b0:	70 83       	st	Z, r23
    33b2:	62 91       	ld	r22, -Z
    33b4:	ae 17       	cp	r26, r30
    33b6:	bf 07       	cpc	r27, r31
    33b8:	c8 f3       	brcs	.-14     	; 0x33ac <strrev+0x10>
    33ba:	08 95       	ret

000033bc <__udivmodhi4>:
    33bc:	aa 1b       	sub	r26, r26
    33be:	bb 1b       	sub	r27, r27
    33c0:	51 e1       	ldi	r21, 0x11	; 17
    33c2:	07 c0       	rjmp	.+14     	; 0x33d2 <__udivmodhi4_ep>

000033c4 <__udivmodhi4_loop>:
    33c4:	aa 1f       	adc	r26, r26
    33c6:	bb 1f       	adc	r27, r27
    33c8:	a6 17       	cp	r26, r22
    33ca:	b7 07       	cpc	r27, r23
    33cc:	10 f0       	brcs	.+4      	; 0x33d2 <__udivmodhi4_ep>
    33ce:	a6 1b       	sub	r26, r22
    33d0:	b7 0b       	sbc	r27, r23

000033d2 <__udivmodhi4_ep>:
    33d2:	88 1f       	adc	r24, r24
    33d4:	99 1f       	adc	r25, r25
    33d6:	5a 95       	dec	r21
    33d8:	a9 f7       	brne	.-22     	; 0x33c4 <__udivmodhi4_loop>
    33da:	80 95       	com	r24
    33dc:	90 95       	com	r25
    33de:	bc 01       	movw	r22, r24
    33e0:	cd 01       	movw	r24, r26
    33e2:	08 95       	ret

000033e4 <_exit>:
    33e4:	f8 94       	cli

000033e6 <__stop_program>:
    33e6:	ff cf       	rjmp	.-2      	; 0x33e6 <__stop_program>
