
pwm_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001016  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00001016  0000108a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000132c  00000000  00000000  00001098  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000010e8  00000000  00000000  000023c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e1       	ldi	r30, 0x16	; 22
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 ae 07 	call	0xf5c	; 0xf5c <main>
      7a:	0c 94 09 08 	jmp	0x1012	; 0x1012 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_vSetPinDirection>:
#include "../lib/std_types.h"
#include "DIO_interface.h"
#include "DIO_REG.h"

#define SET_BIT(REG,BIT) (REG|=(1<<BIT))
void DIO_vSetPinDirection(uint8 Copy_u8PORT, uint8 Copy_u8PinNumber,uint8 copy_u8state) {
      82:	df 93       	push	r29
      84:	cf 93       	push	r28
      86:	00 d0       	rcall	.+0      	; 0x88 <DIO_vSetPinDirection+0x6>
      88:	00 d0       	rcall	.+0      	; 0x8a <DIO_vSetPinDirection+0x8>
      8a:	0f 92       	push	r0
      8c:	cd b7       	in	r28, 0x3d	; 61
      8e:	de b7       	in	r29, 0x3e	; 62
      90:	89 83       	std	Y+1, r24	; 0x01
      92:	6a 83       	std	Y+2, r22	; 0x02
      94:	4b 83       	std	Y+3, r20	; 0x03

	if ((Copy_u8PinNumber >= NUM_OF_PINS_PER_PORT)
      96:	8a 81       	ldd	r24, Y+2	; 0x02
      98:	88 30       	cpi	r24, 0x08	; 8
      9a:	08 f0       	brcs	.+2      	; 0x9e <DIO_vSetPinDirection+0x1c>
      9c:	e5 c0       	rjmp	.+458    	; 0x268 <DIO_vSetPinDirection+0x1e6>
      9e:	89 81       	ldd	r24, Y+1	; 0x01
      a0:	84 30       	cpi	r24, 0x04	; 4
      a2:	08 f0       	brcs	.+2      	; 0xa6 <DIO_vSetPinDirection+0x24>
      a4:	e1 c0       	rjmp	.+450    	; 0x268 <DIO_vSetPinDirection+0x1e6>
			|| (Copy_u8PORT >= NUM_OF_PORTS)) {
	} else {

		switch (Copy_u8PORT) {
      a6:	89 81       	ldd	r24, Y+1	; 0x01
      a8:	28 2f       	mov	r18, r24
      aa:	30 e0       	ldi	r19, 0x00	; 0
      ac:	3d 83       	std	Y+5, r19	; 0x05
      ae:	2c 83       	std	Y+4, r18	; 0x04
      b0:	8c 81       	ldd	r24, Y+4	; 0x04
      b2:	9d 81       	ldd	r25, Y+5	; 0x05
      b4:	81 30       	cpi	r24, 0x01	; 1
      b6:	91 05       	cpc	r25, r1
      b8:	09 f4       	brne	.+2      	; 0xbc <DIO_vSetPinDirection+0x3a>
      ba:	47 c0       	rjmp	.+142    	; 0x14a <DIO_vSetPinDirection+0xc8>
      bc:	2c 81       	ldd	r18, Y+4	; 0x04
      be:	3d 81       	ldd	r19, Y+5	; 0x05
      c0:	22 30       	cpi	r18, 0x02	; 2
      c2:	31 05       	cpc	r19, r1
      c4:	2c f4       	brge	.+10     	; 0xd0 <DIO_vSetPinDirection+0x4e>
      c6:	8c 81       	ldd	r24, Y+4	; 0x04
      c8:	9d 81       	ldd	r25, Y+5	; 0x05
      ca:	00 97       	sbiw	r24, 0x00	; 0
      cc:	71 f0       	breq	.+28     	; 0xea <DIO_vSetPinDirection+0x68>
      ce:	cc c0       	rjmp	.+408    	; 0x268 <DIO_vSetPinDirection+0x1e6>
      d0:	2c 81       	ldd	r18, Y+4	; 0x04
      d2:	3d 81       	ldd	r19, Y+5	; 0x05
      d4:	22 30       	cpi	r18, 0x02	; 2
      d6:	31 05       	cpc	r19, r1
      d8:	09 f4       	brne	.+2      	; 0xdc <DIO_vSetPinDirection+0x5a>
      da:	67 c0       	rjmp	.+206    	; 0x1aa <DIO_vSetPinDirection+0x128>
      dc:	8c 81       	ldd	r24, Y+4	; 0x04
      de:	9d 81       	ldd	r25, Y+5	; 0x05
      e0:	83 30       	cpi	r24, 0x03	; 3
      e2:	91 05       	cpc	r25, r1
      e4:	09 f4       	brne	.+2      	; 0xe8 <DIO_vSetPinDirection+0x66>
      e6:	91 c0       	rjmp	.+290    	; 0x20a <DIO_vSetPinDirection+0x188>
      e8:	bf c0       	rjmp	.+382    	; 0x268 <DIO_vSetPinDirection+0x1e6>
		case PORTA_ID:
			if (copy_u8state == PIN_OUTPUT) {
      ea:	8b 81       	ldd	r24, Y+3	; 0x03
      ec:	81 30       	cpi	r24, 0x01	; 1
      ee:	b1 f4       	brne	.+44     	; 0x11c <DIO_vSetPinDirection+0x9a>
				SET_BIT(PORTA_BASE.DDR, Copy_u8PinNumber);
      f0:	a9 e3       	ldi	r26, 0x39	; 57
      f2:	b0 e0       	ldi	r27, 0x00	; 0
      f4:	e9 e3       	ldi	r30, 0x39	; 57
      f6:	f0 e0       	ldi	r31, 0x00	; 0
      f8:	81 81       	ldd	r24, Z+1	; 0x01
      fa:	48 2f       	mov	r20, r24
      fc:	8a 81       	ldd	r24, Y+2	; 0x02
      fe:	28 2f       	mov	r18, r24
     100:	30 e0       	ldi	r19, 0x00	; 0
     102:	81 e0       	ldi	r24, 0x01	; 1
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	02 2e       	mov	r0, r18
     108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_vSetPinDirection+0x8c>
     10a:	88 0f       	add	r24, r24
     10c:	99 1f       	adc	r25, r25
     10e:	0a 94       	dec	r0
     110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_vSetPinDirection+0x88>
     112:	84 2b       	or	r24, r20
     114:	11 96       	adiw	r26, 0x01	; 1
     116:	8c 93       	st	X, r24
     118:	11 97       	sbiw	r26, 0x01	; 1
     11a:	a6 c0       	rjmp	.+332    	; 0x268 <DIO_vSetPinDirection+0x1e6>

			} else {
				CLEAR_BIT(PORTA_BASE.DDR, Copy_u8PinNumber);
     11c:	a9 e3       	ldi	r26, 0x39	; 57
     11e:	b0 e0       	ldi	r27, 0x00	; 0
     120:	e9 e3       	ldi	r30, 0x39	; 57
     122:	f0 e0       	ldi	r31, 0x00	; 0
     124:	81 81       	ldd	r24, Z+1	; 0x01
     126:	48 2f       	mov	r20, r24
     128:	8a 81       	ldd	r24, Y+2	; 0x02
     12a:	28 2f       	mov	r18, r24
     12c:	30 e0       	ldi	r19, 0x00	; 0
     12e:	81 e0       	ldi	r24, 0x01	; 1
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	02 2e       	mov	r0, r18
     134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_vSetPinDirection+0xb8>
     136:	88 0f       	add	r24, r24
     138:	99 1f       	adc	r25, r25
     13a:	0a 94       	dec	r0
     13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_vSetPinDirection+0xb4>
     13e:	80 95       	com	r24
     140:	84 23       	and	r24, r20
     142:	11 96       	adiw	r26, 0x01	; 1
     144:	8c 93       	st	X, r24
     146:	11 97       	sbiw	r26, 0x01	; 1
     148:	8f c0       	rjmp	.+286    	; 0x268 <DIO_vSetPinDirection+0x1e6>
			}
			break;
		case PORTB_ID:

			if (copy_u8state == PIN_OUTPUT) {
     14a:	8b 81       	ldd	r24, Y+3	; 0x03
     14c:	81 30       	cpi	r24, 0x01	; 1
     14e:	b1 f4       	brne	.+44     	; 0x17c <DIO_vSetPinDirection+0xfa>
				SET_BIT(PORTB_BASE.DDR, Copy_u8PinNumber);
     150:	a6 e3       	ldi	r26, 0x36	; 54
     152:	b0 e0       	ldi	r27, 0x00	; 0
     154:	e6 e3       	ldi	r30, 0x36	; 54
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	81 81       	ldd	r24, Z+1	; 0x01
     15a:	48 2f       	mov	r20, r24
     15c:	8a 81       	ldd	r24, Y+2	; 0x02
     15e:	28 2f       	mov	r18, r24
     160:	30 e0       	ldi	r19, 0x00	; 0
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	02 2e       	mov	r0, r18
     168:	02 c0       	rjmp	.+4      	; 0x16e <DIO_vSetPinDirection+0xec>
     16a:	88 0f       	add	r24, r24
     16c:	99 1f       	adc	r25, r25
     16e:	0a 94       	dec	r0
     170:	e2 f7       	brpl	.-8      	; 0x16a <DIO_vSetPinDirection+0xe8>
     172:	84 2b       	or	r24, r20
     174:	11 96       	adiw	r26, 0x01	; 1
     176:	8c 93       	st	X, r24
     178:	11 97       	sbiw	r26, 0x01	; 1
     17a:	76 c0       	rjmp	.+236    	; 0x268 <DIO_vSetPinDirection+0x1e6>
			} else {
				CLEAR_BIT(PORTB_BASE.DDR, Copy_u8PinNumber);
     17c:	a6 e3       	ldi	r26, 0x36	; 54
     17e:	b0 e0       	ldi	r27, 0x00	; 0
     180:	e6 e3       	ldi	r30, 0x36	; 54
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	81 81       	ldd	r24, Z+1	; 0x01
     186:	48 2f       	mov	r20, r24
     188:	8a 81       	ldd	r24, Y+2	; 0x02
     18a:	28 2f       	mov	r18, r24
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	02 2e       	mov	r0, r18
     194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_vSetPinDirection+0x118>
     196:	88 0f       	add	r24, r24
     198:	99 1f       	adc	r25, r25
     19a:	0a 94       	dec	r0
     19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_vSetPinDirection+0x114>
     19e:	80 95       	com	r24
     1a0:	84 23       	and	r24, r20
     1a2:	11 96       	adiw	r26, 0x01	; 1
     1a4:	8c 93       	st	X, r24
     1a6:	11 97       	sbiw	r26, 0x01	; 1
     1a8:	5f c0       	rjmp	.+190    	; 0x268 <DIO_vSetPinDirection+0x1e6>
			}
			break;
		case PORTC_ID:
			if (copy_u8state == PIN_OUTPUT) {
     1aa:	8b 81       	ldd	r24, Y+3	; 0x03
     1ac:	81 30       	cpi	r24, 0x01	; 1
     1ae:	b1 f4       	brne	.+44     	; 0x1dc <DIO_vSetPinDirection+0x15a>
				SET_BIT(PORTC_BASE.DDR, Copy_u8PinNumber);
     1b0:	a3 e3       	ldi	r26, 0x33	; 51
     1b2:	b0 e0       	ldi	r27, 0x00	; 0
     1b4:	e3 e3       	ldi	r30, 0x33	; 51
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	81 81       	ldd	r24, Z+1	; 0x01
     1ba:	48 2f       	mov	r20, r24
     1bc:	8a 81       	ldd	r24, Y+2	; 0x02
     1be:	28 2f       	mov	r18, r24
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	02 2e       	mov	r0, r18
     1c8:	02 c0       	rjmp	.+4      	; 0x1ce <DIO_vSetPinDirection+0x14c>
     1ca:	88 0f       	add	r24, r24
     1cc:	99 1f       	adc	r25, r25
     1ce:	0a 94       	dec	r0
     1d0:	e2 f7       	brpl	.-8      	; 0x1ca <DIO_vSetPinDirection+0x148>
     1d2:	84 2b       	or	r24, r20
     1d4:	11 96       	adiw	r26, 0x01	; 1
     1d6:	8c 93       	st	X, r24
     1d8:	11 97       	sbiw	r26, 0x01	; 1
     1da:	46 c0       	rjmp	.+140    	; 0x268 <DIO_vSetPinDirection+0x1e6>
			} else {
				CLEAR_BIT(PORTC_BASE.DDR, Copy_u8PinNumber);
     1dc:	a3 e3       	ldi	r26, 0x33	; 51
     1de:	b0 e0       	ldi	r27, 0x00	; 0
     1e0:	e3 e3       	ldi	r30, 0x33	; 51
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	81 81       	ldd	r24, Z+1	; 0x01
     1e6:	48 2f       	mov	r20, r24
     1e8:	8a 81       	ldd	r24, Y+2	; 0x02
     1ea:	28 2f       	mov	r18, r24
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	81 e0       	ldi	r24, 0x01	; 1
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	02 2e       	mov	r0, r18
     1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_vSetPinDirection+0x178>
     1f6:	88 0f       	add	r24, r24
     1f8:	99 1f       	adc	r25, r25
     1fa:	0a 94       	dec	r0
     1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_vSetPinDirection+0x174>
     1fe:	80 95       	com	r24
     200:	84 23       	and	r24, r20
     202:	11 96       	adiw	r26, 0x01	; 1
     204:	8c 93       	st	X, r24
     206:	11 97       	sbiw	r26, 0x01	; 1
     208:	2f c0       	rjmp	.+94     	; 0x268 <DIO_vSetPinDirection+0x1e6>
			}
			break;
		case PORTD_ID:
			if (copy_u8state == PIN_OUTPUT) {
     20a:	8b 81       	ldd	r24, Y+3	; 0x03
     20c:	81 30       	cpi	r24, 0x01	; 1
     20e:	b1 f4       	brne	.+44     	; 0x23c <DIO_vSetPinDirection+0x1ba>
				SET_BIT(PORTD_BASE.DDR, Copy_u8PinNumber);
     210:	a0 e3       	ldi	r26, 0x30	; 48
     212:	b0 e0       	ldi	r27, 0x00	; 0
     214:	e0 e3       	ldi	r30, 0x30	; 48
     216:	f0 e0       	ldi	r31, 0x00	; 0
     218:	81 81       	ldd	r24, Z+1	; 0x01
     21a:	48 2f       	mov	r20, r24
     21c:	8a 81       	ldd	r24, Y+2	; 0x02
     21e:	28 2f       	mov	r18, r24
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	02 2e       	mov	r0, r18
     228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_vSetPinDirection+0x1ac>
     22a:	88 0f       	add	r24, r24
     22c:	99 1f       	adc	r25, r25
     22e:	0a 94       	dec	r0
     230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_vSetPinDirection+0x1a8>
     232:	84 2b       	or	r24, r20
     234:	11 96       	adiw	r26, 0x01	; 1
     236:	8c 93       	st	X, r24
     238:	11 97       	sbiw	r26, 0x01	; 1
     23a:	16 c0       	rjmp	.+44     	; 0x268 <DIO_vSetPinDirection+0x1e6>
			} else {
				CLEAR_BIT(PORTD_BASE.DDR, Copy_u8PinNumber);
     23c:	a0 e3       	ldi	r26, 0x30	; 48
     23e:	b0 e0       	ldi	r27, 0x00	; 0
     240:	e0 e3       	ldi	r30, 0x30	; 48
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	81 81       	ldd	r24, Z+1	; 0x01
     246:	48 2f       	mov	r20, r24
     248:	8a 81       	ldd	r24, Y+2	; 0x02
     24a:	28 2f       	mov	r18, r24
     24c:	30 e0       	ldi	r19, 0x00	; 0
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	02 2e       	mov	r0, r18
     254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_vSetPinDirection+0x1d8>
     256:	88 0f       	add	r24, r24
     258:	99 1f       	adc	r25, r25
     25a:	0a 94       	dec	r0
     25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_vSetPinDirection+0x1d4>
     25e:	80 95       	com	r24
     260:	84 23       	and	r24, r20
     262:	11 96       	adiw	r26, 0x01	; 1
     264:	8c 93       	st	X, r24
     266:	11 97       	sbiw	r26, 0x01	; 1
			}
			break;
		}
	}
}
     268:	0f 90       	pop	r0
     26a:	0f 90       	pop	r0
     26c:	0f 90       	pop	r0
     26e:	0f 90       	pop	r0
     270:	0f 90       	pop	r0
     272:	cf 91       	pop	r28
     274:	df 91       	pop	r29
     276:	08 95       	ret

00000278 <DIO_vWritePin>:

void DIO_vWritePin(uint8 Copy_u8PORT, uint8 Copy_u8PinNumber,
		uint8 Copy_u8value) {
     278:	df 93       	push	r29
     27a:	cf 93       	push	r28
     27c:	00 d0       	rcall	.+0      	; 0x27e <DIO_vWritePin+0x6>
     27e:	00 d0       	rcall	.+0      	; 0x280 <DIO_vWritePin+0x8>
     280:	0f 92       	push	r0
     282:	cd b7       	in	r28, 0x3d	; 61
     284:	de b7       	in	r29, 0x3e	; 62
     286:	89 83       	std	Y+1, r24	; 0x01
     288:	6a 83       	std	Y+2, r22	; 0x02
     28a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((Copy_u8PinNumber >= NUM_OF_PINS_PER_PORT)
     28c:	8a 81       	ldd	r24, Y+2	; 0x02
     28e:	88 30       	cpi	r24, 0x08	; 8
     290:	08 f0       	brcs	.+2      	; 0x294 <DIO_vWritePin+0x1c>
     292:	e5 c0       	rjmp	.+458    	; 0x45e <DIO_vWritePin+0x1e6>
     294:	89 81       	ldd	r24, Y+1	; 0x01
     296:	84 30       	cpi	r24, 0x04	; 4
     298:	08 f0       	brcs	.+2      	; 0x29c <DIO_vWritePin+0x24>
     29a:	e1 c0       	rjmp	.+450    	; 0x45e <DIO_vWritePin+0x1e6>
			|| (Copy_u8PORT >= NUM_OF_PORTS)) {
		/* Do Nothing */
	} else {
		/* Write the pin value as required */
		switch (Copy_u8PORT) {
     29c:	89 81       	ldd	r24, Y+1	; 0x01
     29e:	28 2f       	mov	r18, r24
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	3d 83       	std	Y+5, r19	; 0x05
     2a4:	2c 83       	std	Y+4, r18	; 0x04
     2a6:	8c 81       	ldd	r24, Y+4	; 0x04
     2a8:	9d 81       	ldd	r25, Y+5	; 0x05
     2aa:	81 30       	cpi	r24, 0x01	; 1
     2ac:	91 05       	cpc	r25, r1
     2ae:	09 f4       	brne	.+2      	; 0x2b2 <DIO_vWritePin+0x3a>
     2b0:	47 c0       	rjmp	.+142    	; 0x340 <DIO_vWritePin+0xc8>
     2b2:	2c 81       	ldd	r18, Y+4	; 0x04
     2b4:	3d 81       	ldd	r19, Y+5	; 0x05
     2b6:	22 30       	cpi	r18, 0x02	; 2
     2b8:	31 05       	cpc	r19, r1
     2ba:	2c f4       	brge	.+10     	; 0x2c6 <DIO_vWritePin+0x4e>
     2bc:	8c 81       	ldd	r24, Y+4	; 0x04
     2be:	9d 81       	ldd	r25, Y+5	; 0x05
     2c0:	00 97       	sbiw	r24, 0x00	; 0
     2c2:	71 f0       	breq	.+28     	; 0x2e0 <DIO_vWritePin+0x68>
     2c4:	cc c0       	rjmp	.+408    	; 0x45e <DIO_vWritePin+0x1e6>
     2c6:	2c 81       	ldd	r18, Y+4	; 0x04
     2c8:	3d 81       	ldd	r19, Y+5	; 0x05
     2ca:	22 30       	cpi	r18, 0x02	; 2
     2cc:	31 05       	cpc	r19, r1
     2ce:	09 f4       	brne	.+2      	; 0x2d2 <DIO_vWritePin+0x5a>
     2d0:	67 c0       	rjmp	.+206    	; 0x3a0 <DIO_vWritePin+0x128>
     2d2:	8c 81       	ldd	r24, Y+4	; 0x04
     2d4:	9d 81       	ldd	r25, Y+5	; 0x05
     2d6:	83 30       	cpi	r24, 0x03	; 3
     2d8:	91 05       	cpc	r25, r1
     2da:	09 f4       	brne	.+2      	; 0x2de <DIO_vWritePin+0x66>
     2dc:	91 c0       	rjmp	.+290    	; 0x400 <DIO_vWritePin+0x188>
     2de:	bf c0       	rjmp	.+382    	; 0x45e <DIO_vWritePin+0x1e6>
		case PORTA_ID:
			if (Copy_u8value == LOGIC_HIGH) {
     2e0:	8b 81       	ldd	r24, Y+3	; 0x03
     2e2:	81 30       	cpi	r24, 0x01	; 1
     2e4:	b1 f4       	brne	.+44     	; 0x312 <DIO_vWritePin+0x9a>
				SET_BIT(PORTA_BASE.Port, Copy_u8PinNumber);
     2e6:	a9 e3       	ldi	r26, 0x39	; 57
     2e8:	b0 e0       	ldi	r27, 0x00	; 0
     2ea:	e9 e3       	ldi	r30, 0x39	; 57
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	48 2f       	mov	r20, r24
     2f2:	8a 81       	ldd	r24, Y+2	; 0x02
     2f4:	28 2f       	mov	r18, r24
     2f6:	30 e0       	ldi	r19, 0x00	; 0
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	02 2e       	mov	r0, r18
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_vWritePin+0x8c>
     300:	88 0f       	add	r24, r24
     302:	99 1f       	adc	r25, r25
     304:	0a 94       	dec	r0
     306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_vWritePin+0x88>
     308:	84 2b       	or	r24, r20
     30a:	12 96       	adiw	r26, 0x02	; 2
     30c:	8c 93       	st	X, r24
     30e:	12 97       	sbiw	r26, 0x02	; 2
     310:	a6 c0       	rjmp	.+332    	; 0x45e <DIO_vWritePin+0x1e6>
			} else {
				CLEAR_BIT(PORTA_BASE.Port, Copy_u8PinNumber);
     312:	a9 e3       	ldi	r26, 0x39	; 57
     314:	b0 e0       	ldi	r27, 0x00	; 0
     316:	e9 e3       	ldi	r30, 0x39	; 57
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	82 81       	ldd	r24, Z+2	; 0x02
     31c:	48 2f       	mov	r20, r24
     31e:	8a 81       	ldd	r24, Y+2	; 0x02
     320:	28 2f       	mov	r18, r24
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	02 2e       	mov	r0, r18
     32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_vWritePin+0xb8>
     32c:	88 0f       	add	r24, r24
     32e:	99 1f       	adc	r25, r25
     330:	0a 94       	dec	r0
     332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_vWritePin+0xb4>
     334:	80 95       	com	r24
     336:	84 23       	and	r24, r20
     338:	12 96       	adiw	r26, 0x02	; 2
     33a:	8c 93       	st	X, r24
     33c:	12 97       	sbiw	r26, 0x02	; 2
     33e:	8f c0       	rjmp	.+286    	; 0x45e <DIO_vWritePin+0x1e6>
			}
			break;
		case PORTB_ID:
			if (Copy_u8value == LOGIC_HIGH) {
     340:	8b 81       	ldd	r24, Y+3	; 0x03
     342:	81 30       	cpi	r24, 0x01	; 1
     344:	b1 f4       	brne	.+44     	; 0x372 <DIO_vWritePin+0xfa>
				SET_BIT(PORTB_BASE.Port, Copy_u8PinNumber);
     346:	a6 e3       	ldi	r26, 0x36	; 54
     348:	b0 e0       	ldi	r27, 0x00	; 0
     34a:	e6 e3       	ldi	r30, 0x36	; 54
     34c:	f0 e0       	ldi	r31, 0x00	; 0
     34e:	82 81       	ldd	r24, Z+2	; 0x02
     350:	48 2f       	mov	r20, r24
     352:	8a 81       	ldd	r24, Y+2	; 0x02
     354:	28 2f       	mov	r18, r24
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	02 2e       	mov	r0, r18
     35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_vWritePin+0xec>
     360:	88 0f       	add	r24, r24
     362:	99 1f       	adc	r25, r25
     364:	0a 94       	dec	r0
     366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_vWritePin+0xe8>
     368:	84 2b       	or	r24, r20
     36a:	12 96       	adiw	r26, 0x02	; 2
     36c:	8c 93       	st	X, r24
     36e:	12 97       	sbiw	r26, 0x02	; 2
     370:	76 c0       	rjmp	.+236    	; 0x45e <DIO_vWritePin+0x1e6>
			} else {
				CLEAR_BIT(PORTB_BASE.Port, Copy_u8PinNumber);
     372:	a6 e3       	ldi	r26, 0x36	; 54
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	e6 e3       	ldi	r30, 0x36	; 54
     378:	f0 e0       	ldi	r31, 0x00	; 0
     37a:	82 81       	ldd	r24, Z+2	; 0x02
     37c:	48 2f       	mov	r20, r24
     37e:	8a 81       	ldd	r24, Y+2	; 0x02
     380:	28 2f       	mov	r18, r24
     382:	30 e0       	ldi	r19, 0x00	; 0
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	02 2e       	mov	r0, r18
     38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_vWritePin+0x118>
     38c:	88 0f       	add	r24, r24
     38e:	99 1f       	adc	r25, r25
     390:	0a 94       	dec	r0
     392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_vWritePin+0x114>
     394:	80 95       	com	r24
     396:	84 23       	and	r24, r20
     398:	12 96       	adiw	r26, 0x02	; 2
     39a:	8c 93       	st	X, r24
     39c:	12 97       	sbiw	r26, 0x02	; 2
     39e:	5f c0       	rjmp	.+190    	; 0x45e <DIO_vWritePin+0x1e6>
			}
			break;
		case PORTC_ID:
			if (Copy_u8value == LOGIC_HIGH) {
     3a0:	8b 81       	ldd	r24, Y+3	; 0x03
     3a2:	81 30       	cpi	r24, 0x01	; 1
     3a4:	b1 f4       	brne	.+44     	; 0x3d2 <DIO_vWritePin+0x15a>
				SET_BIT(PORTC_BASE.Port, Copy_u8PinNumber);
     3a6:	a3 e3       	ldi	r26, 0x33	; 51
     3a8:	b0 e0       	ldi	r27, 0x00	; 0
     3aa:	e3 e3       	ldi	r30, 0x33	; 51
     3ac:	f0 e0       	ldi	r31, 0x00	; 0
     3ae:	82 81       	ldd	r24, Z+2	; 0x02
     3b0:	48 2f       	mov	r20, r24
     3b2:	8a 81       	ldd	r24, Y+2	; 0x02
     3b4:	28 2f       	mov	r18, r24
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	02 2e       	mov	r0, r18
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_vWritePin+0x14c>
     3c0:	88 0f       	add	r24, r24
     3c2:	99 1f       	adc	r25, r25
     3c4:	0a 94       	dec	r0
     3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_vWritePin+0x148>
     3c8:	84 2b       	or	r24, r20
     3ca:	12 96       	adiw	r26, 0x02	; 2
     3cc:	8c 93       	st	X, r24
     3ce:	12 97       	sbiw	r26, 0x02	; 2
     3d0:	46 c0       	rjmp	.+140    	; 0x45e <DIO_vWritePin+0x1e6>
			} else {
				CLEAR_BIT(PORTC_BASE.Port, Copy_u8PinNumber);
     3d2:	a3 e3       	ldi	r26, 0x33	; 51
     3d4:	b0 e0       	ldi	r27, 0x00	; 0
     3d6:	e3 e3       	ldi	r30, 0x33	; 51
     3d8:	f0 e0       	ldi	r31, 0x00	; 0
     3da:	82 81       	ldd	r24, Z+2	; 0x02
     3dc:	48 2f       	mov	r20, r24
     3de:	8a 81       	ldd	r24, Y+2	; 0x02
     3e0:	28 2f       	mov	r18, r24
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	02 2e       	mov	r0, r18
     3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <DIO_vWritePin+0x178>
     3ec:	88 0f       	add	r24, r24
     3ee:	99 1f       	adc	r25, r25
     3f0:	0a 94       	dec	r0
     3f2:	e2 f7       	brpl	.-8      	; 0x3ec <DIO_vWritePin+0x174>
     3f4:	80 95       	com	r24
     3f6:	84 23       	and	r24, r20
     3f8:	12 96       	adiw	r26, 0x02	; 2
     3fa:	8c 93       	st	X, r24
     3fc:	12 97       	sbiw	r26, 0x02	; 2
     3fe:	2f c0       	rjmp	.+94     	; 0x45e <DIO_vWritePin+0x1e6>
			}
			break;
		case PORTD_ID:
			if (Copy_u8value == LOGIC_HIGH) {
     400:	8b 81       	ldd	r24, Y+3	; 0x03
     402:	81 30       	cpi	r24, 0x01	; 1
     404:	b1 f4       	brne	.+44     	; 0x432 <DIO_vWritePin+0x1ba>
				SET_BIT(PORTD_BASE.Port, Copy_u8PinNumber);
     406:	a0 e3       	ldi	r26, 0x30	; 48
     408:	b0 e0       	ldi	r27, 0x00	; 0
     40a:	e0 e3       	ldi	r30, 0x30	; 48
     40c:	f0 e0       	ldi	r31, 0x00	; 0
     40e:	82 81       	ldd	r24, Z+2	; 0x02
     410:	48 2f       	mov	r20, r24
     412:	8a 81       	ldd	r24, Y+2	; 0x02
     414:	28 2f       	mov	r18, r24
     416:	30 e0       	ldi	r19, 0x00	; 0
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	02 2e       	mov	r0, r18
     41e:	02 c0       	rjmp	.+4      	; 0x424 <DIO_vWritePin+0x1ac>
     420:	88 0f       	add	r24, r24
     422:	99 1f       	adc	r25, r25
     424:	0a 94       	dec	r0
     426:	e2 f7       	brpl	.-8      	; 0x420 <DIO_vWritePin+0x1a8>
     428:	84 2b       	or	r24, r20
     42a:	12 96       	adiw	r26, 0x02	; 2
     42c:	8c 93       	st	X, r24
     42e:	12 97       	sbiw	r26, 0x02	; 2
     430:	16 c0       	rjmp	.+44     	; 0x45e <DIO_vWritePin+0x1e6>
			} else {
				CLEAR_BIT(PORTD_BASE.Port, Copy_u8PinNumber);
     432:	a0 e3       	ldi	r26, 0x30	; 48
     434:	b0 e0       	ldi	r27, 0x00	; 0
     436:	e0 e3       	ldi	r30, 0x30	; 48
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	82 81       	ldd	r24, Z+2	; 0x02
     43c:	48 2f       	mov	r20, r24
     43e:	8a 81       	ldd	r24, Y+2	; 0x02
     440:	28 2f       	mov	r18, r24
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	02 2e       	mov	r0, r18
     44a:	02 c0       	rjmp	.+4      	; 0x450 <DIO_vWritePin+0x1d8>
     44c:	88 0f       	add	r24, r24
     44e:	99 1f       	adc	r25, r25
     450:	0a 94       	dec	r0
     452:	e2 f7       	brpl	.-8      	; 0x44c <DIO_vWritePin+0x1d4>
     454:	80 95       	com	r24
     456:	84 23       	and	r24, r20
     458:	12 96       	adiw	r26, 0x02	; 2
     45a:	8c 93       	st	X, r24
     45c:	12 97       	sbiw	r26, 0x02	; 2
			}
			break;
		}
	}
}
     45e:	0f 90       	pop	r0
     460:	0f 90       	pop	r0
     462:	0f 90       	pop	r0
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	cf 91       	pop	r28
     46a:	df 91       	pop	r29
     46c:	08 95       	ret

0000046e <DIO_vTogglePin>:

void DIO_vTogglePin(uint8 Copy_u8PORT, uint8 Copy_u8PinNumber) {
     46e:	df 93       	push	r29
     470:	cf 93       	push	r28
     472:	00 d0       	rcall	.+0      	; 0x474 <DIO_vTogglePin+0x6>
     474:	00 d0       	rcall	.+0      	; 0x476 <DIO_vTogglePin+0x8>
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
     47a:	89 83       	std	Y+1, r24	; 0x01
     47c:	6a 83       	std	Y+2, r22	; 0x02

	if (Copy_u8PORT >= NUM_OF_PORTS) {
     47e:	89 81       	ldd	r24, Y+1	; 0x01
     480:	84 30       	cpi	r24, 0x04	; 4
     482:	08 f0       	brcs	.+2      	; 0x486 <DIO_vTogglePin+0x18>
     484:	6e c0       	rjmp	.+220    	; 0x562 <DIO_vTogglePin+0xf4>
		/* Do Nothing */
	} else {
		/* Write the port value as required */
		switch (Copy_u8PORT) {
     486:	89 81       	ldd	r24, Y+1	; 0x01
     488:	28 2f       	mov	r18, r24
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	3c 83       	std	Y+4, r19	; 0x04
     48e:	2b 83       	std	Y+3, r18	; 0x03
     490:	8b 81       	ldd	r24, Y+3	; 0x03
     492:	9c 81       	ldd	r25, Y+4	; 0x04
     494:	81 30       	cpi	r24, 0x01	; 1
     496:	91 05       	cpc	r25, r1
     498:	49 f1       	breq	.+82     	; 0x4ec <DIO_vTogglePin+0x7e>
     49a:	2b 81       	ldd	r18, Y+3	; 0x03
     49c:	3c 81       	ldd	r19, Y+4	; 0x04
     49e:	22 30       	cpi	r18, 0x02	; 2
     4a0:	31 05       	cpc	r19, r1
     4a2:	2c f4       	brge	.+10     	; 0x4ae <DIO_vTogglePin+0x40>
     4a4:	8b 81       	ldd	r24, Y+3	; 0x03
     4a6:	9c 81       	ldd	r25, Y+4	; 0x04
     4a8:	00 97       	sbiw	r24, 0x00	; 0
     4aa:	61 f0       	breq	.+24     	; 0x4c4 <DIO_vTogglePin+0x56>
     4ac:	5a c0       	rjmp	.+180    	; 0x562 <DIO_vTogglePin+0xf4>
     4ae:	2b 81       	ldd	r18, Y+3	; 0x03
     4b0:	3c 81       	ldd	r19, Y+4	; 0x04
     4b2:	22 30       	cpi	r18, 0x02	; 2
     4b4:	31 05       	cpc	r19, r1
     4b6:	71 f1       	breq	.+92     	; 0x514 <DIO_vTogglePin+0xa6>
     4b8:	8b 81       	ldd	r24, Y+3	; 0x03
     4ba:	9c 81       	ldd	r25, Y+4	; 0x04
     4bc:	83 30       	cpi	r24, 0x03	; 3
     4be:	91 05       	cpc	r25, r1
     4c0:	e9 f1       	breq	.+122    	; 0x53c <DIO_vTogglePin+0xce>
     4c2:	4f c0       	rjmp	.+158    	; 0x562 <DIO_vTogglePin+0xf4>
		case PORTA_ID:

			TOGGLE_BIT(PORTA_BASE.Pin, Copy_u8PinNumber);
     4c4:	a9 e3       	ldi	r26, 0x39	; 57
     4c6:	b0 e0       	ldi	r27, 0x00	; 0
     4c8:	e9 e3       	ldi	r30, 0x39	; 57
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	80 81       	ld	r24, Z
     4ce:	48 2f       	mov	r20, r24
     4d0:	8a 81       	ldd	r24, Y+2	; 0x02
     4d2:	28 2f       	mov	r18, r24
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	02 2e       	mov	r0, r18
     4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <DIO_vTogglePin+0x74>
     4de:	88 0f       	add	r24, r24
     4e0:	99 1f       	adc	r25, r25
     4e2:	0a 94       	dec	r0
     4e4:	e2 f7       	brpl	.-8      	; 0x4de <DIO_vTogglePin+0x70>
     4e6:	84 27       	eor	r24, r20
     4e8:	8c 93       	st	X, r24
     4ea:	3b c0       	rjmp	.+118    	; 0x562 <DIO_vTogglePin+0xf4>
			break;
		case PORTB_ID:
			TOGGLE_BIT(PORTB_BASE.Pin, Copy_u8PinNumber);
     4ec:	a6 e3       	ldi	r26, 0x36	; 54
     4ee:	b0 e0       	ldi	r27, 0x00	; 0
     4f0:	e6 e3       	ldi	r30, 0x36	; 54
     4f2:	f0 e0       	ldi	r31, 0x00	; 0
     4f4:	80 81       	ld	r24, Z
     4f6:	48 2f       	mov	r20, r24
     4f8:	8a 81       	ldd	r24, Y+2	; 0x02
     4fa:	28 2f       	mov	r18, r24
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	02 2e       	mov	r0, r18
     504:	02 c0       	rjmp	.+4      	; 0x50a <DIO_vTogglePin+0x9c>
     506:	88 0f       	add	r24, r24
     508:	99 1f       	adc	r25, r25
     50a:	0a 94       	dec	r0
     50c:	e2 f7       	brpl	.-8      	; 0x506 <DIO_vTogglePin+0x98>
     50e:	84 27       	eor	r24, r20
     510:	8c 93       	st	X, r24
     512:	27 c0       	rjmp	.+78     	; 0x562 <DIO_vTogglePin+0xf4>
			break;
		case PORTC_ID:
			TOGGLE_BIT(PORTC_BASE.Pin, Copy_u8PinNumber);
     514:	a3 e3       	ldi	r26, 0x33	; 51
     516:	b0 e0       	ldi	r27, 0x00	; 0
     518:	e3 e3       	ldi	r30, 0x33	; 51
     51a:	f0 e0       	ldi	r31, 0x00	; 0
     51c:	80 81       	ld	r24, Z
     51e:	48 2f       	mov	r20, r24
     520:	8a 81       	ldd	r24, Y+2	; 0x02
     522:	28 2f       	mov	r18, r24
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	02 2e       	mov	r0, r18
     52c:	02 c0       	rjmp	.+4      	; 0x532 <DIO_vTogglePin+0xc4>
     52e:	88 0f       	add	r24, r24
     530:	99 1f       	adc	r25, r25
     532:	0a 94       	dec	r0
     534:	e2 f7       	brpl	.-8      	; 0x52e <DIO_vTogglePin+0xc0>
     536:	84 27       	eor	r24, r20
     538:	8c 93       	st	X, r24
     53a:	13 c0       	rjmp	.+38     	; 0x562 <DIO_vTogglePin+0xf4>
			break;
		case PORTD_ID:
			TOGGLE_BIT(PORTD_BASE.Pin, Copy_u8PinNumber);
     53c:	a0 e3       	ldi	r26, 0x30	; 48
     53e:	b0 e0       	ldi	r27, 0x00	; 0
     540:	e0 e3       	ldi	r30, 0x30	; 48
     542:	f0 e0       	ldi	r31, 0x00	; 0
     544:	80 81       	ld	r24, Z
     546:	48 2f       	mov	r20, r24
     548:	8a 81       	ldd	r24, Y+2	; 0x02
     54a:	28 2f       	mov	r18, r24
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	02 2e       	mov	r0, r18
     554:	02 c0       	rjmp	.+4      	; 0x55a <DIO_vTogglePin+0xec>
     556:	88 0f       	add	r24, r24
     558:	99 1f       	adc	r25, r25
     55a:	0a 94       	dec	r0
     55c:	e2 f7       	brpl	.-8      	; 0x556 <DIO_vTogglePin+0xe8>
     55e:	84 27       	eor	r24, r20
     560:	8c 93       	st	X, r24
			break;
		}
	}

}
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	0f 90       	pop	r0
     56a:	cf 91       	pop	r28
     56c:	df 91       	pop	r29
     56e:	08 95       	ret

00000570 <DIO_vSetPortDirection>:
void DIO_vSetPortDirection(uint8 Copy_u8PORT, uint8 copy_u8state) {
     570:	df 93       	push	r29
     572:	cf 93       	push	r28
     574:	00 d0       	rcall	.+0      	; 0x576 <DIO_vSetPortDirection+0x6>
     576:	00 d0       	rcall	.+0      	; 0x578 <DIO_vSetPortDirection+0x8>
     578:	cd b7       	in	r28, 0x3d	; 61
     57a:	de b7       	in	r29, 0x3e	; 62
     57c:	89 83       	std	Y+1, r24	; 0x01
     57e:	6a 83       	std	Y+2, r22	; 0x02

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (Copy_u8PORT >= NUM_OF_PORTS) {
     580:	89 81       	ldd	r24, Y+1	; 0x01
     582:	84 30       	cpi	r24, 0x04	; 4
     584:	90 f5       	brcc	.+100    	; 0x5ea <DIO_vSetPortDirection+0x7a>
		/* Do Nothing */
	} else {
		/* Setup the port direction as required */
		switch (Copy_u8PORT) {
     586:	89 81       	ldd	r24, Y+1	; 0x01
     588:	28 2f       	mov	r18, r24
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	3c 83       	std	Y+4, r19	; 0x04
     58e:	2b 83       	std	Y+3, r18	; 0x03
     590:	8b 81       	ldd	r24, Y+3	; 0x03
     592:	9c 81       	ldd	r25, Y+4	; 0x04
     594:	81 30       	cpi	r24, 0x01	; 1
     596:	91 05       	cpc	r25, r1
     598:	d1 f0       	breq	.+52     	; 0x5ce <DIO_vSetPortDirection+0x5e>
     59a:	2b 81       	ldd	r18, Y+3	; 0x03
     59c:	3c 81       	ldd	r19, Y+4	; 0x04
     59e:	22 30       	cpi	r18, 0x02	; 2
     5a0:	31 05       	cpc	r19, r1
     5a2:	2c f4       	brge	.+10     	; 0x5ae <DIO_vSetPortDirection+0x3e>
     5a4:	8b 81       	ldd	r24, Y+3	; 0x03
     5a6:	9c 81       	ldd	r25, Y+4	; 0x04
     5a8:	00 97       	sbiw	r24, 0x00	; 0
     5aa:	61 f0       	breq	.+24     	; 0x5c4 <DIO_vSetPortDirection+0x54>
     5ac:	1e c0       	rjmp	.+60     	; 0x5ea <DIO_vSetPortDirection+0x7a>
     5ae:	2b 81       	ldd	r18, Y+3	; 0x03
     5b0:	3c 81       	ldd	r19, Y+4	; 0x04
     5b2:	22 30       	cpi	r18, 0x02	; 2
     5b4:	31 05       	cpc	r19, r1
     5b6:	81 f0       	breq	.+32     	; 0x5d8 <DIO_vSetPortDirection+0x68>
     5b8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ba:	9c 81       	ldd	r25, Y+4	; 0x04
     5bc:	83 30       	cpi	r24, 0x03	; 3
     5be:	91 05       	cpc	r25, r1
     5c0:	81 f0       	breq	.+32     	; 0x5e2 <DIO_vSetPortDirection+0x72>
     5c2:	13 c0       	rjmp	.+38     	; 0x5ea <DIO_vSetPortDirection+0x7a>
		case PORTA_ID:
			PORTA_BASE.DDR = copy_u8state;
     5c4:	e9 e3       	ldi	r30, 0x39	; 57
     5c6:	f0 e0       	ldi	r31, 0x00	; 0
     5c8:	8a 81       	ldd	r24, Y+2	; 0x02
     5ca:	81 83       	std	Z+1, r24	; 0x01
     5cc:	0e c0       	rjmp	.+28     	; 0x5ea <DIO_vSetPortDirection+0x7a>
			break;
		case PORTB_ID:
			PORTB_BASE.DDR = copy_u8state;
     5ce:	e6 e3       	ldi	r30, 0x36	; 54
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	8a 81       	ldd	r24, Y+2	; 0x02
     5d4:	81 83       	std	Z+1, r24	; 0x01
     5d6:	09 c0       	rjmp	.+18     	; 0x5ea <DIO_vSetPortDirection+0x7a>
			break;
		case PORTC_ID:
			PORTC_BASE.DDR = copy_u8state;
     5d8:	e3 e3       	ldi	r30, 0x33	; 51
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	8a 81       	ldd	r24, Y+2	; 0x02
     5de:	81 83       	std	Z+1, r24	; 0x01
     5e0:	04 c0       	rjmp	.+8      	; 0x5ea <DIO_vSetPortDirection+0x7a>
			break;
		case PORTD_ID:
			PORTD_BASE.DDR = copy_u8state;
     5e2:	e0 e3       	ldi	r30, 0x30	; 48
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	8a 81       	ldd	r24, Y+2	; 0x02
     5e8:	81 83       	std	Z+1, r24	; 0x01
			break;
		}
	}
}
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	cf 91       	pop	r28
     5f4:	df 91       	pop	r29
     5f6:	08 95       	ret

000005f8 <DIO_vWritePort>:
void DIO_vWritePort(uint8 Copy_u8PORT, uint8 Copy_u8value) {
     5f8:	df 93       	push	r29
     5fa:	cf 93       	push	r28
     5fc:	00 d0       	rcall	.+0      	; 0x5fe <DIO_vWritePort+0x6>
     5fe:	00 d0       	rcall	.+0      	; 0x600 <DIO_vWritePort+0x8>
     600:	cd b7       	in	r28, 0x3d	; 61
     602:	de b7       	in	r29, 0x3e	; 62
     604:	89 83       	std	Y+1, r24	; 0x01
     606:	6a 83       	std	Y+2, r22	; 0x02

	/* Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (Copy_u8PORT >= NUM_OF_PORTS) {
     608:	89 81       	ldd	r24, Y+1	; 0x01
     60a:	84 30       	cpi	r24, 0x04	; 4
     60c:	90 f5       	brcc	.+100    	; 0x672 <DIO_vWritePort+0x7a>
		/* Do Nothing */
	} else {
		/* Write the port value as required */
		switch (Copy_u8PORT) {
     60e:	89 81       	ldd	r24, Y+1	; 0x01
     610:	28 2f       	mov	r18, r24
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	3c 83       	std	Y+4, r19	; 0x04
     616:	2b 83       	std	Y+3, r18	; 0x03
     618:	8b 81       	ldd	r24, Y+3	; 0x03
     61a:	9c 81       	ldd	r25, Y+4	; 0x04
     61c:	81 30       	cpi	r24, 0x01	; 1
     61e:	91 05       	cpc	r25, r1
     620:	d1 f0       	breq	.+52     	; 0x656 <DIO_vWritePort+0x5e>
     622:	2b 81       	ldd	r18, Y+3	; 0x03
     624:	3c 81       	ldd	r19, Y+4	; 0x04
     626:	22 30       	cpi	r18, 0x02	; 2
     628:	31 05       	cpc	r19, r1
     62a:	2c f4       	brge	.+10     	; 0x636 <DIO_vWritePort+0x3e>
     62c:	8b 81       	ldd	r24, Y+3	; 0x03
     62e:	9c 81       	ldd	r25, Y+4	; 0x04
     630:	00 97       	sbiw	r24, 0x00	; 0
     632:	61 f0       	breq	.+24     	; 0x64c <DIO_vWritePort+0x54>
     634:	1e c0       	rjmp	.+60     	; 0x672 <DIO_vWritePort+0x7a>
     636:	2b 81       	ldd	r18, Y+3	; 0x03
     638:	3c 81       	ldd	r19, Y+4	; 0x04
     63a:	22 30       	cpi	r18, 0x02	; 2
     63c:	31 05       	cpc	r19, r1
     63e:	81 f0       	breq	.+32     	; 0x660 <DIO_vWritePort+0x68>
     640:	8b 81       	ldd	r24, Y+3	; 0x03
     642:	9c 81       	ldd	r25, Y+4	; 0x04
     644:	83 30       	cpi	r24, 0x03	; 3
     646:	91 05       	cpc	r25, r1
     648:	81 f0       	breq	.+32     	; 0x66a <DIO_vWritePort+0x72>
     64a:	13 c0       	rjmp	.+38     	; 0x672 <DIO_vWritePort+0x7a>
		case PORTA_ID:
			PORTA_BASE.Port = Copy_u8value;
     64c:	e9 e3       	ldi	r30, 0x39	; 57
     64e:	f0 e0       	ldi	r31, 0x00	; 0
     650:	8a 81       	ldd	r24, Y+2	; 0x02
     652:	82 83       	std	Z+2, r24	; 0x02
     654:	0e c0       	rjmp	.+28     	; 0x672 <DIO_vWritePort+0x7a>
			break;
		case PORTB_ID:
			PORTB_BASE.Port = Copy_u8value;
     656:	e6 e3       	ldi	r30, 0x36	; 54
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	8a 81       	ldd	r24, Y+2	; 0x02
     65c:	82 83       	std	Z+2, r24	; 0x02
     65e:	09 c0       	rjmp	.+18     	; 0x672 <DIO_vWritePort+0x7a>
			break;
		case PORTC_ID:
			PORTC_BASE.Port = Copy_u8value;
     660:	e3 e3       	ldi	r30, 0x33	; 51
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	8a 81       	ldd	r24, Y+2	; 0x02
     666:	82 83       	std	Z+2, r24	; 0x02
     668:	04 c0       	rjmp	.+8      	; 0x672 <DIO_vWritePort+0x7a>
			break;
		case PORTD_ID:
			PORTD_BASE.Port = Copy_u8value;
     66a:	e0 e3       	ldi	r30, 0x30	; 48
     66c:	f0 e0       	ldi	r31, 0x00	; 0
     66e:	8a 81       	ldd	r24, Y+2	; 0x02
     670:	82 83       	std	Z+2, r24	; 0x02
			break;
		}
	}
}
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	cf 91       	pop	r28
     67c:	df 91       	pop	r29
     67e:	08 95       	ret

00000680 <DIO_u8GetPinValue>:
uint8 DIO_u8GetPinValue(uint8 Copy_u8PORT, uint8 Copy_u8PinNumber) {
     680:	df 93       	push	r29
     682:	cf 93       	push	r28
     684:	00 d0       	rcall	.+0      	; 0x686 <DIO_u8GetPinValue+0x6>
     686:	00 d0       	rcall	.+0      	; 0x688 <DIO_u8GetPinValue+0x8>
     688:	0f 92       	push	r0
     68a:	cd b7       	in	r28, 0x3d	; 61
     68c:	de b7       	in	r29, 0x3e	; 62
     68e:	8a 83       	std	Y+2, r24	; 0x02
     690:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     692:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((Copy_u8PinNumber >= NUM_OF_PINS_PER_PORT)
     694:	8b 81       	ldd	r24, Y+3	; 0x03
     696:	88 30       	cpi	r24, 0x08	; 8
     698:	08 f0       	brcs	.+2      	; 0x69c <DIO_u8GetPinValue+0x1c>
     69a:	84 c0       	rjmp	.+264    	; 0x7a4 <DIO_u8GetPinValue+0x124>
     69c:	8a 81       	ldd	r24, Y+2	; 0x02
     69e:	84 30       	cpi	r24, 0x04	; 4
     6a0:	08 f0       	brcs	.+2      	; 0x6a4 <DIO_u8GetPinValue+0x24>
     6a2:	80 c0       	rjmp	.+256    	; 0x7a4 <DIO_u8GetPinValue+0x124>
			|| (Copy_u8PORT >= NUM_OF_PORTS)) {
		/* Do Nothing */
	} else {
		/* Read the pin value as required */
		switch (Copy_u8PORT) {
     6a4:	8a 81       	ldd	r24, Y+2	; 0x02
     6a6:	28 2f       	mov	r18, r24
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	3d 83       	std	Y+5, r19	; 0x05
     6ac:	2c 83       	std	Y+4, r18	; 0x04
     6ae:	4c 81       	ldd	r20, Y+4	; 0x04
     6b0:	5d 81       	ldd	r21, Y+5	; 0x05
     6b2:	41 30       	cpi	r20, 0x01	; 1
     6b4:	51 05       	cpc	r21, r1
     6b6:	79 f1       	breq	.+94     	; 0x716 <DIO_u8GetPinValue+0x96>
     6b8:	8c 81       	ldd	r24, Y+4	; 0x04
     6ba:	9d 81       	ldd	r25, Y+5	; 0x05
     6bc:	82 30       	cpi	r24, 0x02	; 2
     6be:	91 05       	cpc	r25, r1
     6c0:	34 f4       	brge	.+12     	; 0x6ce <DIO_u8GetPinValue+0x4e>
     6c2:	2c 81       	ldd	r18, Y+4	; 0x04
     6c4:	3d 81       	ldd	r19, Y+5	; 0x05
     6c6:	21 15       	cp	r18, r1
     6c8:	31 05       	cpc	r19, r1
     6ca:	69 f0       	breq	.+26     	; 0x6e6 <DIO_u8GetPinValue+0x66>
     6cc:	6b c0       	rjmp	.+214    	; 0x7a4 <DIO_u8GetPinValue+0x124>
     6ce:	4c 81       	ldd	r20, Y+4	; 0x04
     6d0:	5d 81       	ldd	r21, Y+5	; 0x05
     6d2:	42 30       	cpi	r20, 0x02	; 2
     6d4:	51 05       	cpc	r21, r1
     6d6:	b9 f1       	breq	.+110    	; 0x746 <DIO_u8GetPinValue+0xc6>
     6d8:	8c 81       	ldd	r24, Y+4	; 0x04
     6da:	9d 81       	ldd	r25, Y+5	; 0x05
     6dc:	83 30       	cpi	r24, 0x03	; 3
     6de:	91 05       	cpc	r25, r1
     6e0:	09 f4       	brne	.+2      	; 0x6e4 <DIO_u8GetPinValue+0x64>
     6e2:	49 c0       	rjmp	.+146    	; 0x776 <DIO_u8GetPinValue+0xf6>
     6e4:	5f c0       	rjmp	.+190    	; 0x7a4 <DIO_u8GetPinValue+0x124>
		case PORTA_ID:
			if (BIT_IS_SET(PORTA_BASE.Pin, Copy_u8PinNumber)) {
     6e6:	e9 e3       	ldi	r30, 0x39	; 57
     6e8:	f0 e0       	ldi	r31, 0x00	; 0
     6ea:	80 81       	ld	r24, Z
     6ec:	28 2f       	mov	r18, r24
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	8b 81       	ldd	r24, Y+3	; 0x03
     6f2:	88 2f       	mov	r24, r24
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	a9 01       	movw	r20, r18
     6f8:	02 c0       	rjmp	.+4      	; 0x6fe <DIO_u8GetPinValue+0x7e>
     6fa:	55 95       	asr	r21
     6fc:	47 95       	ror	r20
     6fe:	8a 95       	dec	r24
     700:	e2 f7       	brpl	.-8      	; 0x6fa <DIO_u8GetPinValue+0x7a>
     702:	ca 01       	movw	r24, r20
     704:	81 70       	andi	r24, 0x01	; 1
     706:	90 70       	andi	r25, 0x00	; 0
     708:	88 23       	and	r24, r24
     70a:	19 f0       	breq	.+6      	; 0x712 <DIO_u8GetPinValue+0x92>
				pin_value = LOGIC_HIGH;
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	89 83       	std	Y+1, r24	; 0x01
     710:	49 c0       	rjmp	.+146    	; 0x7a4 <DIO_u8GetPinValue+0x124>
			} else {
				pin_value = LOGIC_LOW;
     712:	19 82       	std	Y+1, r1	; 0x01
     714:	47 c0       	rjmp	.+142    	; 0x7a4 <DIO_u8GetPinValue+0x124>
			}
			break;
		case PORTB_ID:
			if (BIT_IS_SET(PORTB_BASE.Pin, Copy_u8PinNumber)) {
     716:	e6 e3       	ldi	r30, 0x36	; 54
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	80 81       	ld	r24, Z
     71c:	28 2f       	mov	r18, r24
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	8b 81       	ldd	r24, Y+3	; 0x03
     722:	88 2f       	mov	r24, r24
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	a9 01       	movw	r20, r18
     728:	02 c0       	rjmp	.+4      	; 0x72e <DIO_u8GetPinValue+0xae>
     72a:	55 95       	asr	r21
     72c:	47 95       	ror	r20
     72e:	8a 95       	dec	r24
     730:	e2 f7       	brpl	.-8      	; 0x72a <DIO_u8GetPinValue+0xaa>
     732:	ca 01       	movw	r24, r20
     734:	81 70       	andi	r24, 0x01	; 1
     736:	90 70       	andi	r25, 0x00	; 0
     738:	88 23       	and	r24, r24
     73a:	19 f0       	breq	.+6      	; 0x742 <DIO_u8GetPinValue+0xc2>
				pin_value = LOGIC_HIGH;
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	89 83       	std	Y+1, r24	; 0x01
     740:	31 c0       	rjmp	.+98     	; 0x7a4 <DIO_u8GetPinValue+0x124>
			} else {
				pin_value = LOGIC_LOW;
     742:	19 82       	std	Y+1, r1	; 0x01
     744:	2f c0       	rjmp	.+94     	; 0x7a4 <DIO_u8GetPinValue+0x124>
			}
			break;
		case PORTC_ID:
			if (BIT_IS_SET(PORTC_BASE.Pin, Copy_u8PinNumber)) {
     746:	e3 e3       	ldi	r30, 0x33	; 51
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	80 81       	ld	r24, Z
     74c:	28 2f       	mov	r18, r24
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	8b 81       	ldd	r24, Y+3	; 0x03
     752:	88 2f       	mov	r24, r24
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	a9 01       	movw	r20, r18
     758:	02 c0       	rjmp	.+4      	; 0x75e <DIO_u8GetPinValue+0xde>
     75a:	55 95       	asr	r21
     75c:	47 95       	ror	r20
     75e:	8a 95       	dec	r24
     760:	e2 f7       	brpl	.-8      	; 0x75a <DIO_u8GetPinValue+0xda>
     762:	ca 01       	movw	r24, r20
     764:	81 70       	andi	r24, 0x01	; 1
     766:	90 70       	andi	r25, 0x00	; 0
     768:	88 23       	and	r24, r24
     76a:	19 f0       	breq	.+6      	; 0x772 <DIO_u8GetPinValue+0xf2>
				pin_value = LOGIC_HIGH;
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	89 83       	std	Y+1, r24	; 0x01
     770:	19 c0       	rjmp	.+50     	; 0x7a4 <DIO_u8GetPinValue+0x124>
			} else {
				pin_value = LOGIC_LOW;
     772:	19 82       	std	Y+1, r1	; 0x01
     774:	17 c0       	rjmp	.+46     	; 0x7a4 <DIO_u8GetPinValue+0x124>
			}
			break;
		case PORTD_ID:
			if (BIT_IS_SET(PORTD_BASE.Pin, Copy_u8PinNumber)) {
     776:	e0 e3       	ldi	r30, 0x30	; 48
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	80 81       	ld	r24, Z
     77c:	28 2f       	mov	r18, r24
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	8b 81       	ldd	r24, Y+3	; 0x03
     782:	88 2f       	mov	r24, r24
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	a9 01       	movw	r20, r18
     788:	02 c0       	rjmp	.+4      	; 0x78e <DIO_u8GetPinValue+0x10e>
     78a:	55 95       	asr	r21
     78c:	47 95       	ror	r20
     78e:	8a 95       	dec	r24
     790:	e2 f7       	brpl	.-8      	; 0x78a <DIO_u8GetPinValue+0x10a>
     792:	ca 01       	movw	r24, r20
     794:	81 70       	andi	r24, 0x01	; 1
     796:	90 70       	andi	r25, 0x00	; 0
     798:	88 23       	and	r24, r24
     79a:	19 f0       	breq	.+6      	; 0x7a2 <DIO_u8GetPinValue+0x122>
				pin_value = LOGIC_HIGH;
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	89 83       	std	Y+1, r24	; 0x01
     7a0:	01 c0       	rjmp	.+2      	; 0x7a4 <DIO_u8GetPinValue+0x124>
			} else {
				pin_value = LOGIC_LOW;
     7a2:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
     7a4:	89 81       	ldd	r24, Y+1	; 0x01

}
     7a6:	0f 90       	pop	r0
     7a8:	0f 90       	pop	r0
     7aa:	0f 90       	pop	r0
     7ac:	0f 90       	pop	r0
     7ae:	0f 90       	pop	r0
     7b0:	cf 91       	pop	r28
     7b2:	df 91       	pop	r29
     7b4:	08 95       	ret

000007b6 <DIO_vTogglrPort>:
void DIO_vTogglrPort(uint8 Copy_u8PORT) {
     7b6:	df 93       	push	r29
     7b8:	cf 93       	push	r28
     7ba:	00 d0       	rcall	.+0      	; 0x7bc <DIO_vTogglrPort+0x6>
     7bc:	0f 92       	push	r0
     7be:	cd b7       	in	r28, 0x3d	; 61
     7c0:	de b7       	in	r29, 0x3e	; 62
     7c2:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PORT >= NUM_OF_PORTS) {
     7c4:	89 81       	ldd	r24, Y+1	; 0x01
     7c6:	84 30       	cpi	r24, 0x04	; 4
     7c8:	08 f0       	brcs	.+2      	; 0x7cc <DIO_vTogglrPort+0x16>
     7ca:	52 c0       	rjmp	.+164    	; 0x870 <__stack+0x11>
		/* Do Nothing */
	} else {
		/* Write the port value as required */
		switch (Copy_u8PORT) {
     7cc:	89 81       	ldd	r24, Y+1	; 0x01
     7ce:	28 2f       	mov	r18, r24
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	3b 83       	std	Y+3, r19	; 0x03
     7d4:	2a 83       	std	Y+2, r18	; 0x02
     7d6:	8a 81       	ldd	r24, Y+2	; 0x02
     7d8:	9b 81       	ldd	r25, Y+3	; 0x03
     7da:	81 30       	cpi	r24, 0x01	; 1
     7dc:	91 05       	cpc	r25, r1
     7de:	11 f1       	breq	.+68     	; 0x824 <DIO_vTogglrPort+0x6e>
     7e0:	2a 81       	ldd	r18, Y+2	; 0x02
     7e2:	3b 81       	ldd	r19, Y+3	; 0x03
     7e4:	22 30       	cpi	r18, 0x02	; 2
     7e6:	31 05       	cpc	r19, r1
     7e8:	2c f4       	brge	.+10     	; 0x7f4 <DIO_vTogglrPort+0x3e>
     7ea:	8a 81       	ldd	r24, Y+2	; 0x02
     7ec:	9b 81       	ldd	r25, Y+3	; 0x03
     7ee:	00 97       	sbiw	r24, 0x00	; 0
     7f0:	61 f0       	breq	.+24     	; 0x80a <DIO_vTogglrPort+0x54>
     7f2:	3e c0       	rjmp	.+124    	; 0x870 <__stack+0x11>
     7f4:	2a 81       	ldd	r18, Y+2	; 0x02
     7f6:	3b 81       	ldd	r19, Y+3	; 0x03
     7f8:	22 30       	cpi	r18, 0x02	; 2
     7fa:	31 05       	cpc	r19, r1
     7fc:	01 f1       	breq	.+64     	; 0x83e <DIO_vTogglrPort+0x88>
     7fe:	8a 81       	ldd	r24, Y+2	; 0x02
     800:	9b 81       	ldd	r25, Y+3	; 0x03
     802:	83 30       	cpi	r24, 0x03	; 3
     804:	91 05       	cpc	r25, r1
     806:	41 f1       	breq	.+80     	; 0x858 <DIO_vTogglrPort+0xa2>
     808:	33 c0       	rjmp	.+102    	; 0x870 <__stack+0x11>
		case PORTA_ID:
			PORTA_BASE.Port ^= PORTA_BASE.Port;
     80a:	a9 e3       	ldi	r26, 0x39	; 57
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e9 e3       	ldi	r30, 0x39	; 57
     810:	f0 e0       	ldi	r31, 0x00	; 0
     812:	92 81       	ldd	r25, Z+2	; 0x02
     814:	e9 e3       	ldi	r30, 0x39	; 57
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	82 81       	ldd	r24, Z+2	; 0x02
     81a:	89 27       	eor	r24, r25
     81c:	12 96       	adiw	r26, 0x02	; 2
     81e:	8c 93       	st	X, r24
     820:	12 97       	sbiw	r26, 0x02	; 2
     822:	26 c0       	rjmp	.+76     	; 0x870 <__stack+0x11>
			break;
		case PORTB_ID:
			PORTB_BASE.Port ^= PORTA_BASE.Port;
     824:	a6 e3       	ldi	r26, 0x36	; 54
     826:	b0 e0       	ldi	r27, 0x00	; 0
     828:	e6 e3       	ldi	r30, 0x36	; 54
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	92 81       	ldd	r25, Z+2	; 0x02
     82e:	e9 e3       	ldi	r30, 0x39	; 57
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	82 81       	ldd	r24, Z+2	; 0x02
     834:	89 27       	eor	r24, r25
     836:	12 96       	adiw	r26, 0x02	; 2
     838:	8c 93       	st	X, r24
     83a:	12 97       	sbiw	r26, 0x02	; 2
     83c:	19 c0       	rjmp	.+50     	; 0x870 <__stack+0x11>
			break;
		case PORTC_ID:
			PORTC_BASE.Port ^= PORTA_BASE.Port;
     83e:	a3 e3       	ldi	r26, 0x33	; 51
     840:	b0 e0       	ldi	r27, 0x00	; 0
     842:	e3 e3       	ldi	r30, 0x33	; 51
     844:	f0 e0       	ldi	r31, 0x00	; 0
     846:	92 81       	ldd	r25, Z+2	; 0x02
     848:	e9 e3       	ldi	r30, 0x39	; 57
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	82 81       	ldd	r24, Z+2	; 0x02
     84e:	89 27       	eor	r24, r25
     850:	12 96       	adiw	r26, 0x02	; 2
     852:	8c 93       	st	X, r24
     854:	12 97       	sbiw	r26, 0x02	; 2
     856:	0c c0       	rjmp	.+24     	; 0x870 <__stack+0x11>
			break;
		case PORTD_ID:
			PORTD_BASE.Port ^= PORTA_BASE.Port;
     858:	a0 e3       	ldi	r26, 0x30	; 48
     85a:	b0 e0       	ldi	r27, 0x00	; 0
     85c:	e0 e3       	ldi	r30, 0x30	; 48
     85e:	f0 e0       	ldi	r31, 0x00	; 0
     860:	92 81       	ldd	r25, Z+2	; 0x02
     862:	e9 e3       	ldi	r30, 0x39	; 57
     864:	f0 e0       	ldi	r31, 0x00	; 0
     866:	82 81       	ldd	r24, Z+2	; 0x02
     868:	89 27       	eor	r24, r25
     86a:	12 96       	adiw	r26, 0x02	; 2
     86c:	8c 93       	st	X, r24
     86e:	12 97       	sbiw	r26, 0x02	; 2
			break;
		}
	}
}
     870:	0f 90       	pop	r0
     872:	0f 90       	pop	r0
     874:	0f 90       	pop	r0
     876:	cf 91       	pop	r28
     878:	df 91       	pop	r29
     87a:	08 95       	ret

0000087c <DIO_GETPortValue>:
uint8 DIO_GETPortValue(uint8 Copy_u8PORT) {
     87c:	df 93       	push	r29
     87e:	cf 93       	push	r28
     880:	00 d0       	rcall	.+0      	; 0x882 <DIO_GETPortValue+0x6>
     882:	00 d0       	rcall	.+0      	; 0x884 <DIO_GETPortValue+0x8>
     884:	cd b7       	in	r28, 0x3d	; 61
     886:	de b7       	in	r29, 0x3e	; 62
     888:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
     88a:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (Copy_u8PORT >= NUM_OF_PORTS) {
     88c:	8a 81       	ldd	r24, Y+2	; 0x02
     88e:	84 30       	cpi	r24, 0x04	; 4
     890:	90 f5       	brcc	.+100    	; 0x8f6 <DIO_GETPortValue+0x7a>
		/* Do Nothing */
	} else {
		/* Read the port value as required */
		switch (Copy_u8PORT) {
     892:	8a 81       	ldd	r24, Y+2	; 0x02
     894:	28 2f       	mov	r18, r24
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	3c 83       	std	Y+4, r19	; 0x04
     89a:	2b 83       	std	Y+3, r18	; 0x03
     89c:	8b 81       	ldd	r24, Y+3	; 0x03
     89e:	9c 81       	ldd	r25, Y+4	; 0x04
     8a0:	81 30       	cpi	r24, 0x01	; 1
     8a2:	91 05       	cpc	r25, r1
     8a4:	d1 f0       	breq	.+52     	; 0x8da <DIO_GETPortValue+0x5e>
     8a6:	2b 81       	ldd	r18, Y+3	; 0x03
     8a8:	3c 81       	ldd	r19, Y+4	; 0x04
     8aa:	22 30       	cpi	r18, 0x02	; 2
     8ac:	31 05       	cpc	r19, r1
     8ae:	2c f4       	brge	.+10     	; 0x8ba <DIO_GETPortValue+0x3e>
     8b0:	8b 81       	ldd	r24, Y+3	; 0x03
     8b2:	9c 81       	ldd	r25, Y+4	; 0x04
     8b4:	00 97       	sbiw	r24, 0x00	; 0
     8b6:	61 f0       	breq	.+24     	; 0x8d0 <DIO_GETPortValue+0x54>
     8b8:	1e c0       	rjmp	.+60     	; 0x8f6 <DIO_GETPortValue+0x7a>
     8ba:	2b 81       	ldd	r18, Y+3	; 0x03
     8bc:	3c 81       	ldd	r19, Y+4	; 0x04
     8be:	22 30       	cpi	r18, 0x02	; 2
     8c0:	31 05       	cpc	r19, r1
     8c2:	81 f0       	breq	.+32     	; 0x8e4 <DIO_GETPortValue+0x68>
     8c4:	8b 81       	ldd	r24, Y+3	; 0x03
     8c6:	9c 81       	ldd	r25, Y+4	; 0x04
     8c8:	83 30       	cpi	r24, 0x03	; 3
     8ca:	91 05       	cpc	r25, r1
     8cc:	81 f0       	breq	.+32     	; 0x8ee <DIO_GETPortValue+0x72>
     8ce:	13 c0       	rjmp	.+38     	; 0x8f6 <DIO_GETPortValue+0x7a>
		case PORTA_ID:
			value = PORTA_BASE.Pin;
     8d0:	e9 e3       	ldi	r30, 0x39	; 57
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	80 81       	ld	r24, Z
     8d6:	89 83       	std	Y+1, r24	; 0x01
     8d8:	0e c0       	rjmp	.+28     	; 0x8f6 <DIO_GETPortValue+0x7a>
			break;
		case PORTB_ID:
			value = PORTB_BASE.Pin;
     8da:	e6 e3       	ldi	r30, 0x36	; 54
     8dc:	f0 e0       	ldi	r31, 0x00	; 0
     8de:	80 81       	ld	r24, Z
     8e0:	89 83       	std	Y+1, r24	; 0x01
     8e2:	09 c0       	rjmp	.+18     	; 0x8f6 <DIO_GETPortValue+0x7a>
			break;
		case PORTC_ID:
			value = PORTC_BASE.Pin;
     8e4:	e3 e3       	ldi	r30, 0x33	; 51
     8e6:	f0 e0       	ldi	r31, 0x00	; 0
     8e8:	80 81       	ld	r24, Z
     8ea:	89 83       	std	Y+1, r24	; 0x01
     8ec:	04 c0       	rjmp	.+8      	; 0x8f6 <DIO_GETPortValue+0x7a>
			break;
		case PORTD_ID:
			value = PORTD_BASE.Pin;
     8ee:	e0 e3       	ldi	r30, 0x30	; 48
     8f0:	f0 e0       	ldi	r31, 0x00	; 0
     8f2:	80 81       	ld	r24, Z
     8f4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
     8f6:	89 81       	ldd	r24, Y+1	; 0x01
}
     8f8:	0f 90       	pop	r0
     8fa:	0f 90       	pop	r0
     8fc:	0f 90       	pop	r0
     8fe:	0f 90       	pop	r0
     900:	cf 91       	pop	r28
     902:	df 91       	pop	r29
     904:	08 95       	ret

00000906 <PWM_Init>:
#include"../lib/common_macros.h"


#define    F_CPU           8000000ul

void PWM_Init() {
     906:	df 93       	push	r29
     908:	cf 93       	push	r28
     90a:	cd b7       	in	r28, 0x3d	; 61
     90c:	de b7       	in	r29, 0x3e	; 62
if(CONFIG.channel==channelA)
     90e:	80 91 60 00 	lds	r24, 0x0060
     912:	88 23       	and	r24, r24
     914:	09 f0       	breq	.+2      	; 0x918 <PWM_Init+0x12>
     916:	67 c0       	rjmp	.+206    	; 0x9e6 <PWM_Init+0xe0>
{

if(CONFIG.PWM_mode==NON_INVERTING)
     918:	80 91 63 00 	lds	r24, 0x0063
     91c:	82 30       	cpi	r24, 0x02	; 2
     91e:	79 f4       	brne	.+30     	; 0x93e <PWM_Init+0x38>
	{
		TCCR1A_REG &= ~(1 << COM_1A0);
     920:	af e4       	ldi	r26, 0x4F	; 79
     922:	b0 e0       	ldi	r27, 0x00	; 0
     924:	ef e4       	ldi	r30, 0x4F	; 79
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	80 81       	ld	r24, Z
     92a:	8f 7b       	andi	r24, 0xBF	; 191
     92c:	8c 93       	st	X, r24
		TCCR1A_REG |= (1 << COM_1A1);
     92e:	af e4       	ldi	r26, 0x4F	; 79
     930:	b0 e0       	ldi	r27, 0x00	; 0
     932:	ef e4       	ldi	r30, 0x4F	; 79
     934:	f0 e0       	ldi	r31, 0x00	; 0
     936:	80 81       	ld	r24, Z
     938:	80 68       	ori	r24, 0x80	; 128
     93a:	8c 93       	st	X, r24
     93c:	12 c0       	rjmp	.+36     	; 0x962 <PWM_Init+0x5c>

	}
else if(CONFIG.PWM_mode==INVERTING)
     93e:	80 91 63 00 	lds	r24, 0x0063
     942:	83 30       	cpi	r24, 0x03	; 3
     944:	71 f4       	brne	.+28     	; 0x962 <PWM_Init+0x5c>
{

                	   TCCR1A_REG |=(1<<COM_1A0);
     946:	af e4       	ldi	r26, 0x4F	; 79
     948:	b0 e0       	ldi	r27, 0x00	; 0
     94a:	ef e4       	ldi	r30, 0x4F	; 79
     94c:	f0 e0       	ldi	r31, 0x00	; 0
     94e:	80 81       	ld	r24, Z
     950:	80 64       	ori	r24, 0x40	; 64
     952:	8c 93       	st	X, r24
                	   TCCR1A_REG |=(1<<COM_1A1);
     954:	af e4       	ldi	r26, 0x4F	; 79
     956:	b0 e0       	ldi	r27, 0x00	; 0
     958:	ef e4       	ldi	r30, 0x4F	; 79
     95a:	f0 e0       	ldi	r31, 0x00	; 0
     95c:	80 81       	ld	r24, Z
     95e:	80 68       	ori	r24, 0x80	; 128
     960:	8c 93       	st	X, r24


}
//#endif

if(CONFIG.mode==TIMER_FAST_PWM_MODE)
     962:	80 91 62 00 	lds	r24, 0x0062
     966:	83 30       	cpi	r24, 0x03	; 3
     968:	e9 f4       	brne	.+58     	; 0x9a4 <PWM_Init+0x9e>
	{
		CLEAR_BIT(TCCR1A_REG, WGM_10);
     96a:	af e4       	ldi	r26, 0x4F	; 79
     96c:	b0 e0       	ldi	r27, 0x00	; 0
     96e:	ef e4       	ldi	r30, 0x4F	; 79
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	80 81       	ld	r24, Z
     974:	8e 7f       	andi	r24, 0xFE	; 254
     976:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG, WGM_11);
     978:	af e4       	ldi	r26, 0x4F	; 79
     97a:	b0 e0       	ldi	r27, 0x00	; 0
     97c:	ef e4       	ldi	r30, 0x4F	; 79
     97e:	f0 e0       	ldi	r31, 0x00	; 0
     980:	80 81       	ld	r24, Z
     982:	82 60       	ori	r24, 0x02	; 2
     984:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG, WGM_12);
     986:	ae e4       	ldi	r26, 0x4E	; 78
     988:	b0 e0       	ldi	r27, 0x00	; 0
     98a:	ee e4       	ldi	r30, 0x4E	; 78
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	80 81       	ld	r24, Z
     990:	88 60       	ori	r24, 0x08	; 8
     992:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG, WGM_13);
     994:	ae e4       	ldi	r26, 0x4E	; 78
     996:	b0 e0       	ldi	r27, 0x00	; 0
     998:	ee e4       	ldi	r30, 0x4E	; 78
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	80 81       	ld	r24, Z
     99e:	80 61       	ori	r24, 0x10	; 16
     9a0:	8c 93       	st	X, r24
     9a2:	33 c0       	rjmp	.+102    	; 0xa0a <PWM_Init+0x104>

	}

else if(CONFIG.mode==TIMER_Phase_MODE)
     9a4:	80 91 62 00 	lds	r24, 0x0062
     9a8:	81 30       	cpi	r24, 0x01	; 1
     9aa:	79 f5       	brne	.+94     	; 0xa0a <PWM_Init+0x104>
{

						CLEAR_BIT(TCCR1A_REG,WGM_10);
     9ac:	af e4       	ldi	r26, 0x4F	; 79
     9ae:	b0 e0       	ldi	r27, 0x00	; 0
     9b0:	ef e4       	ldi	r30, 0x4F	; 79
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	80 81       	ld	r24, Z
     9b6:	8e 7f       	andi	r24, 0xFE	; 254
     9b8:	8c 93       	st	X, r24
						SET_BIT(TCCR1A_REG,WGM_11);
     9ba:	af e4       	ldi	r26, 0x4F	; 79
     9bc:	b0 e0       	ldi	r27, 0x00	; 0
     9be:	ef e4       	ldi	r30, 0x4F	; 79
     9c0:	f0 e0       	ldi	r31, 0x00	; 0
     9c2:	80 81       	ld	r24, Z
     9c4:	82 60       	ori	r24, 0x02	; 2
     9c6:	8c 93       	st	X, r24
						CLEAR_BIT(TCCR1B_REG,WGM_12);
     9c8:	ae e4       	ldi	r26, 0x4E	; 78
     9ca:	b0 e0       	ldi	r27, 0x00	; 0
     9cc:	ee e4       	ldi	r30, 0x4E	; 78
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	80 81       	ld	r24, Z
     9d2:	87 7f       	andi	r24, 0xF7	; 247
     9d4:	8c 93       	st	X, r24
						SET_BIT(TCCR1B_REG,WGM_13);
     9d6:	ae e4       	ldi	r26, 0x4E	; 78
     9d8:	b0 e0       	ldi	r27, 0x00	; 0
     9da:	ee e4       	ldi	r30, 0x4E	; 78
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	80 81       	ld	r24, Z
     9e0:	80 61       	ori	r24, 0x10	; 16
     9e2:	8c 93       	st	X, r24
     9e4:	12 c0       	rjmp	.+36     	; 0xa0a <PWM_Init+0x104>
}
//#endif
}
else if(CONFIG.channel==channelB)
     9e6:	80 91 60 00 	lds	r24, 0x0060
     9ea:	81 30       	cpi	r24, 0x01	; 1
     9ec:	71 f4       	brne	.+28     	; 0xa0a <PWM_Init+0x104>

#if(PWM_mode ==NON_INVERTING)
{
                	   TCCR1A_REG &=~(1<<COM_1B0);
     9ee:	af e4       	ldi	r26, 0x4F	; 79
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	ef e4       	ldi	r30, 0x4F	; 79
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	80 81       	ld	r24, Z
     9f8:	8f 7e       	andi	r24, 0xEF	; 239
     9fa:	8c 93       	st	X, r24
                	   TCCR1A_REG |=(1<<COM_1B1);
     9fc:	af e4       	ldi	r26, 0x4F	; 79
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	ef e4       	ldi	r30, 0x4F	; 79
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	80 81       	ld	r24, Z
     a06:	80 62       	ori	r24, 0x20	; 32
     a08:	8c 93       	st	X, r24
}
#endif

#if(mode==TIMER_FAST_PWM_MODE)
{
	CLEAR_BIT(TCCR1A_REG,WGM_10);
     a0a:	af e4       	ldi	r26, 0x4F	; 79
     a0c:	b0 e0       	ldi	r27, 0x00	; 0
     a0e:	ef e4       	ldi	r30, 0x4F	; 79
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	80 81       	ld	r24, Z
     a14:	8e 7f       	andi	r24, 0xFE	; 254
     a16:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_REG,WGM_11);
     a18:	af e4       	ldi	r26, 0x4F	; 79
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	ef e4       	ldi	r30, 0x4F	; 79
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	80 81       	ld	r24, Z
     a22:	82 60       	ori	r24, 0x02	; 2
     a24:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,WGM_12);
     a26:	ae e4       	ldi	r26, 0x4E	; 78
     a28:	b0 e0       	ldi	r27, 0x00	; 0
     a2a:	ee e4       	ldi	r30, 0x4E	; 78
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	80 81       	ld	r24, Z
     a30:	88 60       	ori	r24, 0x08	; 8
     a32:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,WGM_13);
     a34:	ae e4       	ldi	r26, 0x4E	; 78
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	ee e4       	ldi	r30, 0x4E	; 78
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	80 81       	ld	r24, Z
     a3e:	80 61       	ori	r24, 0x10	; 16
     a40:	8c 93       	st	X, r24



//#endif

}
     a42:	cf 91       	pop	r28
     a44:	df 91       	pop	r29
     a46:	08 95       	ret

00000a48 <PWM_Generate_CHANNELA>:
void PWM_Generate_CHANNELA(uint8 Copy_u8DutyCycle, uint32 Copy_u32freq) {
     a48:	df 93       	push	r29
     a4a:	cf 93       	push	r28
     a4c:	cd b7       	in	r28, 0x3d	; 61
     a4e:	de b7       	in	r29, 0x3e	; 62
     a50:	29 97       	sbiw	r28, 0x09	; 9
     a52:	0f b6       	in	r0, 0x3f	; 63
     a54:	f8 94       	cli
     a56:	de bf       	out	0x3e, r29	; 62
     a58:	0f be       	out	0x3f, r0	; 63
     a5a:	cd bf       	out	0x3d, r28	; 61
     a5c:	8d 83       	std	Y+5, r24	; 0x05
     a5e:	4e 83       	std	Y+6, r20	; 0x06
     a60:	5f 83       	std	Y+7, r21	; 0x07
     a62:	68 87       	std	Y+8, r22	; 0x08
     a64:	79 87       	std	Y+9, r23	; 0x09

	if (CONFIG.mode == TIMER_FAST_PWM_MODE)
     a66:	80 91 62 00 	lds	r24, 0x0062
     a6a:	83 30       	cpi	r24, 0x03	; 3
     a6c:	09 f0       	breq	.+2      	; 0xa70 <PWM_Generate_CHANNELA+0x28>
     a6e:	5f c0       	rjmp	.+190    	; 0xb2e <PWM_Generate_CHANNELA+0xe6>

	{
		uint16 TOP;
		//TCNT1L_REG =CONFIG.initial_value;
		TCNT1L_REG=200;
     a70:	ec e4       	ldi	r30, 0x4C	; 76
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	88 ec       	ldi	r24, 0xC8	; 200
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	91 83       	std	Z+1, r25	; 0x01
     a7a:	80 83       	st	Z, r24
		TOP=250;
     a7c:	8a ef       	ldi	r24, 0xFA	; 250
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	9c 83       	std	Y+4, r25	; 0x04
     a82:	8b 83       	std	Y+3, r24	; 0x03
		//TOP = (F_CPU / (CONFIG.prescaler * Copy_u32freq)) - 1; //from equation pwm in fast mode
		ICR1L_REG = TOP + 1;
     a84:	e6 e4       	ldi	r30, 0x46	; 70
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	8b 81       	ldd	r24, Y+3	; 0x03
     a8a:	9c 81       	ldd	r25, Y+4	; 0x04
     a8c:	01 96       	adiw	r24, 0x01	; 1
     a8e:	91 83       	std	Z+1, r25	; 0x01
     a90:	80 83       	st	Z, r24

		if (CONFIG.PWM_mode == NON_INVERTING)
     a92:	80 91 63 00 	lds	r24, 0x0063
     a96:	82 30       	cpi	r24, 0x02	; 2
     a98:	19 f5       	brne	.+70     	; 0xae0 <PWM_Generate_CHANNELA+0x98>

		{
			OCR1AL_REG =((Copy_u8DutyCycle / 100) * (TOP + 1) - 1); //non inverting mince 1 due to tick from top to zero
     a9a:	ea e4       	ldi	r30, 0x4A	; 74
     a9c:	f0 e0       	ldi	r31, 0x00	; 0
     a9e:	8d 81       	ldd	r24, Y+5	; 0x05
     aa0:	94 e6       	ldi	r25, 0x64	; 100
     aa2:	69 2f       	mov	r22, r25
     aa4:	0e 94 db 07 	call	0xfb6	; 0xfb6 <__udivmodqi4>
     aa8:	28 2f       	mov	r18, r24
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	8b 81       	ldd	r24, Y+3	; 0x03
     aae:	9c 81       	ldd	r25, Y+4	; 0x04
     ab0:	01 96       	adiw	r24, 0x01	; 1
     ab2:	ac 01       	movw	r20, r24
     ab4:	24 9f       	mul	r18, r20
     ab6:	c0 01       	movw	r24, r0
     ab8:	25 9f       	mul	r18, r21
     aba:	90 0d       	add	r25, r0
     abc:	34 9f       	mul	r19, r20
     abe:	90 0d       	add	r25, r0
     ac0:	11 24       	eor	r1, r1
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	91 83       	std	Z+1, r25	; 0x01
     ac6:	80 83       	st	Z, r24
			TCCR1B_REG = (TCCR1B_REG & 0xF8) | (CONFIG.prescaler);/*prescaler bits select (CS01,CS00,CS02)*/
     ac8:	ae e4       	ldi	r26, 0x4E	; 78
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	ee e4       	ldi	r30, 0x4E	; 78
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	80 81       	ld	r24, Z
     ad2:	98 2f       	mov	r25, r24
     ad4:	98 7f       	andi	r25, 0xF8	; 248
     ad6:	80 91 61 00 	lds	r24, 0x0061
     ada:	89 2b       	or	r24, r25
     adc:	8c 93       	st	X, r24
     ade:	a9 c0       	rjmp	.+338    	; 0xc32 <PWM_Generate_CHANNELA+0x1ea>

		}
		else if (CONFIG.PWM_mode == INVERTING) {
     ae0:	80 91 63 00 	lds	r24, 0x0063
     ae4:	83 30       	cpi	r24, 0x03	; 3
     ae6:	09 f0       	breq	.+2      	; 0xaea <PWM_Generate_CHANNELA+0xa2>
     ae8:	a4 c0       	rjmp	.+328    	; 0xc32 <PWM_Generate_CHANNELA+0x1ea>
			OCR1AL_REG = ((Copy_u8DutyCycle / 100) * (TOP + 1));
     aea:	ea e4       	ldi	r30, 0x4A	; 74
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	8d 81       	ldd	r24, Y+5	; 0x05
     af0:	94 e6       	ldi	r25, 0x64	; 100
     af2:	69 2f       	mov	r22, r25
     af4:	0e 94 db 07 	call	0xfb6	; 0xfb6 <__udivmodqi4>
     af8:	28 2f       	mov	r18, r24
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	8b 81       	ldd	r24, Y+3	; 0x03
     afe:	9c 81       	ldd	r25, Y+4	; 0x04
     b00:	01 96       	adiw	r24, 0x01	; 1
     b02:	ac 01       	movw	r20, r24
     b04:	24 9f       	mul	r18, r20
     b06:	c0 01       	movw	r24, r0
     b08:	25 9f       	mul	r18, r21
     b0a:	90 0d       	add	r25, r0
     b0c:	34 9f       	mul	r19, r20
     b0e:	90 0d       	add	r25, r0
     b10:	11 24       	eor	r1, r1
     b12:	91 83       	std	Z+1, r25	; 0x01
     b14:	80 83       	st	Z, r24
			TCCR1B_REG = (TCCR1B_REG & 0xF8) | (CONFIG.prescaler);/*prescaler bits select (CS01,CS00,CS02)*/
     b16:	ae e4       	ldi	r26, 0x4E	; 78
     b18:	b0 e0       	ldi	r27, 0x00	; 0
     b1a:	ee e4       	ldi	r30, 0x4E	; 78
     b1c:	f0 e0       	ldi	r31, 0x00	; 0
     b1e:	80 81       	ld	r24, Z
     b20:	98 2f       	mov	r25, r24
     b22:	98 7f       	andi	r25, 0xF8	; 248
     b24:	80 91 61 00 	lds	r24, 0x0061
     b28:	89 2b       	or	r24, r25
     b2a:	8c 93       	st	X, r24
     b2c:	82 c0       	rjmp	.+260    	; 0xc32 <PWM_Generate_CHANNELA+0x1ea>



	}

	else if (CONFIG.mode == TIMER_Phase_MODE)
     b2e:	80 91 62 00 	lds	r24, 0x0062
     b32:	81 30       	cpi	r24, 0x01	; 1
     b34:	09 f0       	breq	.+2      	; 0xb38 <PWM_Generate_CHANNELA+0xf0>
     b36:	7d c0       	rjmp	.+250    	; 0xc32 <PWM_Generate_CHANNELA+0x1ea>

	{
		uint16 TOP;
		TCNT1L_REG = CONFIG.initial_value;
     b38:	ec e4       	ldi	r30, 0x4C	; 76
     b3a:	f0 e0       	ldi	r31, 0x00	; 0
     b3c:	80 91 64 00 	lds	r24, 0x0064
     b40:	88 2f       	mov	r24, r24
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	91 83       	std	Z+1, r25	; 0x01
     b46:	80 83       	st	Z, r24
		TOP = (F_CPU / (2 * CONFIG.prescaler * Copy_u32freq)); //from equation pwm in phase mode
     b48:	80 91 61 00 	lds	r24, 0x0061
     b4c:	88 2f       	mov	r24, r24
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	88 0f       	add	r24, r24
     b52:	99 1f       	adc	r25, r25
     b54:	aa 27       	eor	r26, r26
     b56:	97 fd       	sbrc	r25, 7
     b58:	a0 95       	com	r26
     b5a:	ba 2f       	mov	r27, r26
     b5c:	2e 81       	ldd	r18, Y+6	; 0x06
     b5e:	3f 81       	ldd	r19, Y+7	; 0x07
     b60:	48 85       	ldd	r20, Y+8	; 0x08
     b62:	59 85       	ldd	r21, Y+9	; 0x09
     b64:	bc 01       	movw	r22, r24
     b66:	cd 01       	movw	r24, r26
     b68:	0e 94 bc 07 	call	0xf78	; 0xf78 <__mulsi3>
     b6c:	9b 01       	movw	r18, r22
     b6e:	ac 01       	movw	r20, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	92 e1       	ldi	r25, 0x12	; 18
     b74:	aa e7       	ldi	r26, 0x7A	; 122
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	bc 01       	movw	r22, r24
     b7a:	cd 01       	movw	r24, r26
     b7c:	0e 94 e7 07 	call	0xfce	; 0xfce <__udivmodsi4>
     b80:	da 01       	movw	r26, r20
     b82:	c9 01       	movw	r24, r18
     b84:	9a 83       	std	Y+2, r25	; 0x02
     b86:	89 83       	std	Y+1, r24	; 0x01
		ICR1L_REG = TOP;
     b88:	e6 e4       	ldi	r30, 0x46	; 70
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	9a 81       	ldd	r25, Y+2	; 0x02
     b90:	91 83       	std	Z+1, r25	; 0x01
     b92:	80 83       	st	Z, r24

		if (CONFIG.PWM_mode == NON_INVERTING) {
     b94:	80 91 63 00 	lds	r24, 0x0063
     b98:	82 30       	cpi	r24, 0x02	; 2
     b9a:	09 f5       	brne	.+66     	; 0xbde <PWM_Generate_CHANNELA+0x196>
			OCR1AL_REG = ((Copy_u8DutyCycle / 100) * (TOP)); //non inverting mince 1 due to tick from top to zero
     b9c:	ea e4       	ldi	r30, 0x4A	; 74
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	8d 81       	ldd	r24, Y+5	; 0x05
     ba2:	94 e6       	ldi	r25, 0x64	; 100
     ba4:	69 2f       	mov	r22, r25
     ba6:	0e 94 db 07 	call	0xfb6	; 0xfb6 <__udivmodqi4>
     baa:	28 2f       	mov	r18, r24
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	89 81       	ldd	r24, Y+1	; 0x01
     bb0:	9a 81       	ldd	r25, Y+2	; 0x02
     bb2:	ac 01       	movw	r20, r24
     bb4:	24 9f       	mul	r18, r20
     bb6:	c0 01       	movw	r24, r0
     bb8:	25 9f       	mul	r18, r21
     bba:	90 0d       	add	r25, r0
     bbc:	34 9f       	mul	r19, r20
     bbe:	90 0d       	add	r25, r0
     bc0:	11 24       	eor	r1, r1
     bc2:	91 83       	std	Z+1, r25	; 0x01
     bc4:	80 83       	st	Z, r24
			TCCR1B_REG = (TCCR1B_REG & 0xF8) | (CONFIG.prescaler);/*prescaler bits select (CS01,CS00,CS02)*/
     bc6:	ae e4       	ldi	r26, 0x4E	; 78
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	ee e4       	ldi	r30, 0x4E	; 78
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	98 2f       	mov	r25, r24
     bd2:	98 7f       	andi	r25, 0xF8	; 248
     bd4:	80 91 61 00 	lds	r24, 0x0061
     bd8:	89 2b       	or	r24, r25
     bda:	8c 93       	st	X, r24
     bdc:	2a c0       	rjmp	.+84     	; 0xc32 <PWM_Generate_CHANNELA+0x1ea>

		} else if (CONFIG.PWM_mode == INVERTING) {
     bde:	80 91 63 00 	lds	r24, 0x0063
     be2:	83 30       	cpi	r24, 0x03	; 3
     be4:	31 f5       	brne	.+76     	; 0xc32 <PWM_Generate_CHANNELA+0x1ea>
			OCR1AL_REG = (TOP - (Copy_u8DutyCycle / 100) * (TOP));
     be6:	ea e4       	ldi	r30, 0x4A	; 74
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	8d 81       	ldd	r24, Y+5	; 0x05
     bec:	94 e6       	ldi	r25, 0x64	; 100
     bee:	69 2f       	mov	r22, r25
     bf0:	0e 94 db 07 	call	0xfb6	; 0xfb6 <__udivmodqi4>
     bf4:	28 2f       	mov	r18, r24
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	ac 01       	movw	r20, r24
     bfe:	42 1b       	sub	r20, r18
     c00:	53 0b       	sbc	r21, r19
     c02:	9a 01       	movw	r18, r20
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	9a 81       	ldd	r25, Y+2	; 0x02
     c08:	ac 01       	movw	r20, r24
     c0a:	24 9f       	mul	r18, r20
     c0c:	c0 01       	movw	r24, r0
     c0e:	25 9f       	mul	r18, r21
     c10:	90 0d       	add	r25, r0
     c12:	34 9f       	mul	r19, r20
     c14:	90 0d       	add	r25, r0
     c16:	11 24       	eor	r1, r1
     c18:	91 83       	std	Z+1, r25	; 0x01
     c1a:	80 83       	st	Z, r24
			TCCR1B_REG = (TCCR1B_REG & 0xF8) | (CONFIG.prescaler);/*prescaler bits select (CS01,CS00,CS02)*/
     c1c:	ae e4       	ldi	r26, 0x4E	; 78
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	ee e4       	ldi	r30, 0x4E	; 78
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	98 2f       	mov	r25, r24
     c28:	98 7f       	andi	r25, 0xF8	; 248
     c2a:	80 91 61 00 	lds	r24, 0x0061
     c2e:	89 2b       	or	r24, r25
     c30:	8c 93       	st	X, r24
		}

		//TCCR1B_REG = (TCCR1B_REG & 0xF8) | (CONFIG.prescaler);/*prescaler bits select (CS01,CS00,CS02)*/

	}
	DIO_vSetPinDirection(PORTD_ID,PIN5_ID,PIN_OUTPUT);
     c32:	83 e0       	ldi	r24, 0x03	; 3
     c34:	65 e0       	ldi	r22, 0x05	; 5
     c36:	41 e0       	ldi	r20, 0x01	; 1
     c38:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vSetPinDirection>

}
     c3c:	29 96       	adiw	r28, 0x09	; 9
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
     c48:	cf 91       	pop	r28
     c4a:	df 91       	pop	r29
     c4c:	08 95       	ret

00000c4e <PWM_Generate_CHANNELB>:

void PWM_Generate_CHANNELB(uint8 Copy_u8DutyCycle, uint32 Copy_u32freq) {
     c4e:	df 93       	push	r29
     c50:	cf 93       	push	r28
     c52:	cd b7       	in	r28, 0x3d	; 61
     c54:	de b7       	in	r29, 0x3e	; 62
     c56:	29 97       	sbiw	r28, 0x09	; 9
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	f8 94       	cli
     c5c:	de bf       	out	0x3e, r29	; 62
     c5e:	0f be       	out	0x3f, r0	; 63
     c60:	cd bf       	out	0x3d, r28	; 61
     c62:	8d 83       	std	Y+5, r24	; 0x05
     c64:	4e 83       	std	Y+6, r20	; 0x06
     c66:	5f 83       	std	Y+7, r21	; 0x07
     c68:	68 87       	std	Y+8, r22	; 0x08
     c6a:	79 87       	std	Y+9, r23	; 0x09

	uint16 TOP;
	TCNT1L_REG = CONFIG.initial_value;
     c6c:	ec e4       	ldi	r30, 0x4C	; 76
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 91 64 00 	lds	r24, 0x0064
     c74:	88 2f       	mov	r24, r24
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	91 83       	std	Z+1, r25	; 0x01
     c7a:	80 83       	st	Z, r24
	if (CONFIG.mode == TIMER_FAST_PWM_MODE) {
     c7c:	80 91 62 00 	lds	r24, 0x0062
     c80:	83 30       	cpi	r24, 0x03	; 3
     c82:	09 f0       	breq	.+2      	; 0xc86 <PWM_Generate_CHANNELB+0x38>
     c84:	72 c0       	rjmp	.+228    	; 0xd6a <PWM_Generate_CHANNELB+0x11c>

		TOP = (F_CPU / (CONFIG.prescaler * Copy_u32freq)) - 1; //from equation pwm in fast mode
     c86:	80 91 61 00 	lds	r24, 0x0061
     c8a:	88 2f       	mov	r24, r24
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	a0 e0       	ldi	r26, 0x00	; 0
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	2e 81       	ldd	r18, Y+6	; 0x06
     c94:	3f 81       	ldd	r19, Y+7	; 0x07
     c96:	48 85       	ldd	r20, Y+8	; 0x08
     c98:	59 85       	ldd	r21, Y+9	; 0x09
     c9a:	bc 01       	movw	r22, r24
     c9c:	cd 01       	movw	r24, r26
     c9e:	0e 94 bc 07 	call	0xf78	; 0xf78 <__mulsi3>
     ca2:	9b 01       	movw	r18, r22
     ca4:	ac 01       	movw	r20, r24
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	92 e1       	ldi	r25, 0x12	; 18
     caa:	aa e7       	ldi	r26, 0x7A	; 122
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	bc 01       	movw	r22, r24
     cb0:	cd 01       	movw	r24, r26
     cb2:	0e 94 e7 07 	call	0xfce	; 0xfce <__udivmodsi4>
     cb6:	da 01       	movw	r26, r20
     cb8:	c9 01       	movw	r24, r18
     cba:	01 97       	sbiw	r24, 0x01	; 1
     cbc:	9c 83       	std	Y+4, r25	; 0x04
     cbe:	8b 83       	std	Y+3, r24	; 0x03
		ICR1L_REG = TOP + 1;
     cc0:	e6 e4       	ldi	r30, 0x46	; 70
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	9c 81       	ldd	r25, Y+4	; 0x04
     cc8:	01 96       	adiw	r24, 0x01	; 1
     cca:	91 83       	std	Z+1, r25	; 0x01
     ccc:	80 83       	st	Z, r24
		if (CONFIG.PWM_mode == NON_INVERTING) {
     cce:	80 91 63 00 	lds	r24, 0x0063
     cd2:	82 30       	cpi	r24, 0x02	; 2
     cd4:	19 f5       	brne	.+70     	; 0xd1c <PWM_Generate_CHANNELB+0xce>
			OCR1BL_REG = ((Copy_u8DutyCycle / 100) * (TOP + 1) - 1); //non inverting mince 1 due to tick from top to zero
     cd6:	e8 e4       	ldi	r30, 0x48	; 72
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	8d 81       	ldd	r24, Y+5	; 0x05
     cdc:	94 e6       	ldi	r25, 0x64	; 100
     cde:	69 2f       	mov	r22, r25
     ce0:	0e 94 db 07 	call	0xfb6	; 0xfb6 <__udivmodqi4>
     ce4:	28 2f       	mov	r18, r24
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	8b 81       	ldd	r24, Y+3	; 0x03
     cea:	9c 81       	ldd	r25, Y+4	; 0x04
     cec:	01 96       	adiw	r24, 0x01	; 1
     cee:	ac 01       	movw	r20, r24
     cf0:	24 9f       	mul	r18, r20
     cf2:	c0 01       	movw	r24, r0
     cf4:	25 9f       	mul	r18, r21
     cf6:	90 0d       	add	r25, r0
     cf8:	34 9f       	mul	r19, r20
     cfa:	90 0d       	add	r25, r0
     cfc:	11 24       	eor	r1, r1
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	91 83       	std	Z+1, r25	; 0x01
     d02:	80 83       	st	Z, r24
			TCCR1B_REG = (TCCR1B_REG & 0xF8) | (CONFIG.prescaler);/*prescaler bits select (CS01,CS00,CS02)*/
     d04:	ae e4       	ldi	r26, 0x4E	; 78
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	ee e4       	ldi	r30, 0x4E	; 78
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	98 2f       	mov	r25, r24
     d10:	98 7f       	andi	r25, 0xF8	; 248
     d12:	80 91 61 00 	lds	r24, 0x0061
     d16:	89 2b       	or	r24, r25
     d18:	8c 93       	st	X, r24
     d1a:	a9 c0       	rjmp	.+338    	; 0xe6e <PWM_Generate_CHANNELB+0x220>
		} else if (CONFIG.PWM_mode == INVERTING) {
     d1c:	80 91 63 00 	lds	r24, 0x0063
     d20:	83 30       	cpi	r24, 0x03	; 3
     d22:	09 f0       	breq	.+2      	; 0xd26 <PWM_Generate_CHANNELB+0xd8>
     d24:	a4 c0       	rjmp	.+328    	; 0xe6e <PWM_Generate_CHANNELB+0x220>
			OCR1BL_REG = ((Copy_u8DutyCycle / 100) * (TOP + 1));
     d26:	e8 e4       	ldi	r30, 0x48	; 72
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	8d 81       	ldd	r24, Y+5	; 0x05
     d2c:	94 e6       	ldi	r25, 0x64	; 100
     d2e:	69 2f       	mov	r22, r25
     d30:	0e 94 db 07 	call	0xfb6	; 0xfb6 <__udivmodqi4>
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	8b 81       	ldd	r24, Y+3	; 0x03
     d3a:	9c 81       	ldd	r25, Y+4	; 0x04
     d3c:	01 96       	adiw	r24, 0x01	; 1
     d3e:	ac 01       	movw	r20, r24
     d40:	24 9f       	mul	r18, r20
     d42:	c0 01       	movw	r24, r0
     d44:	25 9f       	mul	r18, r21
     d46:	90 0d       	add	r25, r0
     d48:	34 9f       	mul	r19, r20
     d4a:	90 0d       	add	r25, r0
     d4c:	11 24       	eor	r1, r1
     d4e:	91 83       	std	Z+1, r25	; 0x01
     d50:	80 83       	st	Z, r24
			TCCR1B_REG = (TCCR1B_REG & 0xF8) | (CONFIG.prescaler);/*prescaler bits select (CS01,CS00,CS02)*/
     d52:	ae e4       	ldi	r26, 0x4E	; 78
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	ee e4       	ldi	r30, 0x4E	; 78
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	98 2f       	mov	r25, r24
     d5e:	98 7f       	andi	r25, 0xF8	; 248
     d60:	80 91 61 00 	lds	r24, 0x0061
     d64:	89 2b       	or	r24, r25
     d66:	8c 93       	st	X, r24
     d68:	82 c0       	rjmp	.+260    	; 0xe6e <PWM_Generate_CHANNELB+0x220>
		}

	}

	else if (CONFIG.mode == TIMER_Phase_MODE) {
     d6a:	80 91 62 00 	lds	r24, 0x0062
     d6e:	81 30       	cpi	r24, 0x01	; 1
     d70:	09 f0       	breq	.+2      	; 0xd74 <PWM_Generate_CHANNELB+0x126>
     d72:	7d c0       	rjmp	.+250    	; 0xe6e <PWM_Generate_CHANNELB+0x220>
		uint16 TOP;
		TCNT1L_REG = CONFIG.initial_value;
     d74:	ec e4       	ldi	r30, 0x4C	; 76
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 91 64 00 	lds	r24, 0x0064
     d7c:	88 2f       	mov	r24, r24
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	91 83       	std	Z+1, r25	; 0x01
     d82:	80 83       	st	Z, r24

		TOP = (F_CPU / (2 * CONFIG.prescaler * Copy_u32freq)); //from equation pwm in phase mode
     d84:	80 91 61 00 	lds	r24, 0x0061
     d88:	88 2f       	mov	r24, r24
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	aa 27       	eor	r26, r26
     d92:	97 fd       	sbrc	r25, 7
     d94:	a0 95       	com	r26
     d96:	ba 2f       	mov	r27, r26
     d98:	2e 81       	ldd	r18, Y+6	; 0x06
     d9a:	3f 81       	ldd	r19, Y+7	; 0x07
     d9c:	48 85       	ldd	r20, Y+8	; 0x08
     d9e:	59 85       	ldd	r21, Y+9	; 0x09
     da0:	bc 01       	movw	r22, r24
     da2:	cd 01       	movw	r24, r26
     da4:	0e 94 bc 07 	call	0xf78	; 0xf78 <__mulsi3>
     da8:	9b 01       	movw	r18, r22
     daa:	ac 01       	movw	r20, r24
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	92 e1       	ldi	r25, 0x12	; 18
     db0:	aa e7       	ldi	r26, 0x7A	; 122
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	bc 01       	movw	r22, r24
     db6:	cd 01       	movw	r24, r26
     db8:	0e 94 e7 07 	call	0xfce	; 0xfce <__udivmodsi4>
     dbc:	da 01       	movw	r26, r20
     dbe:	c9 01       	movw	r24, r18
     dc0:	9a 83       	std	Y+2, r25	; 0x02
     dc2:	89 83       	std	Y+1, r24	; 0x01
		ICR1L_REG = TOP;
     dc4:	e6 e4       	ldi	r30, 0x46	; 70
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	9a 81       	ldd	r25, Y+2	; 0x02
     dcc:	91 83       	std	Z+1, r25	; 0x01
     dce:	80 83       	st	Z, r24
		if (CONFIG.PWM_mode == NON_INVERTING) {
     dd0:	80 91 63 00 	lds	r24, 0x0063
     dd4:	82 30       	cpi	r24, 0x02	; 2
     dd6:	09 f5       	brne	.+66     	; 0xe1a <PWM_Generate_CHANNELB+0x1cc>
			OCR1BL_REG = ((Copy_u8DutyCycle / 100) * (TOP)); //non inverting mince 1 due to tick from top to zero
     dd8:	e8 e4       	ldi	r30, 0x48	; 72
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	8d 81       	ldd	r24, Y+5	; 0x05
     dde:	94 e6       	ldi	r25, 0x64	; 100
     de0:	69 2f       	mov	r22, r25
     de2:	0e 94 db 07 	call	0xfb6	; 0xfb6 <__udivmodqi4>
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	9a 81       	ldd	r25, Y+2	; 0x02
     dee:	ac 01       	movw	r20, r24
     df0:	24 9f       	mul	r18, r20
     df2:	c0 01       	movw	r24, r0
     df4:	25 9f       	mul	r18, r21
     df6:	90 0d       	add	r25, r0
     df8:	34 9f       	mul	r19, r20
     dfa:	90 0d       	add	r25, r0
     dfc:	11 24       	eor	r1, r1
     dfe:	91 83       	std	Z+1, r25	; 0x01
     e00:	80 83       	st	Z, r24
			TCCR1B_REG = (TCCR1B_REG & 0xF8) | (CONFIG.prescaler);/*prescaler bits select (CS01,CS00,CS02)*/
     e02:	ae e4       	ldi	r26, 0x4E	; 78
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	ee e4       	ldi	r30, 0x4E	; 78
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	98 2f       	mov	r25, r24
     e0e:	98 7f       	andi	r25, 0xF8	; 248
     e10:	80 91 61 00 	lds	r24, 0x0061
     e14:	89 2b       	or	r24, r25
     e16:	8c 93       	st	X, r24
     e18:	2a c0       	rjmp	.+84     	; 0xe6e <PWM_Generate_CHANNELB+0x220>
		} else if (CONFIG.PWM_mode == INVERTING) {
     e1a:	80 91 63 00 	lds	r24, 0x0063
     e1e:	83 30       	cpi	r24, 0x03	; 3
     e20:	31 f5       	brne	.+76     	; 0xe6e <PWM_Generate_CHANNELB+0x220>
			OCR1BL_REG = (TOP - (Copy_u8DutyCycle / 100) * (TOP));
     e22:	e8 e4       	ldi	r30, 0x48	; 72
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	8d 81       	ldd	r24, Y+5	; 0x05
     e28:	94 e6       	ldi	r25, 0x64	; 100
     e2a:	69 2f       	mov	r22, r25
     e2c:	0e 94 db 07 	call	0xfb6	; 0xfb6 <__udivmodqi4>
     e30:	28 2f       	mov	r18, r24
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	ac 01       	movw	r20, r24
     e3a:	42 1b       	sub	r20, r18
     e3c:	53 0b       	sbc	r21, r19
     e3e:	9a 01       	movw	r18, r20
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	9a 81       	ldd	r25, Y+2	; 0x02
     e44:	ac 01       	movw	r20, r24
     e46:	24 9f       	mul	r18, r20
     e48:	c0 01       	movw	r24, r0
     e4a:	25 9f       	mul	r18, r21
     e4c:	90 0d       	add	r25, r0
     e4e:	34 9f       	mul	r19, r20
     e50:	90 0d       	add	r25, r0
     e52:	11 24       	eor	r1, r1
     e54:	91 83       	std	Z+1, r25	; 0x01
     e56:	80 83       	st	Z, r24
			TCCR1B_REG = (TCCR1B_REG & 0xF8) | (CONFIG.prescaler);/*prescaler bits select (CS01,CS00,CS02)*/
     e58:	ae e4       	ldi	r26, 0x4E	; 78
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	ee e4       	ldi	r30, 0x4E	; 78
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	98 2f       	mov	r25, r24
     e64:	98 7f       	andi	r25, 0xF8	; 248
     e66:	80 91 61 00 	lds	r24, 0x0061
     e6a:	89 2b       	or	r24, r25
     e6c:	8c 93       	st	X, r24
		}

	}

}
     e6e:	29 96       	adiw	r28, 0x09	; 9
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	f8 94       	cli
     e74:	de bf       	out	0x3e, r29	; 62
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	cd bf       	out	0x3d, r28	; 61
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <ADC_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init(const ADC_ConfigType * Config_Ptr)

{
     e80:	df 93       	push	r29
     e82:	cf 93       	push	r28
     e84:	00 d0       	rcall	.+0      	; 0xe86 <ADC_init+0x6>
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
     e8a:	9a 83       	std	Y+2, r25	; 0x02
     e8c:	89 83       	std	Y+1, r24	; 0x01
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 00 to choose to connect external reference voltage by input this voltage through AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX=(ADMUX & 0x3F) |((Config_Ptr->ref_volt & 0x03 ) << 6);
     e8e:	a7 e2       	ldi	r26, 0x27	; 39
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e7 e2       	ldi	r30, 0x27	; 39
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	28 2f       	mov	r18, r24
     e9a:	2f 73       	andi	r18, 0x3F	; 63
     e9c:	e9 81       	ldd	r30, Y+1	; 0x01
     e9e:	fa 81       	ldd	r31, Y+2	; 0x02
     ea0:	80 81       	ld	r24, Z
     ea2:	88 2f       	mov	r24, r24
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	00 24       	eor	r0, r0
     ea8:	96 95       	lsr	r25
     eaa:	87 95       	ror	r24
     eac:	07 94       	ror	r0
     eae:	96 95       	lsr	r25
     eb0:	87 95       	ror	r24
     eb2:	07 94       	ror	r0
     eb4:	98 2f       	mov	r25, r24
     eb6:	80 2d       	mov	r24, r0
     eb8:	82 2b       	or	r24, r18
     eba:	8c 93       	st	X, r24
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADATE   = 0 Disable Auto Trigger
	 * ADPS2:0 = 011 to choose ADC_Clock=F_CPU/8=1Mhz/8=125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA |= (1<<ADEN);
     ebc:	a6 e2       	ldi	r26, 0x26	; 38
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e6 e2       	ldi	r30, 0x26	; 38
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	80 68       	ori	r24, 0x80	; 128
     ec8:	8c 93       	st	X, r24
	ADCSRA = (ADCSRA & 0xF8) | ((Config_Ptr->prescaler) & 0x07);
     eca:	a6 e2       	ldi	r26, 0x26	; 38
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e6 e2       	ldi	r30, 0x26	; 38
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	98 2f       	mov	r25, r24
     ed6:	98 7f       	andi	r25, 0xF8	; 248
     ed8:	e9 81       	ldd	r30, Y+1	; 0x01
     eda:	fa 81       	ldd	r31, Y+2	; 0x02
     edc:	81 81       	ldd	r24, Z+1	; 0x01
     ede:	87 70       	andi	r24, 0x07	; 7
     ee0:	89 2b       	or	r24, r25
     ee2:	8c 93       	st	X, r24
}
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	cf 91       	pop	r28
     eea:	df 91       	pop	r29
     eec:	08 95       	ret

00000eee <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num)
{
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	0f 92       	push	r0
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* Input channel number must be from 0 --> 7 */
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	87 70       	andi	r24, 0x07	; 7
     efe:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
     f00:	a7 e2       	ldi	r26, 0x27	; 39
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e7 e2       	ldi	r30, 0x27	; 39
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	80 7e       	andi	r24, 0xE0	; 224
     f0c:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
     f0e:	a7 e2       	ldi	r26, 0x27	; 39
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e7 e2       	ldi	r30, 0x27	; 39
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	90 81       	ld	r25, Z
     f18:	89 81       	ldd	r24, Y+1	; 0x01
     f1a:	89 2b       	or	r24, r25
     f1c:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* Start conversion write '1' to ADSC */
     f1e:	a6 e2       	ldi	r26, 0x26	; 38
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e6 e2       	ldi	r30, 0x26	; 38
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	80 64       	ori	r24, 0x40	; 64
     f2a:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* Wait for conversion to complete, ADIF becomes '1' */
     f2c:	e6 e2       	ldi	r30, 0x26	; 38
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	88 2f       	mov	r24, r24
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	80 71       	andi	r24, 0x10	; 16
     f38:	90 70       	andi	r25, 0x00	; 0
     f3a:	00 97       	sbiw	r24, 0x00	; 0
     f3c:	b9 f3       	breq	.-18     	; 0xf2c <ADC_readChannel+0x3e>
	SET_BIT(ADCSRA,ADIF); /* Clear ADIF by write '1' to it :) */
     f3e:	a6 e2       	ldi	r26, 0x26	; 38
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e6 e2       	ldi	r30, 0x26	; 38
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	80 61       	ori	r24, 0x10	; 16
     f4a:	8c 93       	st	X, r24
	return ADC; /* Read the digital value from the data register */
     f4c:	e4 e2       	ldi	r30, 0x24	; 36
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	91 81       	ldd	r25, Z+1	; 0x01
}
     f54:	0f 90       	pop	r0
     f56:	cf 91       	pop	r28
     f58:	df 91       	pop	r29
     f5a:	08 95       	ret

00000f5c <main>:
 */

#include"MCAL/PWM.h"

int main ()
{
     f5c:	df 93       	push	r29
     f5e:	cf 93       	push	r28
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
	PWM_Init();
     f64:	0e 94 83 04 	call	0x906	; 0x906 <PWM_Init>
    PWM_Generate_CHANNELA(150,1000);
     f68:	86 e9       	ldi	r24, 0x96	; 150
     f6a:	48 ee       	ldi	r20, 0xE8	; 232
     f6c:	53 e0       	ldi	r21, 0x03	; 3
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	70 e0       	ldi	r23, 0x00	; 0
     f72:	0e 94 24 05 	call	0xa48	; 0xa48 <PWM_Generate_CHANNELA>
     f76:	ff cf       	rjmp	.-2      	; 0xf76 <main+0x1a>

00000f78 <__mulsi3>:
     f78:	62 9f       	mul	r22, r18
     f7a:	d0 01       	movw	r26, r0
     f7c:	73 9f       	mul	r23, r19
     f7e:	f0 01       	movw	r30, r0
     f80:	82 9f       	mul	r24, r18
     f82:	e0 0d       	add	r30, r0
     f84:	f1 1d       	adc	r31, r1
     f86:	64 9f       	mul	r22, r20
     f88:	e0 0d       	add	r30, r0
     f8a:	f1 1d       	adc	r31, r1
     f8c:	92 9f       	mul	r25, r18
     f8e:	f0 0d       	add	r31, r0
     f90:	83 9f       	mul	r24, r19
     f92:	f0 0d       	add	r31, r0
     f94:	74 9f       	mul	r23, r20
     f96:	f0 0d       	add	r31, r0
     f98:	65 9f       	mul	r22, r21
     f9a:	f0 0d       	add	r31, r0
     f9c:	99 27       	eor	r25, r25
     f9e:	72 9f       	mul	r23, r18
     fa0:	b0 0d       	add	r27, r0
     fa2:	e1 1d       	adc	r30, r1
     fa4:	f9 1f       	adc	r31, r25
     fa6:	63 9f       	mul	r22, r19
     fa8:	b0 0d       	add	r27, r0
     faa:	e1 1d       	adc	r30, r1
     fac:	f9 1f       	adc	r31, r25
     fae:	bd 01       	movw	r22, r26
     fb0:	cf 01       	movw	r24, r30
     fb2:	11 24       	eor	r1, r1
     fb4:	08 95       	ret

00000fb6 <__udivmodqi4>:
     fb6:	99 1b       	sub	r25, r25
     fb8:	79 e0       	ldi	r23, 0x09	; 9
     fba:	04 c0       	rjmp	.+8      	; 0xfc4 <__udivmodqi4_ep>

00000fbc <__udivmodqi4_loop>:
     fbc:	99 1f       	adc	r25, r25
     fbe:	96 17       	cp	r25, r22
     fc0:	08 f0       	brcs	.+2      	; 0xfc4 <__udivmodqi4_ep>
     fc2:	96 1b       	sub	r25, r22

00000fc4 <__udivmodqi4_ep>:
     fc4:	88 1f       	adc	r24, r24
     fc6:	7a 95       	dec	r23
     fc8:	c9 f7       	brne	.-14     	; 0xfbc <__udivmodqi4_loop>
     fca:	80 95       	com	r24
     fcc:	08 95       	ret

00000fce <__udivmodsi4>:
     fce:	a1 e2       	ldi	r26, 0x21	; 33
     fd0:	1a 2e       	mov	r1, r26
     fd2:	aa 1b       	sub	r26, r26
     fd4:	bb 1b       	sub	r27, r27
     fd6:	fd 01       	movw	r30, r26
     fd8:	0d c0       	rjmp	.+26     	; 0xff4 <__udivmodsi4_ep>

00000fda <__udivmodsi4_loop>:
     fda:	aa 1f       	adc	r26, r26
     fdc:	bb 1f       	adc	r27, r27
     fde:	ee 1f       	adc	r30, r30
     fe0:	ff 1f       	adc	r31, r31
     fe2:	a2 17       	cp	r26, r18
     fe4:	b3 07       	cpc	r27, r19
     fe6:	e4 07       	cpc	r30, r20
     fe8:	f5 07       	cpc	r31, r21
     fea:	20 f0       	brcs	.+8      	; 0xff4 <__udivmodsi4_ep>
     fec:	a2 1b       	sub	r26, r18
     fee:	b3 0b       	sbc	r27, r19
     ff0:	e4 0b       	sbc	r30, r20
     ff2:	f5 0b       	sbc	r31, r21

00000ff4 <__udivmodsi4_ep>:
     ff4:	66 1f       	adc	r22, r22
     ff6:	77 1f       	adc	r23, r23
     ff8:	88 1f       	adc	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	1a 94       	dec	r1
     ffe:	69 f7       	brne	.-38     	; 0xfda <__udivmodsi4_loop>
    1000:	60 95       	com	r22
    1002:	70 95       	com	r23
    1004:	80 95       	com	r24
    1006:	90 95       	com	r25
    1008:	9b 01       	movw	r18, r22
    100a:	ac 01       	movw	r20, r24
    100c:	bd 01       	movw	r22, r26
    100e:	cf 01       	movw	r24, r30
    1010:	08 95       	ret

00001012 <_exit>:
    1012:	f8 94       	cli

00001014 <__stop_program>:
    1014:	ff cf       	rjmp	.-2      	; 0x1014 <__stop_program>
